{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:10:16.915Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:10:17.209Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:10:32.816Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:11:15.644Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:11:15.670Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:11:16.669Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:11:17.343Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:11:17.351Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:11:45.804Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:11:45.823Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:11:46.437Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:11:46.988Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:11:46.999Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:12:51.284Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:12:51.302Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:12:51.914Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:12:52.484Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:12:52.494Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:16:16.479Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:16:16.483Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:16:16.646Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:16:16.649Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:17:44.759Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:17:44.781Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:17:45.632Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:17:46.309Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:17:46.320Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:21:10.455Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:21:10.478Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:21:11.341Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:21:12.052Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:21:12.066Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:21:34.531Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:21:47.109Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:21:47.132Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:21:48.007Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:21:48.509Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:21:48.513Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:25:34.844Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:25:34.847Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:25:35.028Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:25:35.034Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:25:57.600Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:25:57.604Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:25:57.771Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:25:57.778Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:26:23.928Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:26:23.931Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:26:24.076Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:26:24.083Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:27:27.599Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:27:27.601Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:27:27.761Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:27:27.765Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:28:44.124Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:31:52.720Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:31:52.745Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:31:53.617Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:31:54.301Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:31:54.316Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:34:02.923Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:35:59.540Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:36:54.409Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:37:06.086Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:39:22.966Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:39:33.541Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:39:39.468Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:39:52.747Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:39:58.179Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:40:00.287Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:40:19.303Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:40:33.084Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:40:43.150Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment changed to: ","timestamp":"2016-07-27T12:41:03.810Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T12:41:03.833Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:41:04.699Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T12:41:05.397Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T12:41:05.438Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:42:50.158Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:43:59.787Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:44:07.637Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:44:09.652Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:44:30.282Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:44:36.917Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:45:02.296Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:45:08.334Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:45:48.287Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:45:59.773Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:07.008Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:09.023Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:15.353Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:18.174Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:20.990Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:27.336Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:37.593Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:44.828Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:46:47.739Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:01.200Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:19.304Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:27.448Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:29.660Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:32.376Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:34.882Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:36.589Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:37.696Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:47:40.210Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:48:33.925Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:50:32.105Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:50:35.227Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:50:37.444Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:52:31.710Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:52:36.341Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:52:38.357Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:52:40.466Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:52:42.575Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:02.093Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:12.166Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:23.223Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:26.039Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:37.901Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:46.858Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:49.568Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:53:54.505Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:55:58.547Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:56:09.814Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:56:44.323Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:57:00.110Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:58:08.560Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:58:29.496Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:58:38.743Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:59:02.005Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:59:16.763Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:59:21.181Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:59:27.315Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T12:59:49.845Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:00:15.195Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:00:50.427Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:00:53.346Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:02.002Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:10.538Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:18.687Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:25.233Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:36.411Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:38.628Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:01:42.452Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:02.249Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:05.867Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:08.988Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:13.118Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:15.842Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:29.226Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:33.156Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:42.617Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:47.152Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:51.987Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:02:57.524Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:03:06.570Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:03:19.562Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:06:05.357Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:06:12.202Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:06:31.032Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:07:14.300Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:07:27.487Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:07:34.631Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:07:40.264Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:07:50.819Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:08:01.087Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:09:17.740Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:09:29.117Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:10:00.804Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:10:24.346Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:10:31.389Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:10:32.995Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:10:35.708Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:11:03.673Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:14:42.700Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:15:40.751Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:17:32.065Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:17:38.103Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:18:06.772Z"}
{"main-image-dir":"/images/","prod":false,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:18:37.057Z"}
{"level":"info","message":"Creating SVG sprite","timestamp":"2016-07-27T13:29:03.375Z"}
{"main-image-dir":"/documents/67510365/77056610/","prod":true,"level":"info","message":"environment: ","timestamp":"2016-07-27T13:29:04.293Z"}
{"level":"info","message":"Renaming Sprite File","timestamp":"2016-07-27T13:29:04.757Z"}
{"level":"info","message":"Running templates","timestamp":"2016-07-27T13:29:04.765Z"}
2016-07-27T13:29:05.034Z - info: Updating article:  groupId=67510365, articleId=77062063, defaultLocale=en_US, locales=[locale=en_US, filename=build/modconf.css]
2016-07-27T13:29:05.041Z - silly: <?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US">/* text and background */ /* border */  /* text and agenda header*/ /* text*/ /* number text*/  /* border, agenda day selected */ /* agenda day*/


.banner  {
    text-align: center;
    background: url(/documents/67510365/77056610//MC16-Mobile-Banner-img-1-1.png) no-repeat center center;
    background-size: 100%;
    padding-bottom: 95%;
    position: relative
}
.banner__desktoplogo {
    display: none;
}

.banner__mobilelogo, .banner__desktoplogo {
   position:absolute;
    top:50%;
    bottom:50%;
    transform: translateX( -50%) translateY(-50%);
    -webkit-transform:  translateX( -50%) translateY(-50%);
    width: 70%;
    height: 70%;
}

@media (min-width: 771px)  {


    .banner  {
        background: url(/documents/67510365/77056610//MC16-Banner-img-1-1_70percent.png) no-repeat center center;
        background-size: 100%;
        padding-bottom: 37%
    }


    .banner__mobilelogo  {
        display: none
    }


    .banner__desktoplogo  {
        display: inline
    }
}

</static-content>
</root>
2016-07-27T13:29:05.041Z - debug: /api/secure/jsonws/invoke
2016-07-27T13:29:05.041Z - debug: POST Request:  json=true, url=https://web.liferay.com/api/secure/jsonws/invoke, groupId=67510365, articleId=77062063, @version=$article.version, groupId=67510365, articleId=77062063, content=<?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US">/* text and background */ /* border */  /* text and agenda header*/ /* text*/ /* number text*/  /* border, agenda day selected */ /* agenda day*/


.banner  {
    text-align: center;
    background: url(/documents/67510365/77056610//MC16-Mobile-Banner-img-1-1.png) no-repeat center center;
    background-size: 100%;
    padding-bottom: 95%;
    position: relative
}
.banner__desktoplogo {
    display: none;
}

.banner__mobilelogo, .banner__desktoplogo {
   position:absolute;
    top:50%;
    bottom:50%;
    transform: translateX( -50%) translateY(-50%);
    -webkit-transform:  translateX( -50%) translateY(-50%);
    width: 70%;
    height: 70%;
}

@media (min-width: 771px)  {


    .banner  {
        background: url(/documents/67510365/77056610//MC16-Banner-img-1-1_70percent.png) no-repeat center center;
        background-size: 100%;
        padding-bottom: 37%
    }


    .banner__mobilelogo  {
        display: none
    }


    .banner__desktoplogo  {
        display: inline
    }
}

</static-content>
</root>, serviceContext.scopeGroupId=67510365, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
2016-07-27T13:29:05.046Z - info: Updating article:  groupId=67510365, articleId=77062154, defaultLocale=en_US, locales=[locale=en_US, filename=build/all.js]
2016-07-27T13:29:05.047Z - silly: <?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US"><![CDATA[<script></script>]]></static-content>
</root>
2016-07-27T13:29:05.047Z - debug: /api/secure/jsonws/invoke
2016-07-27T13:29:05.047Z - debug: POST Request:  json=true, url=https://web.liferay.com/api/secure/jsonws/invoke, groupId=67510365, articleId=77062154, @version=$article.version, groupId=67510365, articleId=77062154, content=<?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US"><![CDATA[<script></script>]]></static-content>
</root>, serviceContext.scopeGroupId=67510365, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
2016-07-27T13:29:05.048Z - info: Updating article:  groupId=67510365, articleId=77062078, defaultLocale=en_US, locales=[locale=en_US, filename=build/banner.html]
2016-07-27T13:29:05.048Z - silly: <?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US"><![CDATA[<svg width="0" height="0" style="position:absolute"><symbol viewBox="0 0 898.183 450.319" id="Modular-Conf-Microsite-Logo-1-0"><g fill="#FFF"><path d="M24.026 438.593c-.164-3.566-.369-7.871-.328-11.604h-.123a147.361 147.361 0 0 1-3.279 10.578l-4.019 11.973h-3.895l-3.69-11.809a138.543 138.543 0 0 1-2.788-10.742h-.082c-.123 3.609-.287 7.996-.492 11.768l-.614 11.111H0l1.846-27.635h6.642l3.608 11.111a140.05 140.05 0 0 1 2.542 9.594h.123a135.043 135.043 0 0 1 2.747-9.635l3.812-11.07h6.561l1.599 27.635h-4.92l-.534-11.275zM79.622 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM104.468 422.603c2.214-.369 5.043-.574 8.036-.574 5.166 0 8.733 1.066 11.275 3.199 2.665 2.172 4.305 5.453 4.305 10.168 0 4.92-1.681 8.609-4.305 10.988-2.747 2.5-7.134 3.771-12.505 3.771-2.952 0-5.166-.164-6.807-.369v-27.183zm5.043 23.412c.697.123 1.764.123 2.788.123 6.561.041 10.455-3.568 10.455-10.578.041-6.109-3.484-9.596-9.799-9.596-1.599 0-2.747.123-3.444.287v19.764zM157.973 422.233v16.113c0 5.412 2.255 7.914 5.658 7.914 3.649 0 5.822-2.502 5.822-7.914v-16.113h5.043v15.785c0 8.529-4.387 12.301-11.029 12.301-6.396 0-10.537-3.568-10.537-12.26v-15.826h5.043zM200.776 422.233h5.043v23.412h11.357v4.223h-16.4v-27.635zM247.188 442.036l-2.379 7.832h-5.207l8.856-27.635h6.438l8.979 27.635h-5.412l-2.501-7.832h-8.774zm7.914-3.812l-2.174-6.807c-.532-1.68-.983-3.566-1.394-5.166h-.082c-.41 1.6-.82 3.527-1.312 5.166l-2.132 6.807h7.094zM288.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.978 0 6.684.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.86 3.445 1.599 6.643 2.173 7.709h-5.207c-.41-.82-1.066-3.076-1.846-6.52-.778-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.599 0-2.624.123-3.116.246v8.735zM337.1 422.233v27.635h-5.043v-27.635h5.043zM368.67 426.456h-7.872v-4.223h20.869v4.223h-7.954v23.412h-5.043v-23.412zM412.334 449.868v-11.521l-8.732-16.113h5.739l3.321 7.094c.943 2.049 1.641 3.607 2.378 5.494h.082c.697-1.764 1.477-3.486 2.419-5.494l3.321-7.094h5.699l-9.185 15.99v11.645h-5.042zM498.926 449.048c-1.189.615-3.813 1.23-7.135 1.23-8.773 0-14.104-5.494-14.104-13.9 0-9.102 6.313-14.596 14.76-14.596 3.321 0 5.699.697 6.725 1.23l-1.107 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.676 3.527-9.676 10.168 0 6.068 3.566 9.965 9.635 9.965 2.05 0 4.182-.41 5.494-1.025l.82 3.976zM547.183 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM572.028 449.868v-27.635h5.74l7.134 11.85a75.934 75.934 0 0 1 4.716 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.674v27.635h-5.207l-7.216-12.137c-1.764-3.033-3.608-6.438-4.962-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM620.245 422.233h15.949v4.141h-10.906v7.627h10.168v4.141h-10.168v11.727h-5.043v-27.636zM677.07 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099zM703.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.977 0 6.683.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.861 3.445 1.6 6.643 2.173 7.709h-5.207c-.409-.82-1.065-3.076-1.845-6.52-.779-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.6 0-2.624.123-3.116.246v8.735zM762.514 437.608H752.1v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141H752.1v7.135h10.414v4.099zM788.672 449.868v-27.635h5.74l7.134 11.85a75.923 75.923 0 0 1 4.715 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.675v27.635h-5.207l-7.217-12.137c-1.763-3.033-3.607-6.438-4.961-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM856.69 449.048c-1.188.615-3.812 1.23-7.134 1.23-8.774 0-14.104-5.494-14.104-13.9 0-9.102 6.314-14.596 14.761-14.596 3.321 0 5.699.697 6.724 1.23l-1.106 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.677 3.527-9.677 10.168 0 6.068 3.567 9.965 9.636 9.965 2.05 0 4.182-.41 5.494-1.025l.818 3.976zM896.952 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099z"/></g><path fill="#FFF" d="M688.858 324.74H229.126V0h459.732v324.74zm-443.743-15.99H672.87V15.989H245.115V308.75z"/><path fill="#FFF" d="M278.823 48.632h19.902l39.984 93.848 39.213-93.848h19.967v227.247H376.78V102.813h-.48l-29.184 69.14h-17.605l-29.19-69.14h-.381v104.272h-21.116V48.632zM419.481 121.807c0-16.757.475-27.969 1.436-33.646 1.018-5.677 2.58-10.255 4.691-13.753 3.373-6.627 8.787-12.529 16.245-17.707 7.326-5.247 16.476-7.938 27.437-8.069 11.093.131 20.33 2.829 27.726 8.101 7.326 5.203 12.616 11.13 15.87 17.775 2.355 3.485 3.979 8.057 4.872 13.728.824 5.658 1.243 16.845 1.243 33.571 0 16.457-.419 27.587-1.243 33.376-.894 5.79-2.517 10.431-4.878 13.922-3.248 6.652-8.538 12.504-15.864 17.576-7.396 5.271-16.639 8.032-27.726 8.294-10.967-.262-20.11-3.023-27.437-8.294-7.458-5.072-12.872-10.924-16.252-17.576a161.945 161.945 0 0 1-2.772-6.22c-.762-2.042-1.399-4.609-1.912-7.702-.961-5.789-1.436-16.919-1.436-33.376zm21.118 0c0 14.178.506 23.784 1.529 28.792.894 5.016 2.711 9.075 5.459 12.173 2.236 2.967 5.178 5.377 8.812 7.22 3.58 2.186 7.857 3.267 12.841 3.267 5.047 0 9.426-1.081 13.13-3.267 3.509-1.843 6.313-4.253 8.424-7.22 2.749-3.098 4.636-7.157 5.659-12.173.95-5.009 1.437-14.615 1.437-28.792 0-14.184-.486-23.853-1.437-28.993-1.023-4.884-2.91-8.875-5.659-11.979-2.11-2.966-4.915-5.44-8.424-7.42-3.704-1.911-8.083-2.936-13.13-3.061-4.983.125-9.261 1.149-12.841 3.061-3.635 1.98-6.576 4.454-8.812 7.42-2.748 3.104-4.565 7.095-5.459 11.979-1.024 5.141-1.529 14.809-1.529 28.993zM540.585 48.632h48.799c18.88.131 33.039 8.232 42.482 24.296 3.373 5.396 5.509 11.055 6.396 16.976.705 5.934 1.056 16.17 1.056 30.716 0 15.471-.544 26.27-1.625 32.384-.511 3.098-1.28 5.871-2.298 8.301-1.087 2.374-2.393 4.834-3.923 7.408-4.084 6.783-9.755 12.373-17.031 16.789-7.201 4.734-16.04 7.107-26.495 7.107h-47.361V48.632zm21.117 123.447h25.283c11.873 0 20.492-4.197 25.856-12.572 2.361-3.098 3.86-7.027 4.497-11.773.575-4.685.869-13.459.869-26.326 0-12.529-.294-21.498-.869-26.913-.762-5.409-2.592-9.793-5.452-13.16-5.877-8.375-14.172-12.436-24.901-12.167h-25.283v102.911zM459.37 258.847c-1.263 5.483-3.661 9.7-7.203 12.647-3.644 2.917-7.959 4.379-12.939 4.379-4.51-.113-8.271-1.25-11.28-3.41-3.067-2.086-5.296-4.498-6.683-7.227a62.434 62.434 0 0 1-1.141-2.561c-.314-.838-.577-1.893-.786-3.167-.394-2.38-.591-6.952-.591-13.722 0-6.871.197-11.473.591-13.803.419-2.324 1.062-4.21 1.927-5.641 1.389-2.735 3.615-5.171 6.686-7.307 3.014-2.167 6.777-3.279 11.286-3.329 5.53.05 10.04 1.743 13.524 5.065 3.489 3.354 5.69 7.501 6.609 12.442h-9.216c-.713-2.387-1.999-4.416-3.86-6.103-1.945-1.599-4.307-2.423-7.089-2.479-2.048.056-3.81.475-5.278 1.262-1.498.812-2.707 1.83-3.625 3.055-1.127 1.273-1.877 2.91-2.244 4.921-.42 2.117-.629 6.089-.629 11.917 0 5.833.209 9.781.631 11.842.365 2.061 1.115 3.729 2.246 5.003.918 1.218 2.126 2.211 3.625 2.967 1.468.899 3.229 1.343 5.277 1.343 4.888 0 8.538-2.698 10.955-8.095h9.207zM478.128 245.788c0-6.889.194-11.498.588-13.828.418-2.336 1.062-4.223 1.93-5.658 1.387-2.724 3.616-5.147 6.677-7.276 3.017-2.161 6.776-3.267 11.286-3.317 4.56.05 8.356 1.162 11.392 3.329 3.017 2.136 5.19 4.572 6.527 7.307.968 1.431 1.636 3.316 2.005 5.641.337 2.33.512 6.932.512 13.803 0 6.77-.175 11.342-.512 13.722-.369 2.386-1.037 4.291-2.005 5.728-1.337 2.729-3.511 5.141-6.527 7.227-3.035 2.16-6.839 3.297-11.397 3.41-4.504-.113-8.264-1.25-11.28-3.41-3.066-2.086-5.29-4.498-6.677-7.227a63.97 63.97 0 0 1-1.143-2.561c-.312-.838-.574-1.893-.787-3.167-.395-2.382-.589-6.954-.589-13.723zm8.683 0c0 5.833.206 9.781.624 11.842.368 2.061 1.117 3.729 2.248 5.003.918 1.218 2.123 2.211 3.623 2.967 1.474.899 3.229 1.343 5.277 1.343 2.073 0 3.872-.443 5.396-1.343 1.442-.756 2.598-1.749 3.466-2.967 1.131-1.274 1.905-2.942 2.323-5.003.395-2.061.594-6.009.594-11.842 0-5.828-.199-9.8-.594-11.917-.418-2.011-1.192-3.647-2.323-4.921-.868-1.225-2.023-2.243-3.466-3.055-1.524-.787-3.323-1.206-5.396-1.262-2.048.056-3.804.475-5.277 1.262-1.5.812-2.705 1.83-3.623 3.055-1.131 1.273-1.88 2.91-2.248 4.921-.418 2.117-.624 6.088-.624 11.917zM539.465 216.195h8.185l25.963 42.078h.156v-42.078h8.682v59.19h-8.223l-25.926-42.076h-.156v42.076h-8.681v-59.19zM602.693 216.195h36.625v8.438h-27.943v17.506h23.852v7.951h-23.852v25.295h-8.682v-59.19z"/></symbol><symbol viewBox="0 0 360.967 363.22" id="Modular-Conf-Mobile-Logo-1-0"><g fill="#FFF"><path d="M20.935 302.154c-.139-3.014-.311-6.65-.276-9.802h-.104a124.32 124.32 0 0 1-2.771 8.936L14.39 311.4h-3.291l-3.117-9.974c-.9-2.979-1.731-6.165-2.355-9.074h-.069a522.236 522.236 0 0 1-.416 9.94l-.52 9.385H.639l1.56-23.343h5.609l3.049 9.386a117.15 117.15 0 0 1 2.147 8.106h.103a115.49 115.49 0 0 1 2.321-8.14l3.221-9.352h5.542l1.351 23.343h-4.156l-.451-9.523zM67.897 299.765c0 7.827-4.744 12.294-11.186 12.294-6.582 0-10.738-5.021-10.738-11.879 0-7.169 4.503-12.226 11.084-12.226 6.823 0 10.84 5.16 10.84 11.811zm-17.42.345c0 4.746 2.39 8.521 6.477 8.521 4.122 0 6.442-3.81 6.442-8.693 0-4.398-2.182-8.555-6.442-8.555-4.225 0-6.477 3.914-6.477 8.727zM88.886 288.646c1.87-.312 4.261-.485 6.789-.485 4.363 0 7.377.901 9.523 2.702 2.252 1.836 3.637 4.606 3.637 8.59 0 4.157-1.42 7.272-3.637 9.281-2.32 2.113-6.026 3.188-10.563 3.188-2.493 0-4.363-.139-5.749-.312v-22.964zm4.26 19.776c.588.104 1.488.104 2.354.104 5.541.035 8.832-3.011 8.832-8.934.034-5.161-2.944-8.105-8.278-8.105-1.351 0-2.32.104-2.908.243v16.692zM134.083 288.335v13.611c0 4.572 1.905 6.685 4.78 6.685 3.082 0 4.917-2.113 4.917-6.685v-13.611h4.261v13.335c0 7.203-3.706 10.389-9.316 10.389-5.403 0-8.901-3.012-8.901-10.354v-13.369h4.259zM170.239 288.335h4.261v19.776h9.594v3.566H170.24v-23.342zM209.446 305.063l-2.01 6.615h-4.398l7.481-23.343h5.437l7.586 23.343h-4.572l-2.112-6.615h-7.412zm6.685-3.22l-1.837-5.75c-.449-1.42-.831-3.013-1.177-4.363h-.069c-.347 1.351-.693 2.979-1.107 4.363l-1.803 5.75h5.993zM244.113 288.646c1.593-.276 3.982-.485 6.441-.485 3.359 0 5.646.555 7.204 1.871 1.282 1.073 2.01 2.701 2.01 4.676 0 3.013-2.044 5.057-4.227 5.854v.104c1.663.623 2.668 2.251 3.257 4.501.727 2.91 1.351 5.611 1.835 6.511h-4.398c-.346-.691-.9-2.598-1.559-5.505-.658-3.049-1.767-4.018-4.19-4.087h-2.147v9.593h-4.226v-23.033zm4.226 10.322h2.527c2.875 0 4.676-1.524 4.676-3.845 0-2.562-1.801-3.74-4.571-3.74-1.351 0-2.217.104-2.632.208v7.377zM285.396 288.335v23.343h-4.26v-23.343h4.26zM312.064 291.902h-6.649v-3.567h17.629v3.567h-6.719v19.775h-4.261v-19.775zM348.948 311.678v-9.731l-7.377-13.611h4.849l2.806 5.992c.797 1.731 1.385 3.048 2.008 4.641h.07c.588-1.489 1.246-2.944 2.043-4.641l2.806-5.992h4.814l-7.759 13.508v9.835h-4.26zM17.957 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM59.066 350.924c0 7.828-4.745 12.295-11.187 12.295-6.581 0-10.736-5.021-10.736-11.879 0-7.168 4.502-12.227 11.082-12.227 6.824 0 10.841 5.162 10.841 11.811zm-17.42.347c0 4.744 2.391 8.52 6.477 8.52 4.121 0 6.442-3.811 6.442-8.693 0-4.398-2.183-8.555-6.442-8.555-4.226 0-6.477 3.914-6.477 8.728zM80.401 362.838v-23.344h4.85l6.025 10.01a64.167 64.167 0 0 1 3.983 7.828h.068c-.276-3.117-.38-6.131-.38-9.697v-8.141h3.947v23.344h-4.398l-6.096-10.25c-1.488-2.564-3.048-5.439-4.19-8.07l-.104.033c.173 3.014.208 6.096.208 9.941v8.346h-3.913zM121.477 339.494h13.473v3.498h-9.213v6.443h8.589v3.498h-8.589v9.904h-4.26v-23.343zM169.825 352.482h-8.797v6.857h9.835v3.498h-14.095v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM192.268 339.807c1.593-.277 3.982-.484 6.441-.484 3.359 0 5.646.555 7.204 1.869 1.282 1.074 2.01 2.703 2.01 4.676 0 3.014-2.044 5.057-4.227 5.854v.104c1.662.625 2.668 2.252 3.256 4.504.728 2.908 1.352 5.609 1.836 6.51h-4.398c-.347-.691-.9-2.596-1.559-5.506-.658-3.047-1.767-4.018-4.191-4.088h-2.147v9.594h-4.225v-23.033zm4.224 10.322h2.528c2.875 0 4.676-1.525 4.676-3.846 0-2.562-1.801-3.74-4.572-3.74-1.35 0-2.216.104-2.632.207v7.379zM242.694 352.482h-8.797v6.857h9.836v3.498h-14.096v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM265.137 362.838v-23.344h4.849l6.026 10.01a64.025 64.025 0 0 1 3.983 7.828h.069c-.276-3.117-.381-6.131-.381-9.697v-8.141h3.948v23.344h-4.398l-6.096-10.25c-1.489-2.564-3.048-5.439-4.191-8.07l-.104.033c.174 3.014.208 6.096.208 9.941v8.346h-3.913zM322.941 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM357.297 352.482h-8.798v6.857h9.838v3.498h-14.098v-23.344h13.577v3.498h-9.317v6.027h8.798v3.464z"/></g><path fill="#FFF" d="M351.451 242.661H7.917V0h343.534v242.661zM19.866 230.713h319.637V11.949H19.866v218.764z"/><path fill="#FFF" d="M45.054 36.342h14.871l29.879 70.127 29.302-70.127h14.92V206.15h-15.774V76.828h-.357l-21.81 51.664H82.93L61.116 76.828h-.283v77.917H45.054V36.342zM150.161 91.021c0-12.521.354-20.899 1.07-25.143.762-4.242 1.93-7.662 3.506-10.276 2.521-4.952 6.567-9.362 12.141-13.23 5.475-3.921 12.311-5.932 20.502-6.029 8.288.098 15.191 2.113 20.717 6.053 5.475 3.887 9.428 8.316 11.859 13.282 1.761 2.604 2.974 6.021 3.641 10.259.616 4.227.93 12.586.93 25.085 0 12.298-.313 20.615-.93 24.941-.667 4.325-1.88 7.794-3.645 10.402-2.428 4.971-6.381 9.345-11.855 13.134-5.525 3.939-12.433 6.002-20.717 6.198-8.195-.196-15.027-2.259-20.502-6.198-5.573-3.789-9.619-8.163-12.145-13.134a121.57 121.57 0 0 1-2.072-4.648c-.568-1.526-1.046-3.444-1.43-5.754-.716-4.327-1.07-12.645-1.07-24.942zm15.778 0c0 10.594.38 17.772 1.144 21.516.668 3.747 2.024 6.782 4.079 9.096 1.672 2.217 3.869 4.019 6.583 5.396 2.677 1.633 5.873 2.44 9.596 2.44 3.772 0 7.045-.808 9.812-2.44 2.622-1.377 4.719-3.179 6.293-5.396 2.056-2.313 3.466-5.349 4.23-9.096.709-3.743 1.072-10.922 1.072-21.516 0-10.599-.363-17.823-1.072-21.665-.765-3.649-2.175-6.633-4.23-8.951-1.574-2.217-3.671-4.065-6.293-5.545-2.768-1.427-6.04-2.193-9.812-2.286-3.723.093-6.919.859-9.596 2.286-2.714 1.479-4.911 3.328-6.583 5.545-2.055 2.318-3.411 5.302-4.079 8.951-.764 3.841-1.144 11.066-1.144 21.665zM240.655 36.342h36.463c14.108.098 24.688 6.151 31.746 18.154 2.52 4.032 4.116 8.261 4.779 12.685.526 4.435.788 12.084.788 22.952 0 11.562-.405 19.631-1.213 24.199-.382 2.315-.958 4.388-1.718 6.203-.812 1.773-1.788 3.611-2.932 5.535-3.053 5.068-7.29 9.245-12.727 12.546-5.382 3.537-11.984 5.311-19.798 5.311h-35.39V36.342zm15.779 92.245h18.894c8.872 0 15.312-3.138 19.319-9.396 1.765-2.315 2.886-5.251 3.361-8.798.431-3.5.649-10.058.649-19.672 0-9.361-.219-16.064-.649-20.11-.569-4.042-1.936-7.318-4.073-9.834-4.392-6.258-10.591-9.292-18.607-9.091h-18.894v76.901zM179.967 193.424c-.945 4.097-2.737 7.248-5.383 9.451-2.722 2.179-5.947 3.271-9.669 3.271-3.37-.084-6.18-.933-8.429-2.548-2.293-1.559-3.956-3.36-4.993-5.399-.317-.668-.6-1.307-.854-1.914-.236-.626-.43-1.414-.588-2.365-.293-1.779-.441-5.195-.441-10.255 0-5.134.148-8.572.441-10.313.314-1.736.795-3.146 1.441-4.215 1.037-2.044 2.7-3.864 4.995-5.461 2.251-1.618 5.064-2.45 8.433-2.487 4.132.037 7.504 1.302 10.106 3.785 2.606 2.506 4.252 5.605 4.939 9.297h-6.887a9.844 9.844 0 0 0-2.884-4.56c-1.455-1.194-3.219-1.811-5.299-1.853-1.528.042-2.845.354-3.943.942-1.12.607-2.023 1.368-2.709 2.282-.842.951-1.401 2.175-1.675 3.679-.315 1.581-.472 4.55-.472 8.903 0 4.359.156 7.31.472 8.85.273 1.54.833 2.786 1.678 3.737.685.91 1.59 1.653 2.709 2.218 1.097.672 2.413 1.003 3.942 1.003 3.653 0 6.381-2.017 8.188-6.048h6.882zM193.983 183.664c0-5.147.146-8.592.439-10.332.312-1.747.793-3.155 1.441-4.229 1.035-2.034 2.703-3.845 4.99-5.437 2.254-1.615 5.062-2.441 8.432-2.479 3.408.037 6.244.869 8.514 2.487 2.254 1.597 3.88 3.417 4.877 5.461.723 1.068 1.224 2.479 1.498 4.215.252 1.741.382 5.18.382 10.313 0 5.06-.13 8.476-.382 10.255-.274 1.782-.775 3.206-1.498 4.279-.997 2.039-2.623 3.841-4.877 5.399-2.27 1.615-5.109 2.464-8.516 2.548-3.367-.084-6.176-.933-8.43-2.548-2.293-1.559-3.955-3.36-4.99-5.399a45.995 45.995 0 0 1-.853-1.914c-.234-.626-.431-1.414-.589-2.365-.292-1.778-.438-5.194-.438-10.254zm6.488 0c0 4.359.155 7.31.466 8.85.275 1.54.837 2.786 1.68 3.737.687.91 1.588 1.653 2.708 2.218 1.102.672 2.414 1.003 3.944 1.003 1.549 0 2.893-.331 4.032-1.003 1.077-.564 1.941-1.308 2.589-2.218.846-.951 1.425-2.197 1.736-3.737.296-1.54.446-4.49.446-8.85 0-4.354-.15-7.322-.446-8.903-.312-1.504-.891-2.728-1.736-3.679-.647-.914-1.512-1.675-2.589-2.282-1.14-.588-2.483-.9-4.032-.942-1.53.042-2.843.354-3.944.942-1.12.607-2.021 1.368-2.708 2.282-.843.951-1.404 2.175-1.68 3.679-.311 1.581-.466 4.55-.466 8.903zM239.817 161.552h6.115l19.401 31.441h.117v-31.441h6.485v44.23h-6.145l-19.371-31.442h-.117v31.442h-6.486v-44.23zM287.064 161.552h27.367v6.306h-20.88v13.082h17.822v5.941h-17.822v18.901h-6.487v-44.23z"/></symbol></svg><div class="banner">
<svg class="banner__mobilelogo"><use xlink:href="#Modular-Conf-Mobile-Logo-1-0"></use></svg>
<svg class="banner__desktoplogo"><use xlink:href="#Modular-Conf-Microsite-Logo-1-0"></use></svg>
</div>]]></static-content>
</root>
2016-07-27T13:29:05.048Z - debug: /api/secure/jsonws/invoke
2016-07-27T13:29:05.048Z - debug: POST Request:  json=true, url=https://web.liferay.com/api/secure/jsonws/invoke, groupId=67510365, articleId=77062078, @version=$article.version, groupId=67510365, articleId=77062078, content=<?xml version="1.0"?>
<root available-locales="en_US" default-locale="en_US">
  <static-content language-id="en_US"><![CDATA[<svg width="0" height="0" style="position:absolute"><symbol viewBox="0 0 898.183 450.319" id="Modular-Conf-Microsite-Logo-1-0"><g fill="#FFF"><path d="M24.026 438.593c-.164-3.566-.369-7.871-.328-11.604h-.123a147.361 147.361 0 0 1-3.279 10.578l-4.019 11.973h-3.895l-3.69-11.809a138.543 138.543 0 0 1-2.788-10.742h-.082c-.123 3.609-.287 7.996-.492 11.768l-.614 11.111H0l1.846-27.635h6.642l3.608 11.111a140.05 140.05 0 0 1 2.542 9.594h.123a135.043 135.043 0 0 1 2.747-9.635l3.812-11.07h6.561l1.599 27.635h-4.92l-.534-11.275zM79.622 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM104.468 422.603c2.214-.369 5.043-.574 8.036-.574 5.166 0 8.733 1.066 11.275 3.199 2.665 2.172 4.305 5.453 4.305 10.168 0 4.92-1.681 8.609-4.305 10.988-2.747 2.5-7.134 3.771-12.505 3.771-2.952 0-5.166-.164-6.807-.369v-27.183zm5.043 23.412c.697.123 1.764.123 2.788.123 6.561.041 10.455-3.568 10.455-10.578.041-6.109-3.484-9.596-9.799-9.596-1.599 0-2.747.123-3.444.287v19.764zM157.973 422.233v16.113c0 5.412 2.255 7.914 5.658 7.914 3.649 0 5.822-2.502 5.822-7.914v-16.113h5.043v15.785c0 8.529-4.387 12.301-11.029 12.301-6.396 0-10.537-3.568-10.537-12.26v-15.826h5.043zM200.776 422.233h5.043v23.412h11.357v4.223h-16.4v-27.635zM247.188 442.036l-2.379 7.832h-5.207l8.856-27.635h6.438l8.979 27.635h-5.412l-2.501-7.832h-8.774zm7.914-3.812l-2.174-6.807c-.532-1.68-.983-3.566-1.394-5.166h-.082c-.41 1.6-.82 3.527-1.312 5.166l-2.132 6.807h7.094zM288.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.978 0 6.684.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.86 3.445 1.599 6.643 2.173 7.709h-5.207c-.41-.82-1.066-3.076-1.846-6.52-.778-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.599 0-2.624.123-3.116.246v8.735zM337.1 422.233v27.635h-5.043v-27.635h5.043zM368.67 426.456h-7.872v-4.223h20.869v4.223h-7.954v23.412h-5.043v-23.412zM412.334 449.868v-11.521l-8.732-16.113h5.739l3.321 7.094c.943 2.049 1.641 3.607 2.378 5.494h.082c.697-1.764 1.477-3.486 2.419-5.494l3.321-7.094h5.699l-9.185 15.99v11.645h-5.042zM498.926 449.048c-1.189.615-3.813 1.23-7.135 1.23-8.773 0-14.104-5.494-14.104-13.9 0-9.102 6.313-14.596 14.76-14.596 3.321 0 5.699.697 6.725 1.23l-1.107 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.676 3.527-9.676 10.168 0 6.068 3.566 9.965 9.635 9.965 2.05 0 4.182-.41 5.494-1.025l.82 3.976zM547.183 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM572.028 449.868v-27.635h5.74l7.134 11.85a75.934 75.934 0 0 1 4.716 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.674v27.635h-5.207l-7.216-12.137c-1.764-3.033-3.608-6.438-4.962-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM620.245 422.233h15.949v4.141h-10.906v7.627h10.168v4.141h-10.168v11.727h-5.043v-27.636zM677.07 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099zM703.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.977 0 6.683.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.861 3.445 1.6 6.643 2.173 7.709h-5.207c-.409-.82-1.065-3.076-1.845-6.52-.779-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.6 0-2.624.123-3.116.246v8.735zM762.514 437.608H752.1v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141H752.1v7.135h10.414v4.099zM788.672 449.868v-27.635h5.74l7.134 11.85a75.923 75.923 0 0 1 4.715 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.675v27.635h-5.207l-7.217-12.137c-1.763-3.033-3.607-6.438-4.961-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM856.69 449.048c-1.188.615-3.812 1.23-7.134 1.23-8.774 0-14.104-5.494-14.104-13.9 0-9.102 6.314-14.596 14.761-14.596 3.321 0 5.699.697 6.724 1.23l-1.106 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.677 3.527-9.677 10.168 0 6.068 3.567 9.965 9.636 9.965 2.05 0 4.182-.41 5.494-1.025l.818 3.976zM896.952 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099z"/></g><path fill="#FFF" d="M688.858 324.74H229.126V0h459.732v324.74zm-443.743-15.99H672.87V15.989H245.115V308.75z"/><path fill="#FFF" d="M278.823 48.632h19.902l39.984 93.848 39.213-93.848h19.967v227.247H376.78V102.813h-.48l-29.184 69.14h-17.605l-29.19-69.14h-.381v104.272h-21.116V48.632zM419.481 121.807c0-16.757.475-27.969 1.436-33.646 1.018-5.677 2.58-10.255 4.691-13.753 3.373-6.627 8.787-12.529 16.245-17.707 7.326-5.247 16.476-7.938 27.437-8.069 11.093.131 20.33 2.829 27.726 8.101 7.326 5.203 12.616 11.13 15.87 17.775 2.355 3.485 3.979 8.057 4.872 13.728.824 5.658 1.243 16.845 1.243 33.571 0 16.457-.419 27.587-1.243 33.376-.894 5.79-2.517 10.431-4.878 13.922-3.248 6.652-8.538 12.504-15.864 17.576-7.396 5.271-16.639 8.032-27.726 8.294-10.967-.262-20.11-3.023-27.437-8.294-7.458-5.072-12.872-10.924-16.252-17.576a161.945 161.945 0 0 1-2.772-6.22c-.762-2.042-1.399-4.609-1.912-7.702-.961-5.789-1.436-16.919-1.436-33.376zm21.118 0c0 14.178.506 23.784 1.529 28.792.894 5.016 2.711 9.075 5.459 12.173 2.236 2.967 5.178 5.377 8.812 7.22 3.58 2.186 7.857 3.267 12.841 3.267 5.047 0 9.426-1.081 13.13-3.267 3.509-1.843 6.313-4.253 8.424-7.22 2.749-3.098 4.636-7.157 5.659-12.173.95-5.009 1.437-14.615 1.437-28.792 0-14.184-.486-23.853-1.437-28.993-1.023-4.884-2.91-8.875-5.659-11.979-2.11-2.966-4.915-5.44-8.424-7.42-3.704-1.911-8.083-2.936-13.13-3.061-4.983.125-9.261 1.149-12.841 3.061-3.635 1.98-6.576 4.454-8.812 7.42-2.748 3.104-4.565 7.095-5.459 11.979-1.024 5.141-1.529 14.809-1.529 28.993zM540.585 48.632h48.799c18.88.131 33.039 8.232 42.482 24.296 3.373 5.396 5.509 11.055 6.396 16.976.705 5.934 1.056 16.17 1.056 30.716 0 15.471-.544 26.27-1.625 32.384-.511 3.098-1.28 5.871-2.298 8.301-1.087 2.374-2.393 4.834-3.923 7.408-4.084 6.783-9.755 12.373-17.031 16.789-7.201 4.734-16.04 7.107-26.495 7.107h-47.361V48.632zm21.117 123.447h25.283c11.873 0 20.492-4.197 25.856-12.572 2.361-3.098 3.86-7.027 4.497-11.773.575-4.685.869-13.459.869-26.326 0-12.529-.294-21.498-.869-26.913-.762-5.409-2.592-9.793-5.452-13.16-5.877-8.375-14.172-12.436-24.901-12.167h-25.283v102.911zM459.37 258.847c-1.263 5.483-3.661 9.7-7.203 12.647-3.644 2.917-7.959 4.379-12.939 4.379-4.51-.113-8.271-1.25-11.28-3.41-3.067-2.086-5.296-4.498-6.683-7.227a62.434 62.434 0 0 1-1.141-2.561c-.314-.838-.577-1.893-.786-3.167-.394-2.38-.591-6.952-.591-13.722 0-6.871.197-11.473.591-13.803.419-2.324 1.062-4.21 1.927-5.641 1.389-2.735 3.615-5.171 6.686-7.307 3.014-2.167 6.777-3.279 11.286-3.329 5.53.05 10.04 1.743 13.524 5.065 3.489 3.354 5.69 7.501 6.609 12.442h-9.216c-.713-2.387-1.999-4.416-3.86-6.103-1.945-1.599-4.307-2.423-7.089-2.479-2.048.056-3.81.475-5.278 1.262-1.498.812-2.707 1.83-3.625 3.055-1.127 1.273-1.877 2.91-2.244 4.921-.42 2.117-.629 6.089-.629 11.917 0 5.833.209 9.781.631 11.842.365 2.061 1.115 3.729 2.246 5.003.918 1.218 2.126 2.211 3.625 2.967 1.468.899 3.229 1.343 5.277 1.343 4.888 0 8.538-2.698 10.955-8.095h9.207zM478.128 245.788c0-6.889.194-11.498.588-13.828.418-2.336 1.062-4.223 1.93-5.658 1.387-2.724 3.616-5.147 6.677-7.276 3.017-2.161 6.776-3.267 11.286-3.317 4.56.05 8.356 1.162 11.392 3.329 3.017 2.136 5.19 4.572 6.527 7.307.968 1.431 1.636 3.316 2.005 5.641.337 2.33.512 6.932.512 13.803 0 6.77-.175 11.342-.512 13.722-.369 2.386-1.037 4.291-2.005 5.728-1.337 2.729-3.511 5.141-6.527 7.227-3.035 2.16-6.839 3.297-11.397 3.41-4.504-.113-8.264-1.25-11.28-3.41-3.066-2.086-5.29-4.498-6.677-7.227a63.97 63.97 0 0 1-1.143-2.561c-.312-.838-.574-1.893-.787-3.167-.395-2.382-.589-6.954-.589-13.723zm8.683 0c0 5.833.206 9.781.624 11.842.368 2.061 1.117 3.729 2.248 5.003.918 1.218 2.123 2.211 3.623 2.967 1.474.899 3.229 1.343 5.277 1.343 2.073 0 3.872-.443 5.396-1.343 1.442-.756 2.598-1.749 3.466-2.967 1.131-1.274 1.905-2.942 2.323-5.003.395-2.061.594-6.009.594-11.842 0-5.828-.199-9.8-.594-11.917-.418-2.011-1.192-3.647-2.323-4.921-.868-1.225-2.023-2.243-3.466-3.055-1.524-.787-3.323-1.206-5.396-1.262-2.048.056-3.804.475-5.277 1.262-1.5.812-2.705 1.83-3.623 3.055-1.131 1.273-1.88 2.91-2.248 4.921-.418 2.117-.624 6.088-.624 11.917zM539.465 216.195h8.185l25.963 42.078h.156v-42.078h8.682v59.19h-8.223l-25.926-42.076h-.156v42.076h-8.681v-59.19zM602.693 216.195h36.625v8.438h-27.943v17.506h23.852v7.951h-23.852v25.295h-8.682v-59.19z"/></symbol><symbol viewBox="0 0 360.967 363.22" id="Modular-Conf-Mobile-Logo-1-0"><g fill="#FFF"><path d="M20.935 302.154c-.139-3.014-.311-6.65-.276-9.802h-.104a124.32 124.32 0 0 1-2.771 8.936L14.39 311.4h-3.291l-3.117-9.974c-.9-2.979-1.731-6.165-2.355-9.074h-.069a522.236 522.236 0 0 1-.416 9.94l-.52 9.385H.639l1.56-23.343h5.609l3.049 9.386a117.15 117.15 0 0 1 2.147 8.106h.103a115.49 115.49 0 0 1 2.321-8.14l3.221-9.352h5.542l1.351 23.343h-4.156l-.451-9.523zM67.897 299.765c0 7.827-4.744 12.294-11.186 12.294-6.582 0-10.738-5.021-10.738-11.879 0-7.169 4.503-12.226 11.084-12.226 6.823 0 10.84 5.16 10.84 11.811zm-17.42.345c0 4.746 2.39 8.521 6.477 8.521 4.122 0 6.442-3.81 6.442-8.693 0-4.398-2.182-8.555-6.442-8.555-4.225 0-6.477 3.914-6.477 8.727zM88.886 288.646c1.87-.312 4.261-.485 6.789-.485 4.363 0 7.377.901 9.523 2.702 2.252 1.836 3.637 4.606 3.637 8.59 0 4.157-1.42 7.272-3.637 9.281-2.32 2.113-6.026 3.188-10.563 3.188-2.493 0-4.363-.139-5.749-.312v-22.964zm4.26 19.776c.588.104 1.488.104 2.354.104 5.541.035 8.832-3.011 8.832-8.934.034-5.161-2.944-8.105-8.278-8.105-1.351 0-2.32.104-2.908.243v16.692zM134.083 288.335v13.611c0 4.572 1.905 6.685 4.78 6.685 3.082 0 4.917-2.113 4.917-6.685v-13.611h4.261v13.335c0 7.203-3.706 10.389-9.316 10.389-5.403 0-8.901-3.012-8.901-10.354v-13.369h4.259zM170.239 288.335h4.261v19.776h9.594v3.566H170.24v-23.342zM209.446 305.063l-2.01 6.615h-4.398l7.481-23.343h5.437l7.586 23.343h-4.572l-2.112-6.615h-7.412zm6.685-3.22l-1.837-5.75c-.449-1.42-.831-3.013-1.177-4.363h-.069c-.347 1.351-.693 2.979-1.107 4.363l-1.803 5.75h5.993zM244.113 288.646c1.593-.276 3.982-.485 6.441-.485 3.359 0 5.646.555 7.204 1.871 1.282 1.073 2.01 2.701 2.01 4.676 0 3.013-2.044 5.057-4.227 5.854v.104c1.663.623 2.668 2.251 3.257 4.501.727 2.91 1.351 5.611 1.835 6.511h-4.398c-.346-.691-.9-2.598-1.559-5.505-.658-3.049-1.767-4.018-4.19-4.087h-2.147v9.593h-4.226v-23.033zm4.226 10.322h2.527c2.875 0 4.676-1.524 4.676-3.845 0-2.562-1.801-3.74-4.571-3.74-1.351 0-2.217.104-2.632.208v7.377zM285.396 288.335v23.343h-4.26v-23.343h4.26zM312.064 291.902h-6.649v-3.567h17.629v3.567h-6.719v19.775h-4.261v-19.775zM348.948 311.678v-9.731l-7.377-13.611h4.849l2.806 5.992c.797 1.731 1.385 3.048 2.008 4.641h.07c.588-1.489 1.246-2.944 2.043-4.641l2.806-5.992h4.814l-7.759 13.508v9.835h-4.26zM17.957 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM59.066 350.924c0 7.828-4.745 12.295-11.187 12.295-6.581 0-10.736-5.021-10.736-11.879 0-7.168 4.502-12.227 11.082-12.227 6.824 0 10.841 5.162 10.841 11.811zm-17.42.347c0 4.744 2.391 8.52 6.477 8.52 4.121 0 6.442-3.811 6.442-8.693 0-4.398-2.183-8.555-6.442-8.555-4.226 0-6.477 3.914-6.477 8.728zM80.401 362.838v-23.344h4.85l6.025 10.01a64.167 64.167 0 0 1 3.983 7.828h.068c-.276-3.117-.38-6.131-.38-9.697v-8.141h3.947v23.344h-4.398l-6.096-10.25c-1.488-2.564-3.048-5.439-4.19-8.07l-.104.033c.173 3.014.208 6.096.208 9.941v8.346h-3.913zM121.477 339.494h13.473v3.498h-9.213v6.443h8.589v3.498h-8.589v9.904h-4.26v-23.343zM169.825 352.482h-8.797v6.857h9.835v3.498h-14.095v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM192.268 339.807c1.593-.277 3.982-.484 6.441-.484 3.359 0 5.646.555 7.204 1.869 1.282 1.074 2.01 2.703 2.01 4.676 0 3.014-2.044 5.057-4.227 5.854v.104c1.662.625 2.668 2.252 3.256 4.504.728 2.908 1.352 5.609 1.836 6.51h-4.398c-.347-.691-.9-2.596-1.559-5.506-.658-3.047-1.767-4.018-4.191-4.088h-2.147v9.594h-4.225v-23.033zm4.224 10.322h2.528c2.875 0 4.676-1.525 4.676-3.846 0-2.562-1.801-3.74-4.572-3.74-1.35 0-2.216.104-2.632.207v7.379zM242.694 352.482h-8.797v6.857h9.836v3.498h-14.096v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM265.137 362.838v-23.344h4.849l6.026 10.01a64.025 64.025 0 0 1 3.983 7.828h.069c-.276-3.117-.381-6.131-.381-9.697v-8.141h3.948v23.344h-4.398l-6.096-10.25c-1.489-2.564-3.048-5.439-4.191-8.07l-.104.033c.174 3.014.208 6.096.208 9.941v8.346h-3.913zM322.941 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM357.297 352.482h-8.798v6.857h9.838v3.498h-14.098v-23.344h13.577v3.498h-9.317v6.027h8.798v3.464z"/></g><path fill="#FFF" d="M351.451 242.661H7.917V0h343.534v242.661zM19.866 230.713h319.637V11.949H19.866v218.764z"/><path fill="#FFF" d="M45.054 36.342h14.871l29.879 70.127 29.302-70.127h14.92V206.15h-15.774V76.828h-.357l-21.81 51.664H82.93L61.116 76.828h-.283v77.917H45.054V36.342zM150.161 91.021c0-12.521.354-20.899 1.07-25.143.762-4.242 1.93-7.662 3.506-10.276 2.521-4.952 6.567-9.362 12.141-13.23 5.475-3.921 12.311-5.932 20.502-6.029 8.288.098 15.191 2.113 20.717 6.053 5.475 3.887 9.428 8.316 11.859 13.282 1.761 2.604 2.974 6.021 3.641 10.259.616 4.227.93 12.586.93 25.085 0 12.298-.313 20.615-.93 24.941-.667 4.325-1.88 7.794-3.645 10.402-2.428 4.971-6.381 9.345-11.855 13.134-5.525 3.939-12.433 6.002-20.717 6.198-8.195-.196-15.027-2.259-20.502-6.198-5.573-3.789-9.619-8.163-12.145-13.134a121.57 121.57 0 0 1-2.072-4.648c-.568-1.526-1.046-3.444-1.43-5.754-.716-4.327-1.07-12.645-1.07-24.942zm15.778 0c0 10.594.38 17.772 1.144 21.516.668 3.747 2.024 6.782 4.079 9.096 1.672 2.217 3.869 4.019 6.583 5.396 2.677 1.633 5.873 2.44 9.596 2.44 3.772 0 7.045-.808 9.812-2.44 2.622-1.377 4.719-3.179 6.293-5.396 2.056-2.313 3.466-5.349 4.23-9.096.709-3.743 1.072-10.922 1.072-21.516 0-10.599-.363-17.823-1.072-21.665-.765-3.649-2.175-6.633-4.23-8.951-1.574-2.217-3.671-4.065-6.293-5.545-2.768-1.427-6.04-2.193-9.812-2.286-3.723.093-6.919.859-9.596 2.286-2.714 1.479-4.911 3.328-6.583 5.545-2.055 2.318-3.411 5.302-4.079 8.951-.764 3.841-1.144 11.066-1.144 21.665zM240.655 36.342h36.463c14.108.098 24.688 6.151 31.746 18.154 2.52 4.032 4.116 8.261 4.779 12.685.526 4.435.788 12.084.788 22.952 0 11.562-.405 19.631-1.213 24.199-.382 2.315-.958 4.388-1.718 6.203-.812 1.773-1.788 3.611-2.932 5.535-3.053 5.068-7.29 9.245-12.727 12.546-5.382 3.537-11.984 5.311-19.798 5.311h-35.39V36.342zm15.779 92.245h18.894c8.872 0 15.312-3.138 19.319-9.396 1.765-2.315 2.886-5.251 3.361-8.798.431-3.5.649-10.058.649-19.672 0-9.361-.219-16.064-.649-20.11-.569-4.042-1.936-7.318-4.073-9.834-4.392-6.258-10.591-9.292-18.607-9.091h-18.894v76.901zM179.967 193.424c-.945 4.097-2.737 7.248-5.383 9.451-2.722 2.179-5.947 3.271-9.669 3.271-3.37-.084-6.18-.933-8.429-2.548-2.293-1.559-3.956-3.36-4.993-5.399-.317-.668-.6-1.307-.854-1.914-.236-.626-.43-1.414-.588-2.365-.293-1.779-.441-5.195-.441-10.255 0-5.134.148-8.572.441-10.313.314-1.736.795-3.146 1.441-4.215 1.037-2.044 2.7-3.864 4.995-5.461 2.251-1.618 5.064-2.45 8.433-2.487 4.132.037 7.504 1.302 10.106 3.785 2.606 2.506 4.252 5.605 4.939 9.297h-6.887a9.844 9.844 0 0 0-2.884-4.56c-1.455-1.194-3.219-1.811-5.299-1.853-1.528.042-2.845.354-3.943.942-1.12.607-2.023 1.368-2.709 2.282-.842.951-1.401 2.175-1.675 3.679-.315 1.581-.472 4.55-.472 8.903 0 4.359.156 7.31.472 8.85.273 1.54.833 2.786 1.678 3.737.685.91 1.59 1.653 2.709 2.218 1.097.672 2.413 1.003 3.942 1.003 3.653 0 6.381-2.017 8.188-6.048h6.882zM193.983 183.664c0-5.147.146-8.592.439-10.332.312-1.747.793-3.155 1.441-4.229 1.035-2.034 2.703-3.845 4.99-5.437 2.254-1.615 5.062-2.441 8.432-2.479 3.408.037 6.244.869 8.514 2.487 2.254 1.597 3.88 3.417 4.877 5.461.723 1.068 1.224 2.479 1.498 4.215.252 1.741.382 5.18.382 10.313 0 5.06-.13 8.476-.382 10.255-.274 1.782-.775 3.206-1.498 4.279-.997 2.039-2.623 3.841-4.877 5.399-2.27 1.615-5.109 2.464-8.516 2.548-3.367-.084-6.176-.933-8.43-2.548-2.293-1.559-3.955-3.36-4.99-5.399a45.995 45.995 0 0 1-.853-1.914c-.234-.626-.431-1.414-.589-2.365-.292-1.778-.438-5.194-.438-10.254zm6.488 0c0 4.359.155 7.31.466 8.85.275 1.54.837 2.786 1.68 3.737.687.91 1.588 1.653 2.708 2.218 1.102.672 2.414 1.003 3.944 1.003 1.549 0 2.893-.331 4.032-1.003 1.077-.564 1.941-1.308 2.589-2.218.846-.951 1.425-2.197 1.736-3.737.296-1.54.446-4.49.446-8.85 0-4.354-.15-7.322-.446-8.903-.312-1.504-.891-2.728-1.736-3.679-.647-.914-1.512-1.675-2.589-2.282-1.14-.588-2.483-.9-4.032-.942-1.53.042-2.843.354-3.944.942-1.12.607-2.021 1.368-2.708 2.282-.843.951-1.404 2.175-1.68 3.679-.311 1.581-.466 4.55-.466 8.903zM239.817 161.552h6.115l19.401 31.441h.117v-31.441h6.485v44.23h-6.145l-19.371-31.442h-.117v31.442h-6.486v-44.23zM287.064 161.552h27.367v6.306h-20.88v13.082h17.822v5.941h-17.822v18.901h-6.487v-44.23z"/></symbol></svg><div class="banner">
<svg class="banner__mobilelogo"><use xlink:href="#Modular-Conf-Mobile-Logo-1-0"></use></svg>
<svg class="banner__desktoplogo"><use xlink:href="#Modular-Conf-Microsite-Logo-1-0"></use></svg>
</div>]]></static-content>
</root>, serviceContext.scopeGroupId=67510365, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
2016-07-27T13:29:06.514Z - silly: httpResponse:  objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=true, endEmitted=true, reading=false, sync=true, needReadable=false, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=false, domain=null, end=[function responseOnEnd() {
  var res = this;
  var req = res.req;
  var socket = req.socket;

  if (!req.shouldKeepAlive) {
    if (socket.writable) {
      debug('AGENT socket.destroySoon()');
      socket.destroySoon();
    }
    assert(!socket.writable);
  } else {
    debug('AGENT socket keep-alive');
    if (req.timeoutCb) {
      socket.setTimeout(0, req.timeoutCb);
      req.timeoutCb = null;
    }
    socket.removeListener('close', socketCloseListener);
    socket.removeListener('error', socketErrorListener);
    socket.once('error', freeSocketErrorListener);
    // Mark this socket as available, AFTER user-added end
    // handlers have a chance to run.
    process.nextTick(emitFreeNT, socket);
  }
}, function () {
    if (self.timing) {
      self.elapsedTime += (new Date().getTime() - self.startTime)
      debug('elapsed time', self.elapsedTime)
      response.elapsedTime = self.elapsedTime
    }
    debug('response end', self.uri.href, response.statusCode, response.headers)
  }, function () {
      self._ended = true
    }, function (chunk) {
      self.emit('end', chunk)
    }], close=[function () {
      if (!self._ended) {
        self.response.emit('end')
      }
    }, function () {self.emit('close')}], data=function (chunk) {
      self._destdata = true
      self.emit('data', chunk)
    }, error=function (error) {
      self.emit('error', error)
    }, _eventsCount=4, _maxListeners=undefined, pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, _eventsCount=9, _connecting=false, _hadError=false, _handle=null, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=false, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=true, ended=true, finished=true, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=true, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=false, allowHalfOpen=false, destroyed=true, bytesRead=2795, _bytesDispatched=689, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, ssl=null, _requestCert=true, _rejectUnauthorized=true, parser=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"], $ref=$["socket"], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 442
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=442, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, domain=null, free=function (socket, options) {
    var name = self.getName(options);
    debug('agent.on(free)', name);

    if (!socket.destroyed &&
        self.requests[name] && self.requests[name].length) {
      self.requests[name].shift().onSocket(socket);
      if (self.requests[name].length === 0) {
        // don't leak
        delete self.requests[name];
      }
    } else {
      // If there are no pending requests, then put it in
      // the freeSockets pool, but only if we're allowed to do so.
      var req = socket._httpMessage;
      if (req &&
          req.shouldKeepAlive &&
          !socket.destroyed &&
          self.keepAlive) {
        var freeSockets = self.freeSockets[name];
        var freeLen = freeSockets ? freeSockets.length : 0;
        var count = freeLen;
        if (self.sockets[name])
          count += self.sockets[name].length;

        if (count > self.maxSockets || freeLen >= self.maxFreeSockets) {
          socket.destroy();
        } else {
          freeSockets = freeSockets || [];
          self.freeSockets[name] = freeSockets;
          socket.setKeepAlive(true, self.keepAliveMsecs);
          socket.unref();
          socket._httpMessage = null;
          self.removeSocket(socket, options);
          freeSockets.push(socket);
        }
      } else {
        socket.destroy();
      }
    }
  }, _eventsCount=1, _maxListeners=undefined, defaultPort=443, protocol=https:, path=null, , web.liferay.com:443::::::::=[pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function socketOnEnd() {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  if (!req.res && !req.socket._hadError) {
    // If we don't have a response then we know that the socket
    // ended prematurely and we need to emit an error on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
  socket.destroy();
}], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, data=function socketOnData(d) {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  assert(parser && parser.socket === socket);

  var ret = parser.execute(d);
  if (ret instanceof Error) {
    debug('parse error');
    freeParser(parser, req, socket);
    socket.destroy();
    req.emit('error', ret);
    req.socket._hadError = true;
  } else if (parser.incoming && parser.incoming.upgrade) {
    // Upgrade or CONNECT
    var bytesParsed = ret;
    var res = parser.incoming;
    req.res = res;

    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    parser.finish();

    var bodyHead = d.slice(bytesParsed, d.length);

    var eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';
    if (req.listenerCount(eventName) > 0) {
      req.upgradeOrConnect = true;

      // detach the socket
      socket.emit('agentRemove');
      socket.removeListener('close', socketCloseListener);
      socket.removeListener('error', socketErrorListener);

      // TODO(isaacs): Need a way to reset a stream to fresh state
      // IE, not flowing, and not explicitly paused.
      socket._readableState.flowing = null;

      req.emit(eventName, res, socket, bodyHead);
      req.emit('close');
    } else {
      // Got Upgrade header or CONNECT method, but have no handler.
      socket.destroy();
    }
    freeParser(parser, req, socket);
  } else if (parser.incoming && parser.incoming.complete &&
             // When the status code is 100 (Continue), the server will
             // send a final response after this client sends a request
             // body. So, we must not free the parser.
             parser.incoming.statusCode !== 100) {
    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    freeParser(parser, req, socket);
  }
}, _eventsCount=10, _connecting=false, _hadError=false, , fd=26, , fd=26, reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0], onread=null, onconnection=null, writeQueueSize=0, _parentWrap=undefined, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0]["_tlsOptions"]["secureContext"], reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0], onread=function onread(nread, buffer) {
  var handle = this;
  var self = handle.owner;
  assert(handle === self._handle, 'handle != self._handle');

  self._unrefTimer();

  debug('onread', nread);

  if (nread > 0) {
    debug('got data');

    // read success.
    // In theory (and in practice) calling readStop right now
    // will prevent this from being called again until _read() gets
    // called again.

    // if it's not enough data, we'll just call handle.readStart()
    // again right away.
    self.bytesRead += nread;

    // Optimization: emit the original buffer with end points
    var ret = self.push(buffer);

    if (handle.reading && !ret) {
      handle.reading = false;
      debug('readStop');
      var err = handle.readStop();
      if (err)
        self._destroy(errnoException(err, 'read'));
    }
    return;
  }

  // if we didn't get any bytes, that doesn't necessarily mean EOF.
  // wait for the next one.
  if (nread === 0) {
    debug('not any data, keep waiting');
    return;
  }

  // Error, possibly EOF.
  if (nread !== uv.UV_EOF) {
    return self._destroy(errnoException(nread, 'read'));
  }

  debug('EOF');

  if (self._readableState.length === 0) {
    self.readable = false;
    maybeDestroy(self);
  }

  // push a null to signal the end of data.
  self.push(null);

  // internal end event so that we know that the actual socket
  // is no longer readable, and we can start the shutdown
  // procedure. No need to wait for all the data to be consumed.
  self.emit('_socketEnd');
}, writeQueueSize=1, onhandshakestart=function () {}, onhandshakedone=() => this._finishInit(), onocspresponse=(resp) => onocspresponse.call(this, resp), onerror=function (err) {
    if (self._writableState.errorEmitted)
      return;

    // Destroy socket if error happened before handshake's finish
    if (!self._secureEstablished) {
      self.destroy(self._tlsError(err));
    } else if (options.isServer &&
               rejectUnauthorized &&
               /peer did not return a certificate/.test(err.message)) {
      // Ignore server's authorization errors
      self.destroy();
    } else {
      // Throw error
      self._emitTLSError(err);
    }

    self._writableState.errorEmitted = true;
  }, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=true, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=false, ended=false, finished=false, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=false, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=true, allowHalfOpen=false, destroyed=false, bytesRead=0, _bytesDispatched=1704, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0]["_handle"], _requestCert=true, _rejectUnauthorized=true, 0=function parserOnHeaders(headers, url) {
  // Once we exceeded headers limit - stop collecting them
  if (this.maxHeaderPairs <= 0 ||
      this._headers.length < this.maxHeaderPairs) {
    this._headers = this._headers.concat(headers);
  }
  this._url += url;
}, 1=function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,
                                 url, statusCode, statusMessage, upgrade,
                                 shouldKeepAlive) {
  var parser = this;

  if (!headers) {
    headers = parser._headers;
    parser._headers = [];
  }

  if (!url) {
    url = parser._url;
    parser._url = '';
  }

  parser.incoming = new IncomingMessage(parser.socket);
  parser.incoming.httpVersionMajor = versionMajor;
  parser.incoming.httpVersionMinor = versionMinor;
  parser.incoming.httpVersion = versionMajor + '.' + versionMinor;
  parser.incoming.url = url;

  var n = headers.length;

  // If parser.maxHeaderPairs <= 0 assume that there's no limit.
  if (parser.maxHeaderPairs > 0)
    n = Math.min(n, parser.maxHeaderPairs);

  parser.incoming._addHeaderLines(headers, n);

  if (typeof method === 'number') {
    // server only
    parser.incoming.method = HTTPParser.methods[method];
  } else {
    // client only
    parser.incoming.statusCode = statusCode;
    parser.incoming.statusMessage = statusMessage;
  }

  // The client made non-upgrade request, and server is just advertising
  // supported protocols.
  //
  // See RFC7230 Section 6.7
  //
  // NOTE: RegExp below matches `upgrade` in `Connection: abc, upgrade, def`
  // header.
  if (upgrade &&
      parser.outgoing !== null &&
      (parser.outgoing._headers.upgrade === undefined ||
       !/(^|\W)upgrade(\W|$)/i.test(parser.outgoing._headers.connection))) {
    upgrade = false;
  }

  parser.incoming.upgrade = upgrade;

  var skipBody = false; // response to HEAD or CONNECT

  if (!upgrade) {
    // For upgraded connections and CONNECT method request, we'll emit this
    // after parser.execute so that we can capture the first part of the new
    // protocol.
    skipBody = parser.onIncoming(parser.incoming, shouldKeepAlive);
  }

  return skipBody;
}, 2=function parserOnBody(b, start, len) {
  var parser = this;
  var stream = parser.incoming;

  // if the stream has already been removed, then drop it.
  if (!stream)
    return;

  var socket = stream.socket;

  // pretend this was the result of a stream._read call.
  if (len > 0 && !stream._dumped) {
    var slice = b.slice(start, start + len);
    var ret = stream.push(slice);
    if (!ret)
      readStop(socket);
  }
}, 3=function parserOnMessageComplete() {
  var parser = this;
  var stream = parser.incoming;

  if (stream) {
    stream.complete = true;
    // Emit any trailing headers.
    var headers = parser._headers;
    if (headers) {
      parser.incoming._addHeaderLines(headers, headers.length);
      parser._headers = [];
      parser._url = '';
    }

    // For emit end event
    stream.push(null);
  }

  // force to read the next incoming message
  readStart(parser.socket);
}, 4=null, _headers=[], _url=, _consumed=false, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0], incoming=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0], $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 1456
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=1456, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, $ref=$["socket"]["_httpMessage"]["agent"], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0]["parser"], maxHeaderPairs=2000, onIncoming=function parserOnIncomingClient(res, shouldKeepAlive) {
  var socket = this.socket;
  var req = socket._httpMessage;


  // propagate "domain" setting...
  if (req.domain && !res.domain) {
    debug('setting "res.domain"');
    res.domain = req.domain;
  }

  debug('AGENT incoming response!');

  if (req.res) {
    // We already have a response object, this means the server
    // sent a double response.
    socket.destroy();
    return;
  }
  req.res = res;

  // Responses to CONNECT request is handled as Upgrade.
  if (req.method === 'CONNECT') {
    res.upgrade = true;
    return true; // skip body
  }

  // Responses to HEAD requests are crazy.
  // HEAD responses aren't allowed to have an entity-body
  // but *can* have a content-length which actually corresponds
  // to the content-length of the entity-body had the request
  // been a GET.
  var isHeadResponse = req.method === 'HEAD';
  debug('AGENT isHeadResponse', isHeadResponse);

  if (res.statusCode === 100) {
    // restart the parser, as this is a continue message.
    delete req.res; // Clear res so that we don't hit double-responses.
    req.emit('continue');
    return true;
  }

  if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgradeOrConnect) {
    // Server MUST respond with Connection:keep-alive for us to enable it.
    // If we've been upgraded (via WebSockets) we also shouldn't try to
    // keep the connection open.
    req.shouldKeepAlive = false;
  }


  DTRACE_HTTP_CLIENT_RESPONSE(socket, req);
  ;
  ;
  req.res = res;
  res.req = req;

  // add our listener first, so that we guarantee socket cleanup
  res.on('end', responseOnEnd);
  var handled = req.emit('response', res);

  // If the user did not listen for the 'response' event, then they
  // can't possibly read the data, so we ._dump() it into the void
  // so that the socket doesn't hang there in a paused state.
  if (!handled)
    res._dump();

  return isHeadResponse;
}, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][0]["parser"]["outgoing"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true, $ref=$["socket"], pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function socketOnEnd() {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  if (!req.res && !req.socket._hadError) {
    // If we don't have a response then we know that the socket
    // ended prematurely and we need to emit an error on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
  socket.destroy();
}], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, data=function socketOnData(d) {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  assert(parser && parser.socket === socket);

  var ret = parser.execute(d);
  if (ret instanceof Error) {
    debug('parse error');
    freeParser(parser, req, socket);
    socket.destroy();
    req.emit('error', ret);
    req.socket._hadError = true;
  } else if (parser.incoming && parser.incoming.upgrade) {
    // Upgrade or CONNECT
    var bytesParsed = ret;
    var res = parser.incoming;
    req.res = res;

    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    parser.finish();

    var bodyHead = d.slice(bytesParsed, d.length);

    var eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';
    if (req.listenerCount(eventName) > 0) {
      req.upgradeOrConnect = true;

      // detach the socket
      socket.emit('agentRemove');
      socket.removeListener('close', socketCloseListener);
      socket.removeListener('error', socketErrorListener);

      // TODO(isaacs): Need a way to reset a stream to fresh state
      // IE, not flowing, and not explicitly paused.
      socket._readableState.flowing = null;

      req.emit(eventName, res, socket, bodyHead);
      req.emit('close');
    } else {
      // Got Upgrade header or CONNECT method, but have no handler.
      socket.destroy();
    }
    freeParser(parser, req, socket);
  } else if (parser.incoming && parser.incoming.complete &&
             // When the status code is 100 (Continue), the server will
             // send a final response after this client sends a request
             // body. So, we must not free the parser.
             parser.incoming.statusCode !== 100) {
    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    freeParser(parser, req, socket);
  }
}, _eventsCount=10, _connecting=false, _hadError=false, , fd=20, , fd=20, reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2], onread=null, onconnection=null, writeQueueSize=0, _parentWrap=undefined, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2]["_tlsOptions"]["secureContext"], reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2], onread=function onread(nread, buffer) {
  var handle = this;
  var self = handle.owner;
  assert(handle === self._handle, 'handle != self._handle');

  self._unrefTimer();

  debug('onread', nread);

  if (nread > 0) {
    debug('got data');

    // read success.
    // In theory (and in practice) calling readStop right now
    // will prevent this from being called again until _read() gets
    // called again.

    // if it's not enough data, we'll just call handle.readStart()
    // again right away.
    self.bytesRead += nread;

    // Optimization: emit the original buffer with end points
    var ret = self.push(buffer);

    if (handle.reading && !ret) {
      handle.reading = false;
      debug('readStop');
      var err = handle.readStop();
      if (err)
        self._destroy(errnoException(err, 'read'));
    }
    return;
  }

  // if we didn't get any bytes, that doesn't necessarily mean EOF.
  // wait for the next one.
  if (nread === 0) {
    debug('not any data, keep waiting');
    return;
  }

  // Error, possibly EOF.
  if (nread !== uv.UV_EOF) {
    return self._destroy(errnoException(nread, 'read'));
  }

  debug('EOF');

  if (self._readableState.length === 0) {
    self.readable = false;
    maybeDestroy(self);
  }

  // push a null to signal the end of data.
  self.push(null);

  // internal end event so that we know that the actual socket
  // is no longer readable, and we can start the shutdown
  // procedure. No need to wait for all the data to be consumed.
  self.emit('_socketEnd');
}, writeQueueSize=1, onhandshakestart=function () {}, onhandshakedone=() => this._finishInit(), onocspresponse=(resp) => onocspresponse.call(this, resp), onerror=function (err) {
    if (self._writableState.errorEmitted)
      return;

    // Destroy socket if error happened before handshake's finish
    if (!self._secureEstablished) {
      self.destroy(self._tlsError(err));
    } else if (options.isServer &&
               rejectUnauthorized &&
               /peer did not return a certificate/.test(err.message)) {
      // Ignore server's authorization errors
      self.destroy();
    } else {
      // Throw error
      self._emitTLSError(err);
    }

    self._writableState.errorEmitted = true;
  }, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=true, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=false, ended=false, finished=false, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=false, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=true, allowHalfOpen=false, destroyed=false, bytesRead=0, _bytesDispatched=18387, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2]["_handle"], _requestCert=true, _rejectUnauthorized=true, 0=function parserOnHeaders(headers, url) {
  // Once we exceeded headers limit - stop collecting them
  if (this.maxHeaderPairs <= 0 ||
      this._headers.length < this.maxHeaderPairs) {
    this._headers = this._headers.concat(headers);
  }
  this._url += url;
}, 1=function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,
                                 url, statusCode, statusMessage, upgrade,
                                 shouldKeepAlive) {
  var parser = this;

  if (!headers) {
    headers = parser._headers;
    parser._headers = [];
  }

  if (!url) {
    url = parser._url;
    parser._url = '';
  }

  parser.incoming = new IncomingMessage(parser.socket);
  parser.incoming.httpVersionMajor = versionMajor;
  parser.incoming.httpVersionMinor = versionMinor;
  parser.incoming.httpVersion = versionMajor + '.' + versionMinor;
  parser.incoming.url = url;

  var n = headers.length;

  // If parser.maxHeaderPairs <= 0 assume that there's no limit.
  if (parser.maxHeaderPairs > 0)
    n = Math.min(n, parser.maxHeaderPairs);

  parser.incoming._addHeaderLines(headers, n);

  if (typeof method === 'number') {
    // server only
    parser.incoming.method = HTTPParser.methods[method];
  } else {
    // client only
    parser.incoming.statusCode = statusCode;
    parser.incoming.statusMessage = statusMessage;
  }

  // The client made non-upgrade request, and server is just advertising
  // supported protocols.
  //
  // See RFC7230 Section 6.7
  //
  // NOTE: RegExp below matches `upgrade` in `Connection: abc, upgrade, def`
  // header.
  if (upgrade &&
      parser.outgoing !== null &&
      (parser.outgoing._headers.upgrade === undefined ||
       !/(^|\W)upgrade(\W|$)/i.test(parser.outgoing._headers.connection))) {
    upgrade = false;
  }

  parser.incoming.upgrade = upgrade;

  var skipBody = false; // response to HEAD or CONNECT

  if (!upgrade) {
    // For upgraded connections and CONNECT method request, we'll emit this
    // after parser.execute so that we can capture the first part of the new
    // protocol.
    skipBody = parser.onIncoming(parser.incoming, shouldKeepAlive);
  }

  return skipBody;
}, 2=function parserOnBody(b, start, len) {
  var parser = this;
  var stream = parser.incoming;

  // if the stream has already been removed, then drop it.
  if (!stream)
    return;

  var socket = stream.socket;

  // pretend this was the result of a stream._read call.
  if (len > 0 && !stream._dumped) {
    var slice = b.slice(start, start + len);
    var ret = stream.push(slice);
    if (!ret)
      readStop(socket);
  }
}, 3=function parserOnMessageComplete() {
  var parser = this;
  var stream = parser.incoming;

  if (stream) {
    stream.complete = true;
    // Emit any trailing headers.
    var headers = parser._headers;
    if (headers) {
      parser.incoming._addHeaderLines(headers, headers.length);
      parser._headers = [];
      parser._url = '';
    }

    // For emit end event
    stream.push(null);
  }

  // force to read the next incoming message
  readStart(parser.socket);
}, 4=null, _headers=[], _url=, _consumed=false, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2], incoming=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2], $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 18138
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=18138, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, $ref=$["socket"]["_httpMessage"]["agent"], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2]["parser"], maxHeaderPairs=2000, onIncoming=function parserOnIncomingClient(res, shouldKeepAlive) {
  var socket = this.socket;
  var req = socket._httpMessage;


  // propagate "domain" setting...
  if (req.domain && !res.domain) {
    debug('setting "res.domain"');
    res.domain = req.domain;
  }

  debug('AGENT incoming response!');

  if (req.res) {
    // We already have a response object, this means the server
    // sent a double response.
    socket.destroy();
    return;
  }
  req.res = res;

  // Responses to CONNECT request is handled as Upgrade.
  if (req.method === 'CONNECT') {
    res.upgrade = true;
    return true; // skip body
  }

  // Responses to HEAD requests are crazy.
  // HEAD responses aren't allowed to have an entity-body
  // but *can* have a content-length which actually corresponds
  // to the content-length of the entity-body had the request
  // been a GET.
  var isHeadResponse = req.method === 'HEAD';
  debug('AGENT isHeadResponse', isHeadResponse);

  if (res.statusCode === 100) {
    // restart the parser, as this is a continue message.
    delete req.res; // Clear res so that we don't hit double-responses.
    req.emit('continue');
    return true;
  }

  if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgradeOrConnect) {
    // Server MUST respond with Connection:keep-alive for us to enable it.
    // If we've been upgraded (via WebSockets) we also shouldn't try to
    // keep the connection open.
    req.shouldKeepAlive = false;
  }


  DTRACE_HTTP_CLIENT_RESPONSE(socket, req);
  ;
  ;
  req.res = res;
  res.req = req;

  // add our listener first, so that we guarantee socket cleanup
  res.on('end', responseOnEnd);
  var handled = req.emit('response', res);

  // If the user did not listen for the 'response' event, then they
  // can't possibly read the data, so we ._dump() it into the void
  // so that the socket doesn't hang there in a paused state.
  if (!handled)
    res._dump();

  return isHeadResponse;
}, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][2]["parser"]["outgoing"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true], , keepAliveMsecs=1000, keepAlive=false, maxSockets=Infinity, maxFreeSockets=256, maxCachedSessions=100, 0=48, 1=130, 2=6, 3=96, 4=2, 5=1, 6=1, 7=2, 8=2, 9=3, 10=3, 11=4, 12=2, 13=192, 14=48, 15=4, 16=32, 17=23, 18=17, 19=15, 20=103, 21=228, 22=33, 23=139, 24=31, 25=14, 26=160, 27=43, 28=29, 29=74, 30=3, 31=186, 32=32, 33=57, 34=80, 35=180, 36=72, 37=79, 38=91, 39=58, 40=72, 41=251, 42=64, 43=139, 44=48, 45=67, 46=207, 47=245, 48=17, 49=4, 50=48, 51=227, 52=235, 53=50, 54=71, 55=210, 56=106, 57=68, 58=226, 59=172, 60=67, 61=84, 62=123, 63=27, 64=117, 65=136, 66=53, 67=26, 68=216, 69=197, 70=214, 71=160, 72=127, 73=37, 74=31, 75=42, 76=18, 77=222, 78=31, 79=14, 80=117, 81=101, 82=162, 83=47, 84=220, 85=197, 86=6, 87=203, 88=113, 89=174, 90=227, 91=70, 92=125, 93=226, 94=211, 95=229, 96=223, 97=68, 98=109, 99=161, 100=6, 101=2, 102=4, 103=87, 104=152, 105=183, 106=33, 107=162, 108=4, 109=2, 110=2, 111=1, 112=44, 113=163, 114=130, 115=5, 116=28, 117=48, 118=130, 119=5, 120=24, 121=48, 122=130, 123=4, 124=0, 125=160, 126=3, 127=2, 128=1, 129=2, 130=2, 131=16, 132=13, 133=132, 134=28, 135=24, 136=148, 137=3, 138=70, 139=69, 140=60, 141=112, 142=134, 143=212, 144=166, 145=231, 146=87, 147=119, 148=48, 149=13, 150=6, 151=9, 152=42, 153=134, 154=72, 155=134, 156=247, 157=13, 158=1, 159=1, 160=11, 161=5, 162=0, 163=48, 164=77, 165=49, 166=11, 167=48, 168=9, 169=6, 170=3, 171=85, 172=4, 173=6, 174=19, 175=2, 176=85, 177=83, 178=49, 179=21, 180=48, 181=19, 182=6, 183=3, 184=85, 185=4, 186=10, 187=19, 188=12, 189=68, 190=105, 191=103, 192=105, 193=67, 194=101, 195=114, 196=116, 197=32, 198=73, 199=110, 200=99, 201=49, 202=39, 203=48, 204=37, 205=6, 206=3, 207=85, 208=4, 209=3, 210=19, 211=30, 212=68, 213=105, 214=103, 215=105, 216=67, 217=101, 218=114, 219=116, 220=32, 221=83, 222=72, 223=65, 224=50, 225=32, 226=83, 227=101, 228=99, 229=117, 230=114, 231=101, 232=32, 233=83, 234=101, 235=114, 236=118, 237=101, 238=114, 239=32, 240=67, 241=65, 242=48, 243=30, 244=23, 245=13, 246=49, 247=52, 248=49, 249=49, 250=49, 251=57, 252=48, 253=48, 254=48, 255=48, 256=48, 257=48, 258=90, 259=23, 260=13, 261=49, 262=56, 263=48, 264=49, 265=50, 266=50, 267=49, 268=50, 269=48, 270=48, 271=48, 272=48, 273=90, 274=48, 275=104, 276=49, 277=11, 278=48, 279=9, 280=6, 281=3, 282=85, 283=4, 284=6, 285=19, 286=2, 287=85, 288=83, 289=49, 290=19, 291=48, 292=17, 293=6, 294=3, 295=85, 296=4, 297=8, 298=19, 299=10, 300=67, 301=97, 302=108, 303=105, 304=102, 305=111, 306=114, 307=110, 308=105, 309=97, 310=49, 311=20, 312=48, 313=18, 314=6, 315=3, 316=85, 317=4, 318=7, 319=19, 320=11, 321=68, 322=105, 323=97, 324=109, 325=111, 326=110, 327=100, 328=32, 329=66, 330=97, 331=114, 332=49, 333=22, 334=48, 335=20, 336=6, 337=3, 338=85, 339=4, 340=10, 341=19, 342=13, 343=76, 344=105, 345=102, 346=101, 347=114, 348=97, 349=121, 350=44, 351=32, 352=73, 353=110, 354=99, 355=46, 356=49, 357=22, 358=48, 359=20, 360=6, 361=3, 362=85, 363=4, 364=3, 365=12, 366=13, 367=42, 368=46, 369=108, 370=105, 371=102, 372=101, 373=114, 374=97, 375=121, 376=46, 377=99, 378=111, 379=109, 380=48, 381=130, 382=1, 383=34, 384=48, 385=13, 386=6, 387=9, 388=42, 389=134, 390=72, 391=134, 392=247, 393=13, 394=1, 395=1, 396=1, 397=5, 398=0, 399=3, 400=130, 401=1, 402=15, 403=0, 404=48, 405=130, 406=1, 407=10, 408=2, 409=130, 410=1, 411=1, 412=0, 413=171, 414=253, 415=224, 416=65, 417=127, 418=225, 419=99, 420=85, 421=58, 422=6, 423=204, 424=254, 425=35, 426=12, 427=26, 428=154, 429=62, 430=2, 431=104, 432=214, 433=141, 434=116, 435=134, 436=68, 437=169, 438=20, 439=185, 440=210, 441=196, 442=105, 443=156, 444=174, 445=236, 446=153, 447=52, 448=58, 449=94, 450=116, 451=208, 452=149, 453=227, 454=194, 455=122, 456=140, 457=196, 458=138, 459=0, 460=97, 461=53, 462=27, 463=59, 464=140, 465=47, 466=134, 467=34, 468=187, 469=182, 470=191, 471=2, 472=249, 473=59, 474=36, 475=0, 476=217, 477=160, 478=254, 479=56, 480=253, 481=90, 482=46, 483=237, 484=114, 485=1, 486=135, 487=2, 488=212, 489=144, 490=255, 491=190, 492=176, 493=141, 494=151, 495=216, 496=155, 497=132, 498=109, 499=222, 500=109, 501=122, 502=169, 503=171, 504=86, 505=137, 506=71, 507=249, 508=123, 509=224, 510=167, 511=240, 512=104, 513=50, 514=129, 515=27, 516=233, 517=11, 518=96, 519=93, 520=201, 521=120, 522=125, 523=255, 524=108, 525=121, 526=53, 527=254, 528=88, 529=168, 530=98, 531=195, 532=37, 533=112, 534=145, 535=44, 536=114, 537=230, 538=159, 539=116, 540=241, 541=179, 542=71, 543=145, 544=219, 545=172, 546=116, 547=123, 548=52, 549=2, 550=169, 551=251, 552=18, 553=139, 554=52, 555=116, 556=171, 557=91, 558=49, 559=85, 560=90, 561=212, 562=241, 563=134, 564=174, 565=13, 566=56, 567=70, 568=82, 569=249, 570=149, 571=25, 572=53, 573=173, 574=224, 575=141, 576=49, 577=208, 578=71, 579=104, 580=173, 581=178, 582=74, 583=231, 584=70, 585=55, 586=72, 587=173, 588=186, 589=253, 590=255, 591=27, 592=158, 593=120, 594=212, 595=255, 596=53, 597=151, 598=220, 599=59, 600=148, 601=118, 602=68, 603=33, 604=150, 605=240, 606=13, 607=100, 608=100, 609=246, 610=67, 611=253, 612=67, 613=225, 614=162, 615=170, 616=206, 617=107, 618=170, 619=122, 620=254, 621=219, 622=228, 623=25, 624=160, 625=206, 626=147, 627=199, 628=243, 629=116, 630=174, 631=2, 632=106, 633=227, 634=237, 635=131, 636=197, 637=187, 638=228, 639=84, 640=47, 641=249, 642=84, 643=204, 644=108, 645=68, 646=29, 647=164, 648=102, 649=27, 650=69, 651=30, 652=154, 653=147, 654=184, 655=213, 656=218, 657=87, 658=150, 659=245, 660=119, 661=226, 662=131, 663=33, 664=30, 665=255, 666=24, 667=6, 668=173, 669=2, 670=3, 671=1, 672=0, 673=1, 674=163, 675=130, 676=1, 677=215, 678=48, 679=130, 680=1, 681=211, 682=48, 683=31, 684=6, 685=3, 686=85, 687=29, 688=35, 689=4, 690=24, 691=48, 692=22, 693=128, 694=20, 695=15, 696=128, 697=97, 698=28, 699=130, 700=49, 701=97, 702=213, 703=47, 704=40, 705=231, 706=141, 707=70, 708=56, 709=180, 710=44, 711=225, 712=198, 713=217, 714=226, 715=48, 716=29, 717=6, 718=3, 719=85, 720=29, 721=14, 722=4, 723=22, 724=4, 725=20, 726=73, 727=76, 728=173, 729=240, 730=48, 731=19, 732=96, 733=68, 734=38, 735=216, 736=216, 737=74, 738=207, 739=120, 740=220, 741=215, 742=249, 743=0, 744=157, 745=255, 746=48, 747=37, 748=6, 749=3, 750=85, 751=29, 752=17, 753=4, 754=30, 755=48, 756=28, 757=130, 758=13, 759=42, 760=46, 761=108, 762=105, 763=102, 764=101, 765=114, 766=97, 767=121, 768=46, 769=99, 770=111, 771=109, 772=130, 773=11, 774=108, 775=105, 776=102, 777=101, 778=114, 779=97, 780=121, 781=46, 782=99, 783=111, 784=109, 785=48, 786=14, 787=6, 788=3, 789=85, 790=29, 791=15, 792=1, 793=1, 794=255, 795=4, 796=4, 797=3, 798=2, 799=5, 800=160, 801=48, 802=29, 803=6, 804=3, 805=85, 806=29, 807=37, 808=4, 809=22, 810=48, 811=20, 812=6, 813=8, 814=43, 815=6, 816=1, 817=5, 818=5, 819=7, 820=3, 821=1, 822=6, 823=8, 824=43, 825=6, 826=1, 827=5, 828=5, 829=7, 830=3, 831=2, 832=48, 833=107, 834=6, 835=3, 836=85, 837=29, 838=31, 839=4, 840=100, 841=48, 842=98, 843=48, 844=47, 845=160, 846=45, 847=160, 848=43, 849=134, 850=41, 851=104, 852=116, 853=116, 854=112, 855=58, 856=47, 857=47, 858=99, 859=114, 860=108, 861=51, 862=46, 863=100, 864=105, 865=103, 866=105, 867=99, 868=101, 869=114, 870=116, 871=46, 872=99, 873=111, 874=109, 875=47, 876=115, 877=115, 878=99, 879=97, 880=45, 881=115, 882=104, 883=97, 884=50, 885=45, 886=103, 887=51, 888=46, 889=99, 890=114, 891=108, 892=48, 893=47, 894=160, 895=45, 896=160, 897=43, 898=134, 899=41, 900=104, 901=116, 902=116, 903=112, 904=58, 905=47, 906=47, 907=99, 908=114, 909=108, 910=52, 911=46, 912=100, 913=105, 914=103, 915=105, 916=99, 917=101, 918=114, 919=116, 920=46, 921=99, 922=111, 923=109, 924=47, 925=115, 926=115, 927=99, 928=97, 929=45, 930=115, 931=104, 932=97, 933=50, 934=45, 935=103, 936=51, 937=46, 938=99, 939=114, 940=108, 941=48, 942=66, 943=6, 944=3, 945=85, 946=29, 947=32, 948=4, 949=59, 950=48, 951=57, 952=48, 953=55, 954=6, 955=9, 956=96, 957=134, 958=72, 959=1, 960=134, 961=253, 962=108, 963=1, 964=1, 965=48, 966=42, 967=48, 968=40, 969=6, 970=8, 971=43, 972=6, 973=1, 974=5, 975=5, 976=7, 977=2, 978=1, 979=22, 980=28, 981=104, 982=116, 983=116, 984=112, 985=115, 986=58, 987=47, 988=47, 989=119, 990=119, 991=119, 992=46, 993=100, 994=105, 995=103, 996=105, 997=99, 998=101, 999=114, 1000=116, 1001=46, 1002=99, 1003=111, 1004=109, 1005=47, 1006=67, 1007=80, 1008=83, 1009=48, 1010=124, 1011=6, 1012=8, 1013=43, 1014=6, 1015=1, 1016=5, 1017=5, 1018=7, 1019=1, 1020=1, 1021=4, 1022=112, 1023=48, 1024=110, 1025=48, 1026=36, 1027=6, 1028=8, 1029=43, 1030=6, 1031=1, 1032=5, 1033=5, 1034=7, 1035=48, 1036=1, 1037=134, 1038=24, 1039=104, 1040=116, 1041=116, 1042=112, 1043=58, 1044=47, 1045=47, 1046=111, 1047=99, 1048=115, 1049=112, 1050=46, 1051=100, 1052=105, 1053=103, 1054=105, 1055=99, 1056=101, 1057=114, 1058=116, 1059=46, 1060=99, 1061=111, 1062=109, 1063=48, 1064=70, 1065=6, 1066=8, 1067=43, 1068=6, 1069=1, 1070=5, 1071=5, 1072=7, 1073=48, 1074=2, 1075=134, 1076=58, 1077=104, 1078=116, 1079=116, 1080=112, 1081=58, 1082=47, 1083=47, 1084=99, 1085=97, 1086=99, 1087=101, 1088=114, 1089=116, 1090=115, 1091=46, 1092=100, 1093=105, 1094=103, 1095=105, 1096=99, 1097=101, 1098=114, 1099=116, 1100=46, 1101=99, 1102=111, 1103=109, 1104=47, 1105=68, 1106=105, 1107=103, 1108=105, 1109=67, 1110=101, 1111=114, 1112=116, 1113=83, 1114=72, 1115=65, 1116=50, 1117=83, 1118=101, 1119=99, 1120=117, 1121=114, 1122=101, 1123=83, 1124=101, 1125=114, 1126=118, 1127=101, 1128=114, 1129=67, 1130=65, 1131=46, 1132=99, 1133=114, 1134=116, 1135=48, 1136=12, 1137=6, 1138=3, 1139=85, 1140=29, 1141=19, 1142=1, 1143=1, 1144=255, 1145=4, 1146=2, 1147=48, 1148=0, 1149=48, 1150=13, 1151=6, 1152=9, 1153=42, 1154=134, 1155=72, 1156=134, 1157=247, 1158=13, 1159=1, 1160=1, 1161=11, 1162=5, 1163=0, 1164=3, 1165=130, 1166=1, 1167=1, 1168=0, 1169=198, 1170=244, 1171=225, 1172=126, 1173=83, 1174=64, 1175=246, 1176=61, 1177=136, 1178=153, 1179=130, 1180=46, 1181=194, 1182=153, 1183=233, 1184=221, 1185=159, 1186=85, 1187=240, 1188=35, 1189=168, 1190=46, 1191=223, 1192=223, 1193=227, 1194=172, 1195=155, 1196=143, 1197=144, 1198=131, 1199=11, 1200=40, 1201=251, 1202=172, 1203=60, 1204=178, 1205=28, 1206=60, 1207=2, 1208=118, 1209=88, 1210=20, 1211=116, 1212=229, 1213=41, 1214=162, 1215=52, 1216=51, 1217=47, 1218=152, 1219=98, 1220=196, 1221=175, 1222=43, 1223=81, 1224=202, 1225=95, 1226=47, 1227=90, 1228=86, 1229=219, 1230=241, 1231=34, 1232=162, 1233=248, 1234=179, 1235=211, 1236=215, 1237=168, 1238=163, 1239=137, 1240=252, 1241=192, 1242=202, 1243=215, 1244=173, 1245=104, 1246=245, 1247=121, 1248=85, 1249=110, 1250=94, 1251=206, 1252=56, 1253=213, 1254=180, 1255=250, 1256=118, 1257=70, 1258=75, 1259=53, 1260=113, 1261=86, 1262=151, 1263=193, 1264=75, 1265=176, 1266=143, 1267=42, 1268=83, 1269=234, 1270=23, 1271=10, 1272=46, 1273=1, 1274=33, 1275=100, 1276=13, 1277=201, 1278=164, 1279=119, 1280=12, 1281=209, 1282=45, 1283=112, 1284=225, 1285=35, 1286=180, 1287=226, 1288=248, 1289=11, 1290=228, 1291=74, 1292=115, 1293=144, 1294=229, 1295=11, 1296=203, 1297=225, 1298=87, 1299=171, 1300=18, 1301=86, 1302=68, 1303=7, 1304=57, 1305=48, 1306=4, 1307=41, 1308=10, 1309=140, 1310=49, 1311=107, 1312=145, 1313=194, 1314=192, 1315=234, 1316=163, 1317=30, 1318=122, 1319=166, 1320=87, 1321=145, 1322=142, 1323=135, 1324=243, 1325=143, 1326=188, 1327=163, 1328=68, 1329=158, 1330=221, 1331=54, 1332=116, 1333=77, 1334=166, 1335=69, 1336=96, 1337=147, 1338=84, 1339=220, 1340=75, 1341=147, 1342=161, 1343=128, 1344=218, 1345=35, 1346=218, 1347=79, 1348=76, 1349=41, 1350=214, 1351=157, 1352=191, 1353=46, 1354=119, 1355=74, 1356=33, 1357=25, 1358=61, 1359=45, 1360=44, 1361=255, 1362=117, 1363=126, 1364=58, 1365=88, 1366=187, 1367=213, 1368=164, 1369=189, 1370=120, 1371=154, 1372=11, 1373=156, 1374=243, 1375=123, 1376=255, 1377=7, 1378=220, 1379=110, 1380=95, 1381=17, 1382=229, 1383=122, 1384=73, 1385=214, 1386=157, 1387=10, 1388=42, 1389=19, 1390=132, 1391=18, 1392=20, 1393=199, 1394=45, 1395=184, 1396=10, 1397=60, 1398=139, 1399=74, 1400=139, 1401=85, 1402=22, 1403=186, 1404=250, 1405=46, 1406=100, 1407=136, 1408=34, 1409=32, 1410=162, 1411=135, 1412=188, 1413=237, 1414=124, 1415=51, 1416=112, 1417=226, 1418=211, 1419=141, 1420=29, 1421=74, 1422=152, 1423=244, 1424=120, 1425=164, 1426=2, 1427=4, 1428=0, 1429=166, 1430=17, 1431=4, 1432=15, 1433=119, 1434=101, 1435=98, 1436=46, 1437=108, 1438=105, 1439=102, 1440=101, 1441=114, 1442=97, 1443=121, 1444=46, 1445=99, 1446=111, 1447=109, 1448=169, 1449=4, 1450=2, 1451=2, 1452=1, 1453=44, 1454=170, 1455=129, 1456=179, 1457=4, 1458=129, 1459=176, 1460=74, 1461=104, 1462=58, 1463=13, 1464=139, 1465=125, 1466=186, 1467=144, 1468=135, 1469=74, 1470=21, 1471=184, 1472=214, 1473=105, 1474=71, 1475=20, 1476=189, 1477=182, 1478=11, 1479=237, 1480=153, 1481=6, 1482=163, 1483=59, 1484=113, 1485=39, 1486=131, 1487=242, 1488=46, 1489=93, 1490=38, 1491=41, 1492=165, 1493=55, 1494=112, 1495=49, 1496=220, 1497=155, 1498=115, 1499=232, 1500=113, 1501=14, 1502=100, 1503=88, 1504=11, 1505=162, 1506=243, 1507=15, 1508=179, 1509=19, 1510=93, 1511=171, 1512=45, 1513=147, 1514=187, 1515=227, 1516=100, 1517=61, 1518=115, 1519=102, 1520=117, 1521=216, 1522=238, 1523=45, 1524=230, 1525=220, 1526=27, 1527=223, 1528=41, 1529=81, 1530=124, 1531=80, 1532=15, 1533=3, 1534=178, 1535=217, 1536=163, 1537=21, 1538=81, 1539=15, 1540=183, 1541=214, 1542=157, 1543=214, 1544=20, 1545=195, 1546=53, 1547=181, 1548=222, 1549=161, 1550=57, 1551=117, 1552=36, 1553=248, 1554=99, 1555=192, 1556=164, 1557=199, 1558=110, 1559=177, 1560=105, 1561=155, 1562=3, 1563=206, 1564=205, 1565=91, 1566=191, 1567=0, 1568=0, 1569=24, 1570=47, 1571=4, 1572=79, 1573=210, 1574=166, 1575=246, 1576=195, 1577=184, 1578=32, 1579=254, 1580=38, 1581=126, 1582=113, 1583=34, 1584=250, 1585=244, 1586=171, 1587=248, 1588=4, 1589=90, 1590=134, 1591=190, 1592=143, 1593=5, 1594=159, 1595=202, 1596=80, 1597=171, 1598=145, 1599=167, 1600=194, 1601=136, 1602=70, 1603=74, 1604=156, 1605=236, 1606=104, 1607=117, 1608=64, 1609=201, 1610=230, 1611=233, 1612=208, 1613=110, 1614=52, 1615=12, 1616=245, 1617=199, 1618=99, 1619=156, 1620=35, 1621=2, 1622=32, 1623=200, 1624=214, 1625=92, 1626=235, 1627=52, 1628=74, 1629=155, 1630=47, 1631=207, 1632=97, 1633=199, 1634=130, 1635=195, list=[web.liferay.com:443::::::::], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, parser=null, $ref=$, read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true, _idleNext=null, _idlePrev=null, _idleTimeout=-1, $ref=$["socket"], httpVersionMajor=1, httpVersionMinor=1, httpVersion=1.1, complete=true, date=Wed, 27 Jul 2016 13:29:05 GMT, server=Apache, x-content-type-options=nosniff, x-frame-options=SAMEORIGIN, x-xss-protection=1; mode=block, set-cookie=[JSESSIONID=lrdcom-vm-52~0F365059F3438D1B77111B3B2EA2A43F.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:05 GMT; Path=/; Secure], cache-control=private, no-cache, no-store, must-revalidate, content-length=2275, connection=close, content-type=text/javascript;charset=UTF-8, rawHeaders=[Date, Wed, 27 Jul 2016 13:29:05 GMT, Server, Apache, X-Content-Type-Options, nosniff, X-Frame-Options, SAMEORIGIN, X-XSS-Protection, 1; mode=block, Set-Cookie, JSESSIONID=lrdcom-vm-52~0F365059F3438D1B77111B3B2EA2A43F.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, Set-Cookie, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:05 GMT; Path=/; Secure, Cache-Control, private, no-cache, no-store, must-revalidate, Content-Length, 2275, Connection, close, Content-Type, text/javascript;charset=UTF-8], , rawTrailers=[], upgrade=false, url=, method=null, statusCode=200, statusMessage=OK, $ref=$["socket"], _consuming=true, _dumped=false, $ref=$["socket"]["_httpMessage"], domain=null, error=function () { [native code] }, complete=function () { [native code] }, pipe=function (src) {
    if (self.ntick && self._started) {
      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))
    }
    self.src = src
    if (isReadStream(src)) {
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', mime.lookup(src.path))
      }
    } else {
      if (src.headers) {
        for (var i in src.headers) {
          if (!self.hasHeader(i)) {
            self.setHeader(i, src.headers[i])
          }
        }
      }
      if (self._json && !self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json')
      }
      if (src.method && !self.explicitMethod) {
        self.method = src.method
      }
    }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
  }, data=function (chunk) {
    if (Buffer.isBuffer(chunk)) {
      buffer.append(chunk)
    } else {
      strings.push(chunk)
    }
  }, end=function () {
    debug('end event', self.uri.href)
    if (self._aborted) {
      debug('aborted', self.uri.href)
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
      return
    }

    if (buffer.length) {
      debug('has body', self.uri.href, buffer.length)
      if (self.encoding === null) {
        // response.body = buffer
        // can't move to this until https://github.com/rvagg/bl/issues/13
        response.body = buffer.slice()
      } else {
        response.body = buffer.toString(self.encoding)
      }
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
    } else if (strings.length) {
      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
        strings[0] = strings[0].substring(1)
      }
      response.body = strings.join('')
    }

    if (self._json) {
      try {
        response.body = JSON.parse(response.body, self._jsonReviver)
      } catch (e) {
        debug('invalid JSON received', self.uri.href)
      }
    }
    debug('emitting complete', self.uri.href)
    if (typeof response.body === 'undefined' && !self._json) {
      response.body = self.encoding === null ? new Buffer(0) : ''
    }
    self.emit('complete', response, response.body)
  }, _eventsCount=5, _maxListeners=undefined, body={"$article = /journalarticle/get-article":{"groupId":"67510365","articleId":"77062154","$update = /journalarticle/update-article":{"@version":"$article.version","groupId":"67510365","articleId":"77062154","content":"<?xml version=\"1.0\"?>\n<root available-locales=\"en_US\" default-locale=\"en_US\">\n  <static-content language-id=\"en_US\"><![CDATA[<script></script>]]></static-content>\n</root>","serviceContext.scopeGroupId":"67510365"}}}, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, accept=application/json, content-type=application/json, content-length=442, callback=function () {
      if (self._callbackCalled) {
        return // Print a warning maybe?
      }
      self._callbackCalled = true
      self._callback.apply(self, arguments)
    }, method=POST, readable=true, writable=true, explicitMethod=true, $ref=$["request"], stringify=function (object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        objKeys = filter = options.filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
    }

    return keys.join(delimiter);
}, parse=function (str, opts) {
    var options = opts || {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj, options);
    }

    return Utils.compact(obj);
}, useQuerystring=undefined, , , $ref=$["request"], hasAuth=false, sentAuth=false, bearerToken=null, user=null, pass=null, $ref=$["request"], params=null, $ref=$["request"], boundary=e5882755-aec7-49ac-97c6-15df6112cb41, chunked=false, body=null, $ref=$["request"], followRedirect=true, followRedirects=true, followAllRedirects=false, allowRedirect=function () {return true}, maxRedirects=10, redirects=[], redirectsFollowed=0, removeRefererHeader=false, $ref=$["request"], proxyHeaderWhiteList=[accept, accept-charset, accept-encoding, accept-language, accept-ranges, cache-control, content-encoding, content-language, content-location, content-md5, content-range, content-type, connection, date, expect, max-forwards, pragma, referer, te, user-agent, via], proxyHeaderExclusiveList=[], setHeader=function (key, value, clobber) {
    if (typeof value === 'undefined') return
    return c.set(key, value, clobber)
  }, hasHeader=function (key) {
    return c.has(key)
  }, getHeader=function (key) {
    return c.get(key)
  }, removeHeader=function (key) {
    return c.del(key)
  }, localAddress=undefined, , dests=[], __isRequestRequest=true, _callback=function (err, httpResponse, body) {

            logger.silly("httpResponse: ", httpResponse);
            logger.debug("body: " + body);

            if (err) {
                logger.error(err);
                throw err;
            } else if (httpResponse && httpResponse.statusCode && (httpResponse.statusCode != 200)) {
                logger.error("An error seems to have occurred. Response Code " + httpResponse.statusCode, body);
                var errorobj = {
                    statusCode: httpResponse.statusCode,
                    body: body
                };
                throw errorobj;
            }
            else {
                if (body && body.exception) {
                    logger.error("An exception occurred: " + body.exception);
                    throw body.exception;
                } else { callback(body) }
            }
        }, protocol=https:, slashes=true, auth=null, host=web.liferay.com, port=443, hostname=web.liferay.com, hash=null, search=null, query=null, pathname=/api/secure/jsonws/invoke, path=/api/secure/jsonws/invoke, href=https://web.liferay.com/api/secure/jsonws/invoke, proxy=null, tunnel=true, setHost=true, originalCookieHeader=undefined, _disableCookies=true, _jar=undefined, port=443, host=web.liferay.com, path=/api/secure/jsonws/invoke, _json=true, Server=function Server(opts, requestListener) {
  if (!(this instanceof Server)) return new Server(opts, requestListener);

  if (process.features.tls_npn && !opts.NPNProtocols) {
    opts.NPNProtocols = ['http/1.1', 'http/1.0'];
  }

  tls.Server.call(this, opts, http._connectionListener);

  this.httpAllowHalfOpen = false;

  if (requestListener) {
    this.addListener('request', requestListener);
  }

  this.addListener('clientError', function(err, conn) {
    conn.destroy();
  });

  this.timeout = 2 * 60 * 1000;
}, createServer=function (opts, requestListener) {
  return new Server(opts, requestListener);
}, $ref=$["socket"]["_httpMessage"]["agent"], Agent=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, request=function (options, cb) {
  if (typeof options === 'string') {
    options = url.parse(options);
  } else {
    options = util._extend({}, options);
  }
  options._defaultAgent = globalAgent;
  return http.request(options, cb);
}, get=function (options, cb) {
  var req = exports.request(options, cb);
  req.end();
  return req;
}, agentClass=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, $ref=$["socket"]["_httpMessage"]["agent"], _started=true, href=https://web.liferay.com/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"], ntick=true, $ref=$, originalHost=web.liferay.com, originalHostHeaderName=host, $ref=$, _destdata=true, _ended=true, _callbackCalled=true, toJSON=function responseToJSON() {
  var self = this
  return {
    statusCode: self.statusCode,
    body: self.body,
    headers: self.headers,
    request: requestToJSON.call(self.request)
  }
}, $ref=$["headers"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, articleId=77062154, classNameId=0, classPK=0, companyId=1, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[<script></script>]]></static-content>
</root>, createDate=1469626145944, description=, descriptionCurrentValue=, displayDate=1469626080000, expirationDate=null, groupId=67510365, id=77062216, indexable=true, layoutUuid=, modifiedDate=1469626146009, resourcePrimKey=77062156, reviewDate=null, smallImage=false, smallImageId=77062157, smallImageURL=, status=0, statusByUserId=66748356, statusByUserName=Allen Ziegenfus, statusDate=1469626146009, structureId=, templateId=, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf JS -- /web/events2016/modconf</Title></root>, titleCurrentValue=modconf JS -- /web/events2016/modconf, type=general, urlTitle=modconf-js-web-events2016-modconf, userId=66748356, userName=Allen Ziegenfus, uuid=567cd3d3-35aa-4482-be7f-7b50fab430c0, version=1.1, urlTitle=modconf-js-web-events2016-modconf, indexable=true, classNameId=0, layoutUuid=, statusDate=1469626107860, smallImageId=77062157, type=general, articleId=77062154, version=1, id=77062155, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf JS -- /web/events2016/modconf</Title></root>, description=, userId=66748356, userName=Allen Ziegenfus, smallImage=false, createDate=1469626107703, titleCurrentValue=modconf JS -- /web/events2016/modconf, displayDate=1469626080000, smallImageURL=, expirationDate=null, status=0, statusByUserName=Allen Ziegenfus, reviewDate=null, modifiedDate=1469626107860, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>, templateId=, groupId=67510365, descriptionCurrentValue=, resourcePrimKey=77062156, classPK=0, structureId=, statusByUserId=66748356, companyId=1, uuid=ec5d293f-fd02-4c48-bdc7-6c4c36b71df8
2016-07-27T13:29:06.523Z - debug: body: [object Object]
2016-07-27T13:29:06.523Z - debug: body: <?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>
2016-07-27T13:29:06.527Z - silly: httpResponse:  objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=true, endEmitted=true, reading=false, sync=true, needReadable=false, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=false, domain=null, end=[function responseOnEnd() {
  var res = this;
  var req = res.req;
  var socket = req.socket;

  if (!req.shouldKeepAlive) {
    if (socket.writable) {
      debug('AGENT socket.destroySoon()');
      socket.destroySoon();
    }
    assert(!socket.writable);
  } else {
    debug('AGENT socket keep-alive');
    if (req.timeoutCb) {
      socket.setTimeout(0, req.timeoutCb);
      req.timeoutCb = null;
    }
    socket.removeListener('close', socketCloseListener);
    socket.removeListener('error', socketErrorListener);
    socket.once('error', freeSocketErrorListener);
    // Mark this socket as available, AFTER user-added end
    // handlers have a chance to run.
    process.nextTick(emitFreeNT, socket);
  }
}, function () {
    if (self.timing) {
      self.elapsedTime += (new Date().getTime() - self.startTime)
      debug('elapsed time', self.elapsedTime)
      response.elapsedTime = self.elapsedTime
    }
    debug('response end', self.uri.href, response.statusCode, response.headers)
  }, function () {
      self._ended = true
    }, function (chunk) {
      self.emit('end', chunk)
    }], close=[function () {
      if (!self._ended) {
        self.response.emit('end')
      }
    }, function () {self.emit('close')}], data=function (chunk) {
      self._destdata = true
      self.emit('data', chunk)
    }, error=function (error) {
      self.emit('error', error)
    }, _eventsCount=4, _maxListeners=undefined, pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, _eventsCount=9, _connecting=false, _hadError=false, _handle=null, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=false, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=true, ended=true, finished=true, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=true, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=false, allowHalfOpen=false, destroyed=true, bytesRead=3845, _bytesDispatched=1704, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, ssl=null, _requestCert=true, _rejectUnauthorized=true, parser=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"], $ref=$["socket"], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 1456
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=1456, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, domain=null, free=function (socket, options) {
    var name = self.getName(options);
    debug('agent.on(free)', name);

    if (!socket.destroyed &&
        self.requests[name] && self.requests[name].length) {
      self.requests[name].shift().onSocket(socket);
      if (self.requests[name].length === 0) {
        // don't leak
        delete self.requests[name];
      }
    } else {
      // If there are no pending requests, then put it in
      // the freeSockets pool, but only if we're allowed to do so.
      var req = socket._httpMessage;
      if (req &&
          req.shouldKeepAlive &&
          !socket.destroyed &&
          self.keepAlive) {
        var freeSockets = self.freeSockets[name];
        var freeLen = freeSockets ? freeSockets.length : 0;
        var count = freeLen;
        if (self.sockets[name])
          count += self.sockets[name].length;

        if (count > self.maxSockets || freeLen >= self.maxFreeSockets) {
          socket.destroy();
        } else {
          freeSockets = freeSockets || [];
          self.freeSockets[name] = freeSockets;
          socket.setKeepAlive(true, self.keepAliveMsecs);
          socket.unref();
          socket._httpMessage = null;
          self.removeSocket(socket, options);
          freeSockets.push(socket);
        }
      } else {
        socket.destroy();
      }
    }
  }, _eventsCount=1, _maxListeners=undefined, defaultPort=443, protocol=https:, path=null, , web.liferay.com:443::::::::=[$ref=$["socket"], pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function socketOnEnd() {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  if (!req.res && !req.socket._hadError) {
    // If we don't have a response then we know that the socket
    // ended prematurely and we need to emit an error on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
  socket.destroy();
}], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, data=function socketOnData(d) {
  var socket = this;
  var req = this._httpMessage;
  var parser = this.parser;

  assert(parser && parser.socket === socket);

  var ret = parser.execute(d);
  if (ret instanceof Error) {
    debug('parse error');
    freeParser(parser, req, socket);
    socket.destroy();
    req.emit('error', ret);
    req.socket._hadError = true;
  } else if (parser.incoming && parser.incoming.upgrade) {
    // Upgrade or CONNECT
    var bytesParsed = ret;
    var res = parser.incoming;
    req.res = res;

    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    parser.finish();

    var bodyHead = d.slice(bytesParsed, d.length);

    var eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';
    if (req.listenerCount(eventName) > 0) {
      req.upgradeOrConnect = true;

      // detach the socket
      socket.emit('agentRemove');
      socket.removeListener('close', socketCloseListener);
      socket.removeListener('error', socketErrorListener);

      // TODO(isaacs): Need a way to reset a stream to fresh state
      // IE, not flowing, and not explicitly paused.
      socket._readableState.flowing = null;

      req.emit(eventName, res, socket, bodyHead);
      req.emit('close');
    } else {
      // Got Upgrade header or CONNECT method, but have no handler.
      socket.destroy();
    }
    freeParser(parser, req, socket);
  } else if (parser.incoming && parser.incoming.complete &&
             // When the status code is 100 (Continue), the server will
             // send a final response after this client sends a request
             // body. So, we must not free the parser.
             parser.incoming.statusCode !== 100) {
    socket.removeListener('data', socketOnData);
    socket.removeListener('end', socketOnEnd);
    freeParser(parser, req, socket);
  }
}, _eventsCount=10, _connecting=false, _hadError=false, , fd=20, , fd=20, reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1], onread=null, onconnection=null, writeQueueSize=0, _parentWrap=undefined, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1]["_tlsOptions"]["secureContext"], reading=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1], onread=function onread(nread, buffer) {
  var handle = this;
  var self = handle.owner;
  assert(handle === self._handle, 'handle != self._handle');

  self._unrefTimer();

  debug('onread', nread);

  if (nread > 0) {
    debug('got data');

    // read success.
    // In theory (and in practice) calling readStop right now
    // will prevent this from being called again until _read() gets
    // called again.

    // if it's not enough data, we'll just call handle.readStart()
    // again right away.
    self.bytesRead += nread;

    // Optimization: emit the original buffer with end points
    var ret = self.push(buffer);

    if (handle.reading && !ret) {
      handle.reading = false;
      debug('readStop');
      var err = handle.readStop();
      if (err)
        self._destroy(errnoException(err, 'read'));
    }
    return;
  }

  // if we didn't get any bytes, that doesn't necessarily mean EOF.
  // wait for the next one.
  if (nread === 0) {
    debug('not any data, keep waiting');
    return;
  }

  // Error, possibly EOF.
  if (nread !== uv.UV_EOF) {
    return self._destroy(errnoException(nread, 'read'));
  }

  debug('EOF');

  if (self._readableState.length === 0) {
    self.readable = false;
    maybeDestroy(self);
  }

  // push a null to signal the end of data.
  self.push(null);

  // internal end event so that we know that the actual socket
  // is no longer readable, and we can start the shutdown
  // procedure. No need to wait for all the data to be consumed.
  self.emit('_socketEnd');
}, writeQueueSize=1, onhandshakestart=function () {}, onhandshakedone=() => this._finishInit(), onocspresponse=(resp) => onocspresponse.call(this, resp), onerror=function (err) {
    if (self._writableState.errorEmitted)
      return;

    // Destroy socket if error happened before handshake's finish
    if (!self._secureEstablished) {
      self.destroy(self._tlsError(err));
    } else if (options.isServer &&
               rejectUnauthorized &&
               /peer did not return a certificate/.test(err.message)) {
      // Ignore server's authorization errors
      self.destroy();
    } else {
      // Throw error
      self._emitTLSError(err);
    }

    self._writableState.errorEmitted = true;
  }, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=true, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=false, ended=false, finished=false, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=false, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=true, allowHalfOpen=false, destroyed=false, bytesRead=0, _bytesDispatched=18387, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1]["_handle"], _requestCert=true, _rejectUnauthorized=true, 0=function parserOnHeaders(headers, url) {
  // Once we exceeded headers limit - stop collecting them
  if (this.maxHeaderPairs <= 0 ||
      this._headers.length < this.maxHeaderPairs) {
    this._headers = this._headers.concat(headers);
  }
  this._url += url;
}, 1=function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,
                                 url, statusCode, statusMessage, upgrade,
                                 shouldKeepAlive) {
  var parser = this;

  if (!headers) {
    headers = parser._headers;
    parser._headers = [];
  }

  if (!url) {
    url = parser._url;
    parser._url = '';
  }

  parser.incoming = new IncomingMessage(parser.socket);
  parser.incoming.httpVersionMajor = versionMajor;
  parser.incoming.httpVersionMinor = versionMinor;
  parser.incoming.httpVersion = versionMajor + '.' + versionMinor;
  parser.incoming.url = url;

  var n = headers.length;

  // If parser.maxHeaderPairs <= 0 assume that there's no limit.
  if (parser.maxHeaderPairs > 0)
    n = Math.min(n, parser.maxHeaderPairs);

  parser.incoming._addHeaderLines(headers, n);

  if (typeof method === 'number') {
    // server only
    parser.incoming.method = HTTPParser.methods[method];
  } else {
    // client only
    parser.incoming.statusCode = statusCode;
    parser.incoming.statusMessage = statusMessage;
  }

  // The client made non-upgrade request, and server is just advertising
  // supported protocols.
  //
  // See RFC7230 Section 6.7
  //
  // NOTE: RegExp below matches `upgrade` in `Connection: abc, upgrade, def`
  // header.
  if (upgrade &&
      parser.outgoing !== null &&
      (parser.outgoing._headers.upgrade === undefined ||
       !/(^|\W)upgrade(\W|$)/i.test(parser.outgoing._headers.connection))) {
    upgrade = false;
  }

  parser.incoming.upgrade = upgrade;

  var skipBody = false; // response to HEAD or CONNECT

  if (!upgrade) {
    // For upgraded connections and CONNECT method request, we'll emit this
    // after parser.execute so that we can capture the first part of the new
    // protocol.
    skipBody = parser.onIncoming(parser.incoming, shouldKeepAlive);
  }

  return skipBody;
}, 2=function parserOnBody(b, start, len) {
  var parser = this;
  var stream = parser.incoming;

  // if the stream has already been removed, then drop it.
  if (!stream)
    return;

  var socket = stream.socket;

  // pretend this was the result of a stream._read call.
  if (len > 0 && !stream._dumped) {
    var slice = b.slice(start, start + len);
    var ret = stream.push(slice);
    if (!ret)
      readStop(socket);
  }
}, 3=function parserOnMessageComplete() {
  var parser = this;
  var stream = parser.incoming;

  if (stream) {
    stream.complete = true;
    // Emit any trailing headers.
    var headers = parser._headers;
    if (headers) {
      parser.incoming._addHeaderLines(headers, headers.length);
      parser._headers = [];
      parser._url = '';
    }

    // For emit end event
    stream.push(null);
  }

  // force to read the next incoming message
  readStart(parser.socket);
}, 4=null, _headers=[], _url=, _consumed=false, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1], incoming=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1], $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 18138
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=18138, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, $ref=$["socket"]["_httpMessage"]["agent"], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1]["parser"], maxHeaderPairs=2000, onIncoming=function parserOnIncomingClient(res, shouldKeepAlive) {
  var socket = this.socket;
  var req = socket._httpMessage;


  // propagate "domain" setting...
  if (req.domain && !res.domain) {
    debug('setting "res.domain"');
    res.domain = req.domain;
  }

  debug('AGENT incoming response!');

  if (req.res) {
    // We already have a response object, this means the server
    // sent a double response.
    socket.destroy();
    return;
  }
  req.res = res;

  // Responses to CONNECT request is handled as Upgrade.
  if (req.method === 'CONNECT') {
    res.upgrade = true;
    return true; // skip body
  }

  // Responses to HEAD requests are crazy.
  // HEAD responses aren't allowed to have an entity-body
  // but *can* have a content-length which actually corresponds
  // to the content-length of the entity-body had the request
  // been a GET.
  var isHeadResponse = req.method === 'HEAD';
  debug('AGENT isHeadResponse', isHeadResponse);

  if (res.statusCode === 100) {
    // restart the parser, as this is a continue message.
    delete req.res; // Clear res so that we don't hit double-responses.
    req.emit('continue');
    return true;
  }

  if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgradeOrConnect) {
    // Server MUST respond with Connection:keep-alive for us to enable it.
    // If we've been upgraded (via WebSockets) we also shouldn't try to
    // keep the connection open.
    req.shouldKeepAlive = false;
  }


  DTRACE_HTTP_CLIENT_RESPONSE(socket, req);
  ;
  ;
  req.res = res;
  res.req = req;

  // add our listener first, so that we guarantee socket cleanup
  res.on('end', responseOnEnd);
  var handled = req.emit('response', res);

  // If the user did not listen for the 'response' event, then they
  // can't possibly read the data, so we ._dump() it into the void
  // so that the socket doesn't hang there in a paused state.
  if (!handled)
    res._dump();

  return isHeadResponse;
}, $ref=$["socket"]["_httpMessage"]["agent"]["sockets"]["web.liferay.com:443::::::::"][1]["parser"]["outgoing"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true], , keepAliveMsecs=1000, keepAlive=false, maxSockets=Infinity, maxFreeSockets=256, maxCachedSessions=100, 0=48, 1=130, 2=6, 3=96, 4=2, 5=1, 6=1, 7=2, 8=2, 9=3, 10=3, 11=4, 12=2, 13=192, 14=48, 15=4, 16=32, 17=23, 18=17, 19=15, 20=103, 21=228, 22=33, 23=139, 24=31, 25=14, 26=160, 27=43, 28=29, 29=74, 30=3, 31=186, 32=32, 33=57, 34=80, 35=180, 36=72, 37=79, 38=91, 39=58, 40=72, 41=251, 42=64, 43=139, 44=48, 45=67, 46=207, 47=245, 48=17, 49=4, 50=48, 51=227, 52=235, 53=50, 54=71, 55=210, 56=106, 57=68, 58=226, 59=172, 60=67, 61=84, 62=123, 63=27, 64=117, 65=136, 66=53, 67=26, 68=216, 69=197, 70=214, 71=160, 72=127, 73=37, 74=31, 75=42, 76=18, 77=222, 78=31, 79=14, 80=117, 81=101, 82=162, 83=47, 84=220, 85=197, 86=6, 87=203, 88=113, 89=174, 90=227, 91=70, 92=125, 93=226, 94=211, 95=229, 96=223, 97=68, 98=109, 99=161, 100=6, 101=2, 102=4, 103=87, 104=152, 105=183, 106=33, 107=162, 108=4, 109=2, 110=2, 111=1, 112=44, 113=163, 114=130, 115=5, 116=28, 117=48, 118=130, 119=5, 120=24, 121=48, 122=130, 123=4, 124=0, 125=160, 126=3, 127=2, 128=1, 129=2, 130=2, 131=16, 132=13, 133=132, 134=28, 135=24, 136=148, 137=3, 138=70, 139=69, 140=60, 141=112, 142=134, 143=212, 144=166, 145=231, 146=87, 147=119, 148=48, 149=13, 150=6, 151=9, 152=42, 153=134, 154=72, 155=134, 156=247, 157=13, 158=1, 159=1, 160=11, 161=5, 162=0, 163=48, 164=77, 165=49, 166=11, 167=48, 168=9, 169=6, 170=3, 171=85, 172=4, 173=6, 174=19, 175=2, 176=85, 177=83, 178=49, 179=21, 180=48, 181=19, 182=6, 183=3, 184=85, 185=4, 186=10, 187=19, 188=12, 189=68, 190=105, 191=103, 192=105, 193=67, 194=101, 195=114, 196=116, 197=32, 198=73, 199=110, 200=99, 201=49, 202=39, 203=48, 204=37, 205=6, 206=3, 207=85, 208=4, 209=3, 210=19, 211=30, 212=68, 213=105, 214=103, 215=105, 216=67, 217=101, 218=114, 219=116, 220=32, 221=83, 222=72, 223=65, 224=50, 225=32, 226=83, 227=101, 228=99, 229=117, 230=114, 231=101, 232=32, 233=83, 234=101, 235=114, 236=118, 237=101, 238=114, 239=32, 240=67, 241=65, 242=48, 243=30, 244=23, 245=13, 246=49, 247=52, 248=49, 249=49, 250=49, 251=57, 252=48, 253=48, 254=48, 255=48, 256=48, 257=48, 258=90, 259=23, 260=13, 261=49, 262=56, 263=48, 264=49, 265=50, 266=50, 267=49, 268=50, 269=48, 270=48, 271=48, 272=48, 273=90, 274=48, 275=104, 276=49, 277=11, 278=48, 279=9, 280=6, 281=3, 282=85, 283=4, 284=6, 285=19, 286=2, 287=85, 288=83, 289=49, 290=19, 291=48, 292=17, 293=6, 294=3, 295=85, 296=4, 297=8, 298=19, 299=10, 300=67, 301=97, 302=108, 303=105, 304=102, 305=111, 306=114, 307=110, 308=105, 309=97, 310=49, 311=20, 312=48, 313=18, 314=6, 315=3, 316=85, 317=4, 318=7, 319=19, 320=11, 321=68, 322=105, 323=97, 324=109, 325=111, 326=110, 327=100, 328=32, 329=66, 330=97, 331=114, 332=49, 333=22, 334=48, 335=20, 336=6, 337=3, 338=85, 339=4, 340=10, 341=19, 342=13, 343=76, 344=105, 345=102, 346=101, 347=114, 348=97, 349=121, 350=44, 351=32, 352=73, 353=110, 354=99, 355=46, 356=49, 357=22, 358=48, 359=20, 360=6, 361=3, 362=85, 363=4, 364=3, 365=12, 366=13, 367=42, 368=46, 369=108, 370=105, 371=102, 372=101, 373=114, 374=97, 375=121, 376=46, 377=99, 378=111, 379=109, 380=48, 381=130, 382=1, 383=34, 384=48, 385=13, 386=6, 387=9, 388=42, 389=134, 390=72, 391=134, 392=247, 393=13, 394=1, 395=1, 396=1, 397=5, 398=0, 399=3, 400=130, 401=1, 402=15, 403=0, 404=48, 405=130, 406=1, 407=10, 408=2, 409=130, 410=1, 411=1, 412=0, 413=171, 414=253, 415=224, 416=65, 417=127, 418=225, 419=99, 420=85, 421=58, 422=6, 423=204, 424=254, 425=35, 426=12, 427=26, 428=154, 429=62, 430=2, 431=104, 432=214, 433=141, 434=116, 435=134, 436=68, 437=169, 438=20, 439=185, 440=210, 441=196, 442=105, 443=156, 444=174, 445=236, 446=153, 447=52, 448=58, 449=94, 450=116, 451=208, 452=149, 453=227, 454=194, 455=122, 456=140, 457=196, 458=138, 459=0, 460=97, 461=53, 462=27, 463=59, 464=140, 465=47, 466=134, 467=34, 468=187, 469=182, 470=191, 471=2, 472=249, 473=59, 474=36, 475=0, 476=217, 477=160, 478=254, 479=56, 480=253, 481=90, 482=46, 483=237, 484=114, 485=1, 486=135, 487=2, 488=212, 489=144, 490=255, 491=190, 492=176, 493=141, 494=151, 495=216, 496=155, 497=132, 498=109, 499=222, 500=109, 501=122, 502=169, 503=171, 504=86, 505=137, 506=71, 507=249, 508=123, 509=224, 510=167, 511=240, 512=104, 513=50, 514=129, 515=27, 516=233, 517=11, 518=96, 519=93, 520=201, 521=120, 522=125, 523=255, 524=108, 525=121, 526=53, 527=254, 528=88, 529=168, 530=98, 531=195, 532=37, 533=112, 534=145, 535=44, 536=114, 537=230, 538=159, 539=116, 540=241, 541=179, 542=71, 543=145, 544=219, 545=172, 546=116, 547=123, 548=52, 549=2, 550=169, 551=251, 552=18, 553=139, 554=52, 555=116, 556=171, 557=91, 558=49, 559=85, 560=90, 561=212, 562=241, 563=134, 564=174, 565=13, 566=56, 567=70, 568=82, 569=249, 570=149, 571=25, 572=53, 573=173, 574=224, 575=141, 576=49, 577=208, 578=71, 579=104, 580=173, 581=178, 582=74, 583=231, 584=70, 585=55, 586=72, 587=173, 588=186, 589=253, 590=255, 591=27, 592=158, 593=120, 594=212, 595=255, 596=53, 597=151, 598=220, 599=59, 600=148, 601=118, 602=68, 603=33, 604=150, 605=240, 606=13, 607=100, 608=100, 609=246, 610=67, 611=253, 612=67, 613=225, 614=162, 615=170, 616=206, 617=107, 618=170, 619=122, 620=254, 621=219, 622=228, 623=25, 624=160, 625=206, 626=147, 627=199, 628=243, 629=116, 630=174, 631=2, 632=106, 633=227, 634=237, 635=131, 636=197, 637=187, 638=228, 639=84, 640=47, 641=249, 642=84, 643=204, 644=108, 645=68, 646=29, 647=164, 648=102, 649=27, 650=69, 651=30, 652=154, 653=147, 654=184, 655=213, 656=218, 657=87, 658=150, 659=245, 660=119, 661=226, 662=131, 663=33, 664=30, 665=255, 666=24, 667=6, 668=173, 669=2, 670=3, 671=1, 672=0, 673=1, 674=163, 675=130, 676=1, 677=215, 678=48, 679=130, 680=1, 681=211, 682=48, 683=31, 684=6, 685=3, 686=85, 687=29, 688=35, 689=4, 690=24, 691=48, 692=22, 693=128, 694=20, 695=15, 696=128, 697=97, 698=28, 699=130, 700=49, 701=97, 702=213, 703=47, 704=40, 705=231, 706=141, 707=70, 708=56, 709=180, 710=44, 711=225, 712=198, 713=217, 714=226, 715=48, 716=29, 717=6, 718=3, 719=85, 720=29, 721=14, 722=4, 723=22, 724=4, 725=20, 726=73, 727=76, 728=173, 729=240, 730=48, 731=19, 732=96, 733=68, 734=38, 735=216, 736=216, 737=74, 738=207, 739=120, 740=220, 741=215, 742=249, 743=0, 744=157, 745=255, 746=48, 747=37, 748=6, 749=3, 750=85, 751=29, 752=17, 753=4, 754=30, 755=48, 756=28, 757=130, 758=13, 759=42, 760=46, 761=108, 762=105, 763=102, 764=101, 765=114, 766=97, 767=121, 768=46, 769=99, 770=111, 771=109, 772=130, 773=11, 774=108, 775=105, 776=102, 777=101, 778=114, 779=97, 780=121, 781=46, 782=99, 783=111, 784=109, 785=48, 786=14, 787=6, 788=3, 789=85, 790=29, 791=15, 792=1, 793=1, 794=255, 795=4, 796=4, 797=3, 798=2, 799=5, 800=160, 801=48, 802=29, 803=6, 804=3, 805=85, 806=29, 807=37, 808=4, 809=22, 810=48, 811=20, 812=6, 813=8, 814=43, 815=6, 816=1, 817=5, 818=5, 819=7, 820=3, 821=1, 822=6, 823=8, 824=43, 825=6, 826=1, 827=5, 828=5, 829=7, 830=3, 831=2, 832=48, 833=107, 834=6, 835=3, 836=85, 837=29, 838=31, 839=4, 840=100, 841=48, 842=98, 843=48, 844=47, 845=160, 846=45, 847=160, 848=43, 849=134, 850=41, 851=104, 852=116, 853=116, 854=112, 855=58, 856=47, 857=47, 858=99, 859=114, 860=108, 861=51, 862=46, 863=100, 864=105, 865=103, 866=105, 867=99, 868=101, 869=114, 870=116, 871=46, 872=99, 873=111, 874=109, 875=47, 876=115, 877=115, 878=99, 879=97, 880=45, 881=115, 882=104, 883=97, 884=50, 885=45, 886=103, 887=51, 888=46, 889=99, 890=114, 891=108, 892=48, 893=47, 894=160, 895=45, 896=160, 897=43, 898=134, 899=41, 900=104, 901=116, 902=116, 903=112, 904=58, 905=47, 906=47, 907=99, 908=114, 909=108, 910=52, 911=46, 912=100, 913=105, 914=103, 915=105, 916=99, 917=101, 918=114, 919=116, 920=46, 921=99, 922=111, 923=109, 924=47, 925=115, 926=115, 927=99, 928=97, 929=45, 930=115, 931=104, 932=97, 933=50, 934=45, 935=103, 936=51, 937=46, 938=99, 939=114, 940=108, 941=48, 942=66, 943=6, 944=3, 945=85, 946=29, 947=32, 948=4, 949=59, 950=48, 951=57, 952=48, 953=55, 954=6, 955=9, 956=96, 957=134, 958=72, 959=1, 960=134, 961=253, 962=108, 963=1, 964=1, 965=48, 966=42, 967=48, 968=40, 969=6, 970=8, 971=43, 972=6, 973=1, 974=5, 975=5, 976=7, 977=2, 978=1, 979=22, 980=28, 981=104, 982=116, 983=116, 984=112, 985=115, 986=58, 987=47, 988=47, 989=119, 990=119, 991=119, 992=46, 993=100, 994=105, 995=103, 996=105, 997=99, 998=101, 999=114, 1000=116, 1001=46, 1002=99, 1003=111, 1004=109, 1005=47, 1006=67, 1007=80, 1008=83, 1009=48, 1010=124, 1011=6, 1012=8, 1013=43, 1014=6, 1015=1, 1016=5, 1017=5, 1018=7, 1019=1, 1020=1, 1021=4, 1022=112, 1023=48, 1024=110, 1025=48, 1026=36, 1027=6, 1028=8, 1029=43, 1030=6, 1031=1, 1032=5, 1033=5, 1034=7, 1035=48, 1036=1, 1037=134, 1038=24, 1039=104, 1040=116, 1041=116, 1042=112, 1043=58, 1044=47, 1045=47, 1046=111, 1047=99, 1048=115, 1049=112, 1050=46, 1051=100, 1052=105, 1053=103, 1054=105, 1055=99, 1056=101, 1057=114, 1058=116, 1059=46, 1060=99, 1061=111, 1062=109, 1063=48, 1064=70, 1065=6, 1066=8, 1067=43, 1068=6, 1069=1, 1070=5, 1071=5, 1072=7, 1073=48, 1074=2, 1075=134, 1076=58, 1077=104, 1078=116, 1079=116, 1080=112, 1081=58, 1082=47, 1083=47, 1084=99, 1085=97, 1086=99, 1087=101, 1088=114, 1089=116, 1090=115, 1091=46, 1092=100, 1093=105, 1094=103, 1095=105, 1096=99, 1097=101, 1098=114, 1099=116, 1100=46, 1101=99, 1102=111, 1103=109, 1104=47, 1105=68, 1106=105, 1107=103, 1108=105, 1109=67, 1110=101, 1111=114, 1112=116, 1113=83, 1114=72, 1115=65, 1116=50, 1117=83, 1118=101, 1119=99, 1120=117, 1121=114, 1122=101, 1123=83, 1124=101, 1125=114, 1126=118, 1127=101, 1128=114, 1129=67, 1130=65, 1131=46, 1132=99, 1133=114, 1134=116, 1135=48, 1136=12, 1137=6, 1138=3, 1139=85, 1140=29, 1141=19, 1142=1, 1143=1, 1144=255, 1145=4, 1146=2, 1147=48, 1148=0, 1149=48, 1150=13, 1151=6, 1152=9, 1153=42, 1154=134, 1155=72, 1156=134, 1157=247, 1158=13, 1159=1, 1160=1, 1161=11, 1162=5, 1163=0, 1164=3, 1165=130, 1166=1, 1167=1, 1168=0, 1169=198, 1170=244, 1171=225, 1172=126, 1173=83, 1174=64, 1175=246, 1176=61, 1177=136, 1178=153, 1179=130, 1180=46, 1181=194, 1182=153, 1183=233, 1184=221, 1185=159, 1186=85, 1187=240, 1188=35, 1189=168, 1190=46, 1191=223, 1192=223, 1193=227, 1194=172, 1195=155, 1196=143, 1197=144, 1198=131, 1199=11, 1200=40, 1201=251, 1202=172, 1203=60, 1204=178, 1205=28, 1206=60, 1207=2, 1208=118, 1209=88, 1210=20, 1211=116, 1212=229, 1213=41, 1214=162, 1215=52, 1216=51, 1217=47, 1218=152, 1219=98, 1220=196, 1221=175, 1222=43, 1223=81, 1224=202, 1225=95, 1226=47, 1227=90, 1228=86, 1229=219, 1230=241, 1231=34, 1232=162, 1233=248, 1234=179, 1235=211, 1236=215, 1237=168, 1238=163, 1239=137, 1240=252, 1241=192, 1242=202, 1243=215, 1244=173, 1245=104, 1246=245, 1247=121, 1248=85, 1249=110, 1250=94, 1251=206, 1252=56, 1253=213, 1254=180, 1255=250, 1256=118, 1257=70, 1258=75, 1259=53, 1260=113, 1261=86, 1262=151, 1263=193, 1264=75, 1265=176, 1266=143, 1267=42, 1268=83, 1269=234, 1270=23, 1271=10, 1272=46, 1273=1, 1274=33, 1275=100, 1276=13, 1277=201, 1278=164, 1279=119, 1280=12, 1281=209, 1282=45, 1283=112, 1284=225, 1285=35, 1286=180, 1287=226, 1288=248, 1289=11, 1290=228, 1291=74, 1292=115, 1293=144, 1294=229, 1295=11, 1296=203, 1297=225, 1298=87, 1299=171, 1300=18, 1301=86, 1302=68, 1303=7, 1304=57, 1305=48, 1306=4, 1307=41, 1308=10, 1309=140, 1310=49, 1311=107, 1312=145, 1313=194, 1314=192, 1315=234, 1316=163, 1317=30, 1318=122, 1319=166, 1320=87, 1321=145, 1322=142, 1323=135, 1324=243, 1325=143, 1326=188, 1327=163, 1328=68, 1329=158, 1330=221, 1331=54, 1332=116, 1333=77, 1334=166, 1335=69, 1336=96, 1337=147, 1338=84, 1339=220, 1340=75, 1341=147, 1342=161, 1343=128, 1344=218, 1345=35, 1346=218, 1347=79, 1348=76, 1349=41, 1350=214, 1351=157, 1352=191, 1353=46, 1354=119, 1355=74, 1356=33, 1357=25, 1358=61, 1359=45, 1360=44, 1361=255, 1362=117, 1363=126, 1364=58, 1365=88, 1366=187, 1367=213, 1368=164, 1369=189, 1370=120, 1371=154, 1372=11, 1373=156, 1374=243, 1375=123, 1376=255, 1377=7, 1378=220, 1379=110, 1380=95, 1381=17, 1382=229, 1383=122, 1384=73, 1385=214, 1386=157, 1387=10, 1388=42, 1389=19, 1390=132, 1391=18, 1392=20, 1393=199, 1394=45, 1395=184, 1396=10, 1397=60, 1398=139, 1399=74, 1400=139, 1401=85, 1402=22, 1403=186, 1404=250, 1405=46, 1406=100, 1407=136, 1408=34, 1409=32, 1410=162, 1411=135, 1412=188, 1413=237, 1414=124, 1415=51, 1416=112, 1417=226, 1418=211, 1419=141, 1420=29, 1421=74, 1422=152, 1423=244, 1424=120, 1425=164, 1426=2, 1427=4, 1428=0, 1429=166, 1430=17, 1431=4, 1432=15, 1433=119, 1434=101, 1435=98, 1436=46, 1437=108, 1438=105, 1439=102, 1440=101, 1441=114, 1442=97, 1443=121, 1444=46, 1445=99, 1446=111, 1447=109, 1448=169, 1449=4, 1450=2, 1451=2, 1452=1, 1453=44, 1454=170, 1455=129, 1456=179, 1457=4, 1458=129, 1459=176, 1460=74, 1461=104, 1462=58, 1463=13, 1464=139, 1465=125, 1466=186, 1467=144, 1468=135, 1469=74, 1470=21, 1471=184, 1472=214, 1473=105, 1474=71, 1475=20, 1476=189, 1477=182, 1478=11, 1479=237, 1480=153, 1481=6, 1482=163, 1483=59, 1484=113, 1485=39, 1486=131, 1487=242, 1488=46, 1489=93, 1490=38, 1491=41, 1492=165, 1493=55, 1494=112, 1495=49, 1496=220, 1497=155, 1498=115, 1499=232, 1500=113, 1501=14, 1502=100, 1503=88, 1504=11, 1505=162, 1506=243, 1507=15, 1508=179, 1509=19, 1510=93, 1511=171, 1512=45, 1513=147, 1514=187, 1515=227, 1516=100, 1517=61, 1518=115, 1519=102, 1520=117, 1521=216, 1522=238, 1523=45, 1524=230, 1525=220, 1526=27, 1527=223, 1528=41, 1529=81, 1530=124, 1531=80, 1532=15, 1533=3, 1534=178, 1535=217, 1536=163, 1537=21, 1538=81, 1539=15, 1540=183, 1541=214, 1542=157, 1543=214, 1544=20, 1545=195, 1546=53, 1547=181, 1548=222, 1549=161, 1550=57, 1551=117, 1552=36, 1553=248, 1554=99, 1555=192, 1556=164, 1557=199, 1558=110, 1559=177, 1560=105, 1561=155, 1562=3, 1563=206, 1564=205, 1565=91, 1566=191, 1567=0, 1568=0, 1569=24, 1570=47, 1571=4, 1572=79, 1573=210, 1574=166, 1575=246, 1576=195, 1577=184, 1578=32, 1579=254, 1580=38, 1581=126, 1582=113, 1583=34, 1584=250, 1585=244, 1586=171, 1587=248, 1588=4, 1589=90, 1590=134, 1591=190, 1592=143, 1593=5, 1594=159, 1595=202, 1596=80, 1597=171, 1598=145, 1599=167, 1600=194, 1601=136, 1602=70, 1603=74, 1604=156, 1605=236, 1606=104, 1607=117, 1608=64, 1609=201, 1610=230, 1611=233, 1612=208, 1613=110, 1614=52, 1615=12, 1616=245, 1617=199, 1618=99, 1619=156, 1620=35, 1621=2, 1622=32, 1623=200, 1624=214, 1625=92, 1626=235, 1627=52, 1628=74, 1629=155, 1630=47, 1631=207, 1632=97, 1633=199, 1634=130, 1635=195, list=[web.liferay.com:443::::::::], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, parser=null, $ref=$, read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true, _idleNext=null, _idlePrev=null, _idleTimeout=-1, $ref=$["socket"], httpVersionMajor=1, httpVersionMinor=1, httpVersion=1.1, complete=true, date=Wed, 27 Jul 2016 13:29:05 GMT, server=Apache, x-content-type-options=nosniff, x-frame-options=SAMEORIGIN, x-xss-protection=1; mode=block, set-cookie=[JSESSIONID=lrdcom-vm-52~314A82FC953687A7437AC0DE233D2225.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:05 GMT; Path=/; Secure], cache-control=private, no-cache, no-store, must-revalidate, content-length=3325, connection=close, content-type=text/javascript;charset=UTF-8, rawHeaders=[Date, Wed, 27 Jul 2016 13:29:05 GMT, Server, Apache, X-Content-Type-Options, nosniff, X-Frame-Options, SAMEORIGIN, X-XSS-Protection, 1; mode=block, Set-Cookie, JSESSIONID=lrdcom-vm-52~314A82FC953687A7437AC0DE233D2225.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, Set-Cookie, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:05 GMT; Path=/; Secure, Cache-Control, private, no-cache, no-store, must-revalidate, Content-Length, 3325, Connection, close, Content-Type, text/javascript;charset=UTF-8], , rawTrailers=[], upgrade=false, url=, method=null, statusCode=200, statusMessage=OK, $ref=$["socket"], _consuming=true, _dumped=false, $ref=$["socket"]["_httpMessage"], domain=null, error=function () { [native code] }, complete=function () { [native code] }, pipe=function (src) {
    if (self.ntick && self._started) {
      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))
    }
    self.src = src
    if (isReadStream(src)) {
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', mime.lookup(src.path))
      }
    } else {
      if (src.headers) {
        for (var i in src.headers) {
          if (!self.hasHeader(i)) {
            self.setHeader(i, src.headers[i])
          }
        }
      }
      if (self._json && !self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json')
      }
      if (src.method && !self.explicitMethod) {
        self.method = src.method
      }
    }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
  }, data=function (chunk) {
    if (Buffer.isBuffer(chunk)) {
      buffer.append(chunk)
    } else {
      strings.push(chunk)
    }
  }, end=function () {
    debug('end event', self.uri.href)
    if (self._aborted) {
      debug('aborted', self.uri.href)
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
      return
    }

    if (buffer.length) {
      debug('has body', self.uri.href, buffer.length)
      if (self.encoding === null) {
        // response.body = buffer
        // can't move to this until https://github.com/rvagg/bl/issues/13
        response.body = buffer.slice()
      } else {
        response.body = buffer.toString(self.encoding)
      }
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
    } else if (strings.length) {
      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
        strings[0] = strings[0].substring(1)
      }
      response.body = strings.join('')
    }

    if (self._json) {
      try {
        response.body = JSON.parse(response.body, self._jsonReviver)
      } catch (e) {
        debug('invalid JSON received', self.uri.href)
      }
    }
    debug('emitting complete', self.uri.href)
    if (typeof response.body === 'undefined' && !self._json) {
      response.body = self.encoding === null ? new Buffer(0) : ''
    }
    self.emit('complete', response, response.body)
  }, _eventsCount=5, _maxListeners=undefined, body={"$article = /journalarticle/get-article":{"groupId":"67510365","articleId":"77062063","$update = /journalarticle/update-article":{"@version":"$article.version","groupId":"67510365","articleId":"77062063","content":"<?xml version=\"1.0\"?>\n<root available-locales=\"en_US\" default-locale=\"en_US\">\n  <static-content language-id=\"en_US\">/* text and background */ /* border */  /* text and agenda header*/ /* text*/ /* number text*/  /* border, agenda day selected */ /* agenda day*/\n\n\n.banner  {\n    text-align: center;\n    background: url(/documents/67510365/77056610//MC16-Mobile-Banner-img-1-1.png) no-repeat center center;\n    background-size: 100%;\n    padding-bottom: 95%;\n    position: relative\n}\n.banner__desktoplogo {\n    display: none;\n}\n\n.banner__mobilelogo, .banner__desktoplogo {\n   position:absolute;\n    top:50%;\n    bottom:50%;\n    transform: translateX( -50%) translateY(-50%);\n    -webkit-transform:  translateX( -50%) translateY(-50%);\n    width: 70%;\n    height: 70%;\n}\n\n@media (min-width: 771px)  {\n\n\n    .banner  {\n        background: url(/documents/67510365/77056610//MC16-Banner-img-1-1_70percent.png) no-repeat center center;\n        background-size: 100%;\n        padding-bottom: 37%\n    }\n\n\n    .banner__mobilelogo  {\n        display: none\n    }\n\n\n    .banner__desktoplogo  {\n        display: inline\n    }\n}\n\n</static-content>\n</root>","serviceContext.scopeGroupId":"67510365"}}}, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, accept=application/json, content-type=application/json, content-length=1456, callback=function () {
      if (self._callbackCalled) {
        return // Print a warning maybe?
      }
      self._callbackCalled = true
      self._callback.apply(self, arguments)
    }, method=POST, readable=true, writable=true, explicitMethod=true, $ref=$["request"], stringify=function (object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        objKeys = filter = options.filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
    }

    return keys.join(delimiter);
}, parse=function (str, opts) {
    var options = opts || {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj, options);
    }

    return Utils.compact(obj);
}, useQuerystring=undefined, , , $ref=$["request"], hasAuth=false, sentAuth=false, bearerToken=null, user=null, pass=null, $ref=$["request"], params=null, $ref=$["request"], boundary=88a1b096-8c67-4f48-a915-0a42e48b9e8e, chunked=false, body=null, $ref=$["request"], followRedirect=true, followRedirects=true, followAllRedirects=false, allowRedirect=function () {return true}, maxRedirects=10, redirects=[], redirectsFollowed=0, removeRefererHeader=false, $ref=$["request"], proxyHeaderWhiteList=[accept, accept-charset, accept-encoding, accept-language, accept-ranges, cache-control, content-encoding, content-language, content-location, content-md5, content-range, content-type, connection, date, expect, max-forwards, pragma, referer, te, user-agent, via], proxyHeaderExclusiveList=[], setHeader=function (key, value, clobber) {
    if (typeof value === 'undefined') return
    return c.set(key, value, clobber)
  }, hasHeader=function (key) {
    return c.has(key)
  }, getHeader=function (key) {
    return c.get(key)
  }, removeHeader=function (key) {
    return c.del(key)
  }, localAddress=undefined, , dests=[], __isRequestRequest=true, _callback=function (err, httpResponse, body) {

            logger.silly("httpResponse: ", httpResponse);
            logger.debug("body: " + body);

            if (err) {
                logger.error(err);
                throw err;
            } else if (httpResponse && httpResponse.statusCode && (httpResponse.statusCode != 200)) {
                logger.error("An error seems to have occurred. Response Code " + httpResponse.statusCode, body);
                var errorobj = {
                    statusCode: httpResponse.statusCode,
                    body: body
                };
                throw errorobj;
            }
            else {
                if (body && body.exception) {
                    logger.error("An exception occurred: " + body.exception);
                    throw body.exception;
                } else { callback(body) }
            }
        }, protocol=https:, slashes=true, auth=null, host=web.liferay.com, port=443, hostname=web.liferay.com, hash=null, search=null, query=null, pathname=/api/secure/jsonws/invoke, path=/api/secure/jsonws/invoke, href=https://web.liferay.com/api/secure/jsonws/invoke, proxy=null, tunnel=true, setHost=true, originalCookieHeader=undefined, _disableCookies=true, _jar=undefined, port=443, host=web.liferay.com, path=/api/secure/jsonws/invoke, _json=true, Server=function Server(opts, requestListener) {
  if (!(this instanceof Server)) return new Server(opts, requestListener);

  if (process.features.tls_npn && !opts.NPNProtocols) {
    opts.NPNProtocols = ['http/1.1', 'http/1.0'];
  }

  tls.Server.call(this, opts, http._connectionListener);

  this.httpAllowHalfOpen = false;

  if (requestListener) {
    this.addListener('request', requestListener);
  }

  this.addListener('clientError', function(err, conn) {
    conn.destroy();
  });

  this.timeout = 2 * 60 * 1000;
}, createServer=function (opts, requestListener) {
  return new Server(opts, requestListener);
}, $ref=$["socket"]["_httpMessage"]["agent"], Agent=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, request=function (options, cb) {
  if (typeof options === 'string') {
    options = url.parse(options);
  } else {
    options = util._extend({}, options);
  }
  options._defaultAgent = globalAgent;
  return http.request(options, cb);
}, get=function (options, cb) {
  var req = exports.request(options, cb);
  req.end();
  return req;
}, agentClass=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, $ref=$["socket"]["_httpMessage"]["agent"], _started=true, href=https://web.liferay.com/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"], ntick=true, $ref=$, originalHost=web.liferay.com, originalHostHeaderName=host, $ref=$, _destdata=true, _ended=true, _callbackCalled=true, toJSON=function responseToJSON() {
  var self = this
  return {
    statusCode: self.statusCode,
    body: self.body,
    headers: self.headers,
    request: requestToJSON.call(self.request)
  }
}, $ref=$["headers"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, articleId=77062063, classNameId=0, classPK=0, companyId=1, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[/* text and background */ /* border */  /* text and agenda header*/ /* text*/ /* number text*/  /* border, agenda day selected */ /* agenda day*/


.banner  {
    text-align: center;
    background: url(/documents/67510365/77056610//MC16-Mobile-Banner-img-1-1.png) no-repeat center center;
    background-size: 100%;
    padding-bottom: 95%;
    position: relative
}
.banner__desktoplogo {
    display: none;
}

.banner__mobilelogo, .banner__desktoplogo {
   position:absolute;
    top:50%;
    bottom:50%;
    transform: translateX( -50%) translateY(-50%);
    -webkit-transform:  translateX( -50%) translateY(-50%);
    width: 70%;
    height: 70%;
}

@media (min-width: 771px)  {


    .banner  {
        background: url(/documents/67510365/77056610//MC16-Banner-img-1-1_70percent.png) no-repeat center center;
        background-size: 100%;
        padding-bottom: 37%
    }


    .banner__mobilelogo  {
        display: none
    }


    .banner__desktoplogo  {
        display: inline
    }
}

]]></static-content>
</root>, createDate=1469626145983, description=, descriptionCurrentValue=, displayDate=1469625780000, expirationDate=null, groupId=67510365, id=77062217, indexable=true, layoutUuid=, modifiedDate=1469626146025, resourcePrimKey=77062065, reviewDate=null, smallImage=false, smallImageId=77062066, smallImageURL=, status=0, statusByUserId=66748356, statusByUserName=Allen Ziegenfus, statusDate=1469626146025, structureId=, templateId=, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf Styles -- /web/events2016/modconf</Title></root>, titleCurrentValue=modconf Styles -- /web/events2016/modconf, type=general, urlTitle=modconf-styles-web-events2016-modconf, userId=66748356, userName=Allen Ziegenfus, uuid=f9418fae-ba55-4902-8d65-dea0068d4190, version=1.1, urlTitle=modconf-styles-web-events2016-modconf, indexable=true, classNameId=0, layoutUuid=, statusDate=1469625807988, smallImageId=77062066, type=general, articleId=77062063, version=1, id=77062064, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf Styles -- /web/events2016/modconf</Title></root>, description=, userId=66748356, userName=Allen Ziegenfus, smallImage=false, createDate=1469625807810, titleCurrentValue=modconf Styles -- /web/events2016/modconf, displayDate=1469625780000, smallImageURL=, expirationDate=null, status=0, statusByUserName=Allen Ziegenfus, reviewDate=null, modifiedDate=1469625807988, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>, templateId=, groupId=67510365, descriptionCurrentValue=, resourcePrimKey=77062065, classPK=0, structureId=, statusByUserId=66748356, companyId=1, uuid=6a5b6392-d82e-41e6-81db-ddcfa0036a12
2016-07-27T13:29:06.531Z - debug: body: [object Object]
2016-07-27T13:29:06.531Z - debug: body: <?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>
2016-07-27T13:29:07.406Z - silly: httpResponse:  objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=true, endEmitted=true, reading=false, sync=false, needReadable=false, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=false, decoder=null, encoding=null, readable=false, domain=null, end=[function responseOnEnd() {
  var res = this;
  var req = res.req;
  var socket = req.socket;

  if (!req.shouldKeepAlive) {
    if (socket.writable) {
      debug('AGENT socket.destroySoon()');
      socket.destroySoon();
    }
    assert(!socket.writable);
  } else {
    debug('AGENT socket keep-alive');
    if (req.timeoutCb) {
      socket.setTimeout(0, req.timeoutCb);
      req.timeoutCb = null;
    }
    socket.removeListener('close', socketCloseListener);
    socket.removeListener('error', socketErrorListener);
    socket.once('error', freeSocketErrorListener);
    // Mark this socket as available, AFTER user-added end
    // handlers have a chance to run.
    process.nextTick(emitFreeNT, socket);
  }
}, function () {
    if (self.timing) {
      self.elapsedTime += (new Date().getTime() - self.startTime)
      debug('elapsed time', self.elapsedTime)
      response.elapsedTime = self.elapsedTime
    }
    debug('response end', self.uri.href, response.statusCode, response.headers)
  }, function () {
      self._ended = true
    }, function (chunk) {
      self.emit('end', chunk)
    }], close=[function () {
      if (!self._ended) {
        self.response.emit('end')
      }
    }, function () {self.emit('close')}], data=function (chunk) {
      self._destdata = true
      self.emit('data', chunk)
    }, error=function (error) {
      self.emit('error', error)
    }, _eventsCount=4, _maxListeners=undefined, pipe=null, , singleUse=true, isServer=false, requestCert=true, rejectUnauthorized=true, session=undefined, NPNProtocols=undefined, requestOCSP=undefined, _secureEstablished=true, _securePending=false, _newSessionPending=false, _controlReleased=true, _SNICallback=null, servername=null, npnProtocol=undefined, authorized=true, authorizationError=null, encrypted=true, close=[function () {
    // Make sure we are not doing it on OpenSSL's stack
    setImmediate(destroySSL, this);
    res = null;
  }, function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }, function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }, function socketCloseListener() {
  var socket = this;
  var req = socket._httpMessage;
  debug('HTTP socket close');

  // Pull through final chunk, if anything is buffered.
  // the ondata function will handle it properly, and this
  // is a no-op if no final chunk remains.
  socket.read();

  // NOTE: It's important to get parser here, because it could be freed by
  // the `socketOnData`.
  var parser = socket.parser;
  req.emit('close');
  if (req.res && req.res.readable) {
    // Socket closed before we emitted 'end' below.
    req.res.emit('aborted');
    var res = req.res;
    res.on('end', function() {
      res.emit('close');
    });
    res.push(null);
  } else if (!req.res && !req.socket._hadError) {
    // This socket error fired before we started to
    // receive a response. The error needs to
    // fire on the request.
    req.emit('error', createHangUpError());
    req.socket._hadError = true;
  }

  // Too bad.  That output wasn't getting written.
  // This is pretty terrible that it doesn't raise an error.
  // Fixed better in v0.10
  if (req.output)
    req.output.length = 0;
  if (req.outputEncodings)
    req.outputEncodings.length = 0;

  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }
}], end=[function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }], finish=function onSocketFinish() {
  // If still connecting - defer handling 'finish' until 'connect' will happen
  if (this._connecting) {
    debug('osF: not yet connected');
    return this.once('connect', onSocketFinish);
  }

  debug('onSocketFinish');
  if (!this.readable || this._readableState.ended) {
    debug('oSF: ended, destroy', this._readableState);
    return this.destroy();
  }

  debug('oSF: not ended, call shutdown()');

  // otherwise, just shutdown, or destroy() if not possible
  if (!this._handle || !this._handle.shutdown)
    return this.destroy();

  var req = new ShutdownWrap();
  req.oncomplete = afterShutdown;
  req.handle = this._handle;
  var err = this._handle.shutdown(req);

  if (err)
    return this._destroy(errnoException(err, 'shutdown'));
}, _socketEnd=function onSocketEnd() {
  // XXX Should not have to do as much crap in this function.
  // ended should already be true, since this is called *after*
  // the EOF errno and onread has eof'ed
  debug('onSocketEnd', this._readableState);
  this._readableState.ended = true;
  if (this._readableState.endEmitted) {
    this.readable = false;
    maybeDestroy(this);
  } else {
    this.once('end', function() {
      this.readable = false;
      maybeDestroy(this);
    });
    this.read(0);
  }

  if (!this.allowHalfOpen) {
    this.write = writeAfterFIN;
    this.destroySoon();
  }
}, secure=function () {
    var verifyError = socket._handle.verifyError();

    // Verify that server's identity matches it's certificate's names
    // Unless server has resumed our existing session
    if (!verifyError && !socket.isSessionReused()) {
      var cert = socket.getPeerCertificate();
      verifyError = options.checkServerIdentity(hostname, cert);
    }

    if (verifyError) {
      socket.authorized = false;
      socket.authorizationError = verifyError.code || verifyError.message;

      if (options.rejectUnauthorized) {
        socket.destroy(verifyError);
        return;
      } else {
        socket.emit('secureConnect');
      }
    } else {
      socket.authorized = true;
      socket.emit('secureConnect');
    }

    // Uncork incoming data
    socket.removeListener('end', onHangUp);
  }, free=function onFree() {
    self.emit('free', s, options);
  }, agentRemove=function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }, drain=function ondrain() {
  if (this._httpMessage) this._httpMessage.emit('drain');
}, error=function socketErrorListener(err) {
  var socket = this;
  var req = socket._httpMessage;
  debug('SOCKET ERROR:', err.message, err.stack);

  if (req) {
    req.emit('error', err);
    // For Safety. Some additional errors might fire later on
    // and we need to make sure we don't double-fire the error event.
    req.socket._hadError = true;
  }

  // Handle any pending data
  socket.read();

  var parser = socket.parser;
  if (parser) {
    parser.finish();
    freeParser(parser, req, socket);
  }

  // Ensure that no further data will come out of the socket
  socket.removeListener('data', socketOnData);
  socket.removeListener('end', socketOnEnd);
  socket.destroy();
}, _eventsCount=9, _connecting=false, _hadError=false, _handle=null, _parent=null, _host=web.liferay.com, objectMode=false, highWaterMark=16384, buffer=[], length=0, pipes=null, pipesCount=0, flowing=true, ended=false, endEmitted=false, reading=true, sync=false, needReadable=true, emittedReadable=false, readableListening=false, resumeScheduled=false, defaultEncoding=utf8, ranOut=false, awaitDrain=0, readingMore=true, decoder=null, encoding=null, readable=false, domain=null, _maxListeners=undefined, objectMode=false, highWaterMark=16384, needDrain=false, ending=true, ended=true, finished=true, decodeStrings=false, defaultEncoding=utf8, length=0, writing=false, corked=0, sync=false, bufferProcessing=false, onwrite=function (er) {
    onwrite(stream, er);
  }, writecb=null, writelen=0, bufferedRequest=null, lastBufferedRequest=null, pendingcb=0, prefinished=true, errorEmitted=false, bufferedRequestCount=0, next=null, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, entry=null, finish=(err) => {
    var entry = this.entry;
    this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = this;
    } else {
      state.corkedRequestsFree = this;
    }
  }, writable=false, allowHalfOpen=false, destroyed=true, bytesRead=20549, _bytesDispatched=18387, _sockname=null, _pendingData=null, _pendingEncoding=, server=undefined, _server=null, ssl=null, _requestCert=true, _rejectUnauthorized=true, parser=null, domain=null, socket=[function (socket) {
    self.emit('socket', socket)
  }], response=function () { [native code] }, error=function () { [native code] }, drain=function () {
    self.emit('drain')
  }, _eventsCount=4, _maxListeners=undefined, output=[], outputEncodings=[], outputCallbacks=[], outputSize=0, writable=true, _last=true, chunkedEncoding=false, shouldKeepAlive=false, useChunkedEncodingByDefault=true, sendDate=false, content-length=false, _contentLength=null, _hasBody=true, _trailer=, finished=true, _headerSent=true, $ref=$["socket"], $ref=$["socket"], _header=POST /api/secure/jsonws/invoke HTTP/1.1
Authorization: Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==
host: web.liferay.com
accept: application/json
content-type: application/json
content-length: 18138
Connection: close

, authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, host=web.liferay.com, accept=application/json, content-type=application/json, content-length=18138, authorization=Authorization, host=host, accept=accept, content-type=content-type, content-length=content-length, _onPendingData=null, domain=null, free=function (socket, options) {
    var name = self.getName(options);
    debug('agent.on(free)', name);

    if (!socket.destroyed &&
        self.requests[name] && self.requests[name].length) {
      self.requests[name].shift().onSocket(socket);
      if (self.requests[name].length === 0) {
        // don't leak
        delete self.requests[name];
      }
    } else {
      // If there are no pending requests, then put it in
      // the freeSockets pool, but only if we're allowed to do so.
      var req = socket._httpMessage;
      if (req &&
          req.shouldKeepAlive &&
          !socket.destroyed &&
          self.keepAlive) {
        var freeSockets = self.freeSockets[name];
        var freeLen = freeSockets ? freeSockets.length : 0;
        var count = freeLen;
        if (self.sockets[name])
          count += self.sockets[name].length;

        if (count > self.maxSockets || freeLen >= self.maxFreeSockets) {
          socket.destroy();
        } else {
          freeSockets = freeSockets || [];
          self.freeSockets[name] = freeSockets;
          socket.setKeepAlive(true, self.keepAliveMsecs);
          socket.unref();
          socket._httpMessage = null;
          self.removeSocket(socket, options);
          freeSockets.push(socket);
        }
      } else {
        socket.destroy();
      }
    }
  }, _eventsCount=1, _maxListeners=undefined, defaultPort=443, protocol=https:, path=null, , web.liferay.com:443::::::::=[$ref=$["socket"]], , keepAliveMsecs=1000, keepAlive=false, maxSockets=Infinity, maxFreeSockets=256, maxCachedSessions=100, 0=48, 1=130, 2=6, 3=96, 4=2, 5=1, 6=1, 7=2, 8=2, 9=3, 10=3, 11=4, 12=2, 13=192, 14=48, 15=4, 16=32, 17=23, 18=17, 19=15, 20=103, 21=228, 22=33, 23=139, 24=31, 25=14, 26=160, 27=43, 28=29, 29=74, 30=3, 31=186, 32=32, 33=57, 34=80, 35=180, 36=72, 37=79, 38=91, 39=58, 40=72, 41=251, 42=64, 43=139, 44=48, 45=67, 46=207, 47=245, 48=17, 49=4, 50=48, 51=227, 52=235, 53=50, 54=71, 55=210, 56=106, 57=68, 58=226, 59=172, 60=67, 61=84, 62=123, 63=27, 64=117, 65=136, 66=53, 67=26, 68=216, 69=197, 70=214, 71=160, 72=127, 73=37, 74=31, 75=42, 76=18, 77=222, 78=31, 79=14, 80=117, 81=101, 82=162, 83=47, 84=220, 85=197, 86=6, 87=203, 88=113, 89=174, 90=227, 91=70, 92=125, 93=226, 94=211, 95=229, 96=223, 97=68, 98=109, 99=161, 100=6, 101=2, 102=4, 103=87, 104=152, 105=183, 106=33, 107=162, 108=4, 109=2, 110=2, 111=1, 112=44, 113=163, 114=130, 115=5, 116=28, 117=48, 118=130, 119=5, 120=24, 121=48, 122=130, 123=4, 124=0, 125=160, 126=3, 127=2, 128=1, 129=2, 130=2, 131=16, 132=13, 133=132, 134=28, 135=24, 136=148, 137=3, 138=70, 139=69, 140=60, 141=112, 142=134, 143=212, 144=166, 145=231, 146=87, 147=119, 148=48, 149=13, 150=6, 151=9, 152=42, 153=134, 154=72, 155=134, 156=247, 157=13, 158=1, 159=1, 160=11, 161=5, 162=0, 163=48, 164=77, 165=49, 166=11, 167=48, 168=9, 169=6, 170=3, 171=85, 172=4, 173=6, 174=19, 175=2, 176=85, 177=83, 178=49, 179=21, 180=48, 181=19, 182=6, 183=3, 184=85, 185=4, 186=10, 187=19, 188=12, 189=68, 190=105, 191=103, 192=105, 193=67, 194=101, 195=114, 196=116, 197=32, 198=73, 199=110, 200=99, 201=49, 202=39, 203=48, 204=37, 205=6, 206=3, 207=85, 208=4, 209=3, 210=19, 211=30, 212=68, 213=105, 214=103, 215=105, 216=67, 217=101, 218=114, 219=116, 220=32, 221=83, 222=72, 223=65, 224=50, 225=32, 226=83, 227=101, 228=99, 229=117, 230=114, 231=101, 232=32, 233=83, 234=101, 235=114, 236=118, 237=101, 238=114, 239=32, 240=67, 241=65, 242=48, 243=30, 244=23, 245=13, 246=49, 247=52, 248=49, 249=49, 250=49, 251=57, 252=48, 253=48, 254=48, 255=48, 256=48, 257=48, 258=90, 259=23, 260=13, 261=49, 262=56, 263=48, 264=49, 265=50, 266=50, 267=49, 268=50, 269=48, 270=48, 271=48, 272=48, 273=90, 274=48, 275=104, 276=49, 277=11, 278=48, 279=9, 280=6, 281=3, 282=85, 283=4, 284=6, 285=19, 286=2, 287=85, 288=83, 289=49, 290=19, 291=48, 292=17, 293=6, 294=3, 295=85, 296=4, 297=8, 298=19, 299=10, 300=67, 301=97, 302=108, 303=105, 304=102, 305=111, 306=114, 307=110, 308=105, 309=97, 310=49, 311=20, 312=48, 313=18, 314=6, 315=3, 316=85, 317=4, 318=7, 319=19, 320=11, 321=68, 322=105, 323=97, 324=109, 325=111, 326=110, 327=100, 328=32, 329=66, 330=97, 331=114, 332=49, 333=22, 334=48, 335=20, 336=6, 337=3, 338=85, 339=4, 340=10, 341=19, 342=13, 343=76, 344=105, 345=102, 346=101, 347=114, 348=97, 349=121, 350=44, 351=32, 352=73, 353=110, 354=99, 355=46, 356=49, 357=22, 358=48, 359=20, 360=6, 361=3, 362=85, 363=4, 364=3, 365=12, 366=13, 367=42, 368=46, 369=108, 370=105, 371=102, 372=101, 373=114, 374=97, 375=121, 376=46, 377=99, 378=111, 379=109, 380=48, 381=130, 382=1, 383=34, 384=48, 385=13, 386=6, 387=9, 388=42, 389=134, 390=72, 391=134, 392=247, 393=13, 394=1, 395=1, 396=1, 397=5, 398=0, 399=3, 400=130, 401=1, 402=15, 403=0, 404=48, 405=130, 406=1, 407=10, 408=2, 409=130, 410=1, 411=1, 412=0, 413=171, 414=253, 415=224, 416=65, 417=127, 418=225, 419=99, 420=85, 421=58, 422=6, 423=204, 424=254, 425=35, 426=12, 427=26, 428=154, 429=62, 430=2, 431=104, 432=214, 433=141, 434=116, 435=134, 436=68, 437=169, 438=20, 439=185, 440=210, 441=196, 442=105, 443=156, 444=174, 445=236, 446=153, 447=52, 448=58, 449=94, 450=116, 451=208, 452=149, 453=227, 454=194, 455=122, 456=140, 457=196, 458=138, 459=0, 460=97, 461=53, 462=27, 463=59, 464=140, 465=47, 466=134, 467=34, 468=187, 469=182, 470=191, 471=2, 472=249, 473=59, 474=36, 475=0, 476=217, 477=160, 478=254, 479=56, 480=253, 481=90, 482=46, 483=237, 484=114, 485=1, 486=135, 487=2, 488=212, 489=144, 490=255, 491=190, 492=176, 493=141, 494=151, 495=216, 496=155, 497=132, 498=109, 499=222, 500=109, 501=122, 502=169, 503=171, 504=86, 505=137, 506=71, 507=249, 508=123, 509=224, 510=167, 511=240, 512=104, 513=50, 514=129, 515=27, 516=233, 517=11, 518=96, 519=93, 520=201, 521=120, 522=125, 523=255, 524=108, 525=121, 526=53, 527=254, 528=88, 529=168, 530=98, 531=195, 532=37, 533=112, 534=145, 535=44, 536=114, 537=230, 538=159, 539=116, 540=241, 541=179, 542=71, 543=145, 544=219, 545=172, 546=116, 547=123, 548=52, 549=2, 550=169, 551=251, 552=18, 553=139, 554=52, 555=116, 556=171, 557=91, 558=49, 559=85, 560=90, 561=212, 562=241, 563=134, 564=174, 565=13, 566=56, 567=70, 568=82, 569=249, 570=149, 571=25, 572=53, 573=173, 574=224, 575=141, 576=49, 577=208, 578=71, 579=104, 580=173, 581=178, 582=74, 583=231, 584=70, 585=55, 586=72, 587=173, 588=186, 589=253, 590=255, 591=27, 592=158, 593=120, 594=212, 595=255, 596=53, 597=151, 598=220, 599=59, 600=148, 601=118, 602=68, 603=33, 604=150, 605=240, 606=13, 607=100, 608=100, 609=246, 610=67, 611=253, 612=67, 613=225, 614=162, 615=170, 616=206, 617=107, 618=170, 619=122, 620=254, 621=219, 622=228, 623=25, 624=160, 625=206, 626=147, 627=199, 628=243, 629=116, 630=174, 631=2, 632=106, 633=227, 634=237, 635=131, 636=197, 637=187, 638=228, 639=84, 640=47, 641=249, 642=84, 643=204, 644=108, 645=68, 646=29, 647=164, 648=102, 649=27, 650=69, 651=30, 652=154, 653=147, 654=184, 655=213, 656=218, 657=87, 658=150, 659=245, 660=119, 661=226, 662=131, 663=33, 664=30, 665=255, 666=24, 667=6, 668=173, 669=2, 670=3, 671=1, 672=0, 673=1, 674=163, 675=130, 676=1, 677=215, 678=48, 679=130, 680=1, 681=211, 682=48, 683=31, 684=6, 685=3, 686=85, 687=29, 688=35, 689=4, 690=24, 691=48, 692=22, 693=128, 694=20, 695=15, 696=128, 697=97, 698=28, 699=130, 700=49, 701=97, 702=213, 703=47, 704=40, 705=231, 706=141, 707=70, 708=56, 709=180, 710=44, 711=225, 712=198, 713=217, 714=226, 715=48, 716=29, 717=6, 718=3, 719=85, 720=29, 721=14, 722=4, 723=22, 724=4, 725=20, 726=73, 727=76, 728=173, 729=240, 730=48, 731=19, 732=96, 733=68, 734=38, 735=216, 736=216, 737=74, 738=207, 739=120, 740=220, 741=215, 742=249, 743=0, 744=157, 745=255, 746=48, 747=37, 748=6, 749=3, 750=85, 751=29, 752=17, 753=4, 754=30, 755=48, 756=28, 757=130, 758=13, 759=42, 760=46, 761=108, 762=105, 763=102, 764=101, 765=114, 766=97, 767=121, 768=46, 769=99, 770=111, 771=109, 772=130, 773=11, 774=108, 775=105, 776=102, 777=101, 778=114, 779=97, 780=121, 781=46, 782=99, 783=111, 784=109, 785=48, 786=14, 787=6, 788=3, 789=85, 790=29, 791=15, 792=1, 793=1, 794=255, 795=4, 796=4, 797=3, 798=2, 799=5, 800=160, 801=48, 802=29, 803=6, 804=3, 805=85, 806=29, 807=37, 808=4, 809=22, 810=48, 811=20, 812=6, 813=8, 814=43, 815=6, 816=1, 817=5, 818=5, 819=7, 820=3, 821=1, 822=6, 823=8, 824=43, 825=6, 826=1, 827=5, 828=5, 829=7, 830=3, 831=2, 832=48, 833=107, 834=6, 835=3, 836=85, 837=29, 838=31, 839=4, 840=100, 841=48, 842=98, 843=48, 844=47, 845=160, 846=45, 847=160, 848=43, 849=134, 850=41, 851=104, 852=116, 853=116, 854=112, 855=58, 856=47, 857=47, 858=99, 859=114, 860=108, 861=51, 862=46, 863=100, 864=105, 865=103, 866=105, 867=99, 868=101, 869=114, 870=116, 871=46, 872=99, 873=111, 874=109, 875=47, 876=115, 877=115, 878=99, 879=97, 880=45, 881=115, 882=104, 883=97, 884=50, 885=45, 886=103, 887=51, 888=46, 889=99, 890=114, 891=108, 892=48, 893=47, 894=160, 895=45, 896=160, 897=43, 898=134, 899=41, 900=104, 901=116, 902=116, 903=112, 904=58, 905=47, 906=47, 907=99, 908=114, 909=108, 910=52, 911=46, 912=100, 913=105, 914=103, 915=105, 916=99, 917=101, 918=114, 919=116, 920=46, 921=99, 922=111, 923=109, 924=47, 925=115, 926=115, 927=99, 928=97, 929=45, 930=115, 931=104, 932=97, 933=50, 934=45, 935=103, 936=51, 937=46, 938=99, 939=114, 940=108, 941=48, 942=66, 943=6, 944=3, 945=85, 946=29, 947=32, 948=4, 949=59, 950=48, 951=57, 952=48, 953=55, 954=6, 955=9, 956=96, 957=134, 958=72, 959=1, 960=134, 961=253, 962=108, 963=1, 964=1, 965=48, 966=42, 967=48, 968=40, 969=6, 970=8, 971=43, 972=6, 973=1, 974=5, 975=5, 976=7, 977=2, 978=1, 979=22, 980=28, 981=104, 982=116, 983=116, 984=112, 985=115, 986=58, 987=47, 988=47, 989=119, 990=119, 991=119, 992=46, 993=100, 994=105, 995=103, 996=105, 997=99, 998=101, 999=114, 1000=116, 1001=46, 1002=99, 1003=111, 1004=109, 1005=47, 1006=67, 1007=80, 1008=83, 1009=48, 1010=124, 1011=6, 1012=8, 1013=43, 1014=6, 1015=1, 1016=5, 1017=5, 1018=7, 1019=1, 1020=1, 1021=4, 1022=112, 1023=48, 1024=110, 1025=48, 1026=36, 1027=6, 1028=8, 1029=43, 1030=6, 1031=1, 1032=5, 1033=5, 1034=7, 1035=48, 1036=1, 1037=134, 1038=24, 1039=104, 1040=116, 1041=116, 1042=112, 1043=58, 1044=47, 1045=47, 1046=111, 1047=99, 1048=115, 1049=112, 1050=46, 1051=100, 1052=105, 1053=103, 1054=105, 1055=99, 1056=101, 1057=114, 1058=116, 1059=46, 1060=99, 1061=111, 1062=109, 1063=48, 1064=70, 1065=6, 1066=8, 1067=43, 1068=6, 1069=1, 1070=5, 1071=5, 1072=7, 1073=48, 1074=2, 1075=134, 1076=58, 1077=104, 1078=116, 1079=116, 1080=112, 1081=58, 1082=47, 1083=47, 1084=99, 1085=97, 1086=99, 1087=101, 1088=114, 1089=116, 1090=115, 1091=46, 1092=100, 1093=105, 1094=103, 1095=105, 1096=99, 1097=101, 1098=114, 1099=116, 1100=46, 1101=99, 1102=111, 1103=109, 1104=47, 1105=68, 1106=105, 1107=103, 1108=105, 1109=67, 1110=101, 1111=114, 1112=116, 1113=83, 1114=72, 1115=65, 1116=50, 1117=83, 1118=101, 1119=99, 1120=117, 1121=114, 1122=101, 1123=83, 1124=101, 1125=114, 1126=118, 1127=101, 1128=114, 1129=67, 1130=65, 1131=46, 1132=99, 1133=114, 1134=116, 1135=48, 1136=12, 1137=6, 1138=3, 1139=85, 1140=29, 1141=19, 1142=1, 1143=1, 1144=255, 1145=4, 1146=2, 1147=48, 1148=0, 1149=48, 1150=13, 1151=6, 1152=9, 1153=42, 1154=134, 1155=72, 1156=134, 1157=247, 1158=13, 1159=1, 1160=1, 1161=11, 1162=5, 1163=0, 1164=3, 1165=130, 1166=1, 1167=1, 1168=0, 1169=198, 1170=244, 1171=225, 1172=126, 1173=83, 1174=64, 1175=246, 1176=61, 1177=136, 1178=153, 1179=130, 1180=46, 1181=194, 1182=153, 1183=233, 1184=221, 1185=159, 1186=85, 1187=240, 1188=35, 1189=168, 1190=46, 1191=223, 1192=223, 1193=227, 1194=172, 1195=155, 1196=143, 1197=144, 1198=131, 1199=11, 1200=40, 1201=251, 1202=172, 1203=60, 1204=178, 1205=28, 1206=60, 1207=2, 1208=118, 1209=88, 1210=20, 1211=116, 1212=229, 1213=41, 1214=162, 1215=52, 1216=51, 1217=47, 1218=152, 1219=98, 1220=196, 1221=175, 1222=43, 1223=81, 1224=202, 1225=95, 1226=47, 1227=90, 1228=86, 1229=219, 1230=241, 1231=34, 1232=162, 1233=248, 1234=179, 1235=211, 1236=215, 1237=168, 1238=163, 1239=137, 1240=252, 1241=192, 1242=202, 1243=215, 1244=173, 1245=104, 1246=245, 1247=121, 1248=85, 1249=110, 1250=94, 1251=206, 1252=56, 1253=213, 1254=180, 1255=250, 1256=118, 1257=70, 1258=75, 1259=53, 1260=113, 1261=86, 1262=151, 1263=193, 1264=75, 1265=176, 1266=143, 1267=42, 1268=83, 1269=234, 1270=23, 1271=10, 1272=46, 1273=1, 1274=33, 1275=100, 1276=13, 1277=201, 1278=164, 1279=119, 1280=12, 1281=209, 1282=45, 1283=112, 1284=225, 1285=35, 1286=180, 1287=226, 1288=248, 1289=11, 1290=228, 1291=74, 1292=115, 1293=144, 1294=229, 1295=11, 1296=203, 1297=225, 1298=87, 1299=171, 1300=18, 1301=86, 1302=68, 1303=7, 1304=57, 1305=48, 1306=4, 1307=41, 1308=10, 1309=140, 1310=49, 1311=107, 1312=145, 1313=194, 1314=192, 1315=234, 1316=163, 1317=30, 1318=122, 1319=166, 1320=87, 1321=145, 1322=142, 1323=135, 1324=243, 1325=143, 1326=188, 1327=163, 1328=68, 1329=158, 1330=221, 1331=54, 1332=116, 1333=77, 1334=166, 1335=69, 1336=96, 1337=147, 1338=84, 1339=220, 1340=75, 1341=147, 1342=161, 1343=128, 1344=218, 1345=35, 1346=218, 1347=79, 1348=76, 1349=41, 1350=214, 1351=157, 1352=191, 1353=46, 1354=119, 1355=74, 1356=33, 1357=25, 1358=61, 1359=45, 1360=44, 1361=255, 1362=117, 1363=126, 1364=58, 1365=88, 1366=187, 1367=213, 1368=164, 1369=189, 1370=120, 1371=154, 1372=11, 1373=156, 1374=243, 1375=123, 1376=255, 1377=7, 1378=220, 1379=110, 1380=95, 1381=17, 1382=229, 1383=122, 1384=73, 1385=214, 1386=157, 1387=10, 1388=42, 1389=19, 1390=132, 1391=18, 1392=20, 1393=199, 1394=45, 1395=184, 1396=10, 1397=60, 1398=139, 1399=74, 1400=139, 1401=85, 1402=22, 1403=186, 1404=250, 1405=46, 1406=100, 1407=136, 1408=34, 1409=32, 1410=162, 1411=135, 1412=188, 1413=237, 1414=124, 1415=51, 1416=112, 1417=226, 1418=211, 1419=141, 1420=29, 1421=74, 1422=152, 1423=244, 1424=120, 1425=164, 1426=2, 1427=4, 1428=0, 1429=166, 1430=17, 1431=4, 1432=15, 1433=119, 1434=101, 1435=98, 1436=46, 1437=108, 1438=105, 1439=102, 1440=101, 1441=114, 1442=97, 1443=121, 1444=46, 1445=99, 1446=111, 1447=109, 1448=169, 1449=4, 1450=2, 1451=2, 1452=1, 1453=44, 1454=170, 1455=129, 1456=179, 1457=4, 1458=129, 1459=176, 1460=74, 1461=104, 1462=58, 1463=13, 1464=139, 1465=125, 1466=186, 1467=144, 1468=135, 1469=74, 1470=21, 1471=184, 1472=214, 1473=105, 1474=71, 1475=20, 1476=189, 1477=182, 1478=11, 1479=237, 1480=153, 1481=6, 1482=163, 1483=59, 1484=113, 1485=39, 1486=131, 1487=242, 1488=46, 1489=93, 1490=38, 1491=41, 1492=165, 1493=55, 1494=112, 1495=49, 1496=220, 1497=155, 1498=115, 1499=232, 1500=113, 1501=14, 1502=100, 1503=88, 1504=11, 1505=162, 1506=243, 1507=15, 1508=179, 1509=19, 1510=93, 1511=171, 1512=45, 1513=147, 1514=187, 1515=227, 1516=100, 1517=61, 1518=115, 1519=102, 1520=117, 1521=216, 1522=238, 1523=45, 1524=230, 1525=220, 1526=27, 1527=223, 1528=41, 1529=81, 1530=124, 1531=80, 1532=15, 1533=3, 1534=178, 1535=217, 1536=163, 1537=21, 1538=81, 1539=15, 1540=183, 1541=214, 1542=157, 1543=214, 1544=20, 1545=195, 1546=53, 1547=181, 1548=222, 1549=161, 1550=57, 1551=117, 1552=36, 1553=248, 1554=99, 1555=192, 1556=164, 1557=199, 1558=110, 1559=177, 1560=105, 1561=155, 1562=3, 1563=206, 1564=205, 1565=91, 1566=191, 1567=0, 1568=0, 1569=24, 1570=47, 1571=4, 1572=79, 1573=210, 1574=166, 1575=246, 1576=195, 1577=184, 1578=32, 1579=254, 1580=38, 1581=126, 1582=113, 1583=34, 1584=250, 1585=244, 1586=171, 1587=248, 1588=4, 1589=90, 1590=134, 1591=190, 1592=143, 1593=5, 1594=159, 1595=202, 1596=80, 1597=171, 1598=145, 1599=167, 1600=194, 1601=136, 1602=70, 1603=74, 1604=156, 1605=236, 1606=104, 1607=117, 1608=64, 1609=201, 1610=230, 1611=233, 1612=208, 1613=110, 1614=52, 1615=12, 1616=245, 1617=199, 1618=99, 1619=156, 1620=35, 1621=2, 1622=32, 1623=200, 1624=214, 1625=92, 1626=235, 1627=52, 1628=74, 1629=155, 1630=47, 1631=207, 1632=97, 1633=199, 1634=130, 1635=195, list=[web.liferay.com:443::::::::], socketPath=undefined, method=POST, path=/api/secure/jsonws/invoke, parser=null, $ref=$, read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, _consuming=true, _idleNext=null, _idlePrev=null, _idleTimeout=-1, $ref=$["socket"], httpVersionMajor=1, httpVersionMinor=1, httpVersion=1.1, complete=true, date=Wed, 27 Jul 2016 13:29:06 GMT, server=Apache, x-content-type-options=nosniff, x-frame-options=SAMEORIGIN, x-xss-protection=1; mode=block, set-cookie=[JSESSIONID=lrdcom-vm-52~C3A7BF086D5F41CC16A9F318D60F181D.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:06 GMT; Path=/; Secure], cache-control=private, no-cache, no-store, must-revalidate, connection=close, transfer-encoding=chunked, content-type=text/javascript;charset=UTF-8, rawHeaders=[Date, Wed, 27 Jul 2016 13:29:06 GMT, Server, Apache, X-Content-Type-Options, nosniff, X-Frame-Options, SAMEORIGIN, X-XSS-Protection, 1; mode=block, Set-Cookie, JSESSIONID=lrdcom-vm-52~C3A7BF086D5F41CC16A9F318D60F181D.node-lrdcom-vm-52; Path=/; Secure; HttpOnly, Set-Cookie, GUEST_LANGUAGE_ID=en_US; Expires=Thu, 27-Jul-2017 13:29:06 GMT; Path=/; Secure, Cache-Control, private, no-cache, no-store, must-revalidate, Connection, close, Transfer-Encoding, chunked, Content-Type, text/javascript;charset=UTF-8], , rawTrailers=[], upgrade=false, url=, method=null, statusCode=200, statusMessage=OK, $ref=$["socket"], _consuming=true, _dumped=false, $ref=$["socket"]["_httpMessage"], domain=null, error=function () { [native code] }, complete=function () { [native code] }, pipe=function (src) {
    if (self.ntick && self._started) {
      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))
    }
    self.src = src
    if (isReadStream(src)) {
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', mime.lookup(src.path))
      }
    } else {
      if (src.headers) {
        for (var i in src.headers) {
          if (!self.hasHeader(i)) {
            self.setHeader(i, src.headers[i])
          }
        }
      }
      if (self._json && !self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json')
      }
      if (src.method && !self.explicitMethod) {
        self.method = src.method
      }
    }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
  }, data=function (chunk) {
    if (Buffer.isBuffer(chunk)) {
      buffer.append(chunk)
    } else {
      strings.push(chunk)
    }
  }, end=function () {
    debug('end event', self.uri.href)
    if (self._aborted) {
      debug('aborted', self.uri.href)
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
      return
    }

    if (buffer.length) {
      debug('has body', self.uri.href, buffer.length)
      if (self.encoding === null) {
        // response.body = buffer
        // can't move to this until https://github.com/rvagg/bl/issues/13
        response.body = buffer.slice()
      } else {
        response.body = buffer.toString(self.encoding)
      }
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffer.destroy()
    } else if (strings.length) {
      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
        strings[0] = strings[0].substring(1)
      }
      response.body = strings.join('')
    }

    if (self._json) {
      try {
        response.body = JSON.parse(response.body, self._jsonReviver)
      } catch (e) {
        debug('invalid JSON received', self.uri.href)
      }
    }
    debug('emitting complete', self.uri.href)
    if (typeof response.body === 'undefined' && !self._json) {
      response.body = self.encoding === null ? new Buffer(0) : ''
    }
    self.emit('complete', response, response.body)
  }, _eventsCount=5, _maxListeners=undefined, body={"$article = /journalarticle/get-article":{"groupId":"67510365","articleId":"77062078","$update = /journalarticle/update-article":{"@version":"$article.version","groupId":"67510365","articleId":"77062078","content":"<?xml version=\"1.0\"?>\n<root available-locales=\"en_US\" default-locale=\"en_US\">\n  <static-content language-id=\"en_US\"><![CDATA[<svg width=\"0\" height=\"0\" style=\"position:absolute\"><symbol viewBox=\"0 0 898.183 450.319\" id=\"Modular-Conf-Microsite-Logo-1-0\"><g fill=\"#FFF\"><path d=\"M24.026 438.593c-.164-3.566-.369-7.871-.328-11.604h-.123a147.361 147.361 0 0 1-3.279 10.578l-4.019 11.973h-3.895l-3.69-11.809a138.543 138.543 0 0 1-2.788-10.742h-.082c-.123 3.609-.287 7.996-.492 11.768l-.614 11.111H0l1.846-27.635h6.642l3.608 11.111a140.05 140.05 0 0 1 2.542 9.594h.123a135.043 135.043 0 0 1 2.747-9.635l3.812-11.07h6.561l1.599 27.635h-4.92l-.534-11.275zM79.622 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM104.468 422.603c2.214-.369 5.043-.574 8.036-.574 5.166 0 8.733 1.066 11.275 3.199 2.665 2.172 4.305 5.453 4.305 10.168 0 4.92-1.681 8.609-4.305 10.988-2.747 2.5-7.134 3.771-12.505 3.771-2.952 0-5.166-.164-6.807-.369v-27.183zm5.043 23.412c.697.123 1.764.123 2.788.123 6.561.041 10.455-3.568 10.455-10.578.041-6.109-3.484-9.596-9.799-9.596-1.599 0-2.747.123-3.444.287v19.764zM157.973 422.233v16.113c0 5.412 2.255 7.914 5.658 7.914 3.649 0 5.822-2.502 5.822-7.914v-16.113h5.043v15.785c0 8.529-4.387 12.301-11.029 12.301-6.396 0-10.537-3.568-10.537-12.26v-15.826h5.043zM200.776 422.233h5.043v23.412h11.357v4.223h-16.4v-27.635zM247.188 442.036l-2.379 7.832h-5.207l8.856-27.635h6.438l8.979 27.635h-5.412l-2.501-7.832h-8.774zm7.914-3.812l-2.174-6.807c-.532-1.68-.983-3.566-1.394-5.166h-.082c-.41 1.6-.82 3.527-1.312 5.166l-2.132 6.807h7.094zM288.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.978 0 6.684.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.86 3.445 1.599 6.643 2.173 7.709h-5.207c-.41-.82-1.066-3.076-1.846-6.52-.778-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.599 0-2.624.123-3.116.246v8.735zM337.1 422.233v27.635h-5.043v-27.635h5.043zM368.67 426.456h-7.872v-4.223h20.869v4.223h-7.954v23.412h-5.043v-23.412zM412.334 449.868v-11.521l-8.732-16.113h5.739l3.321 7.094c.943 2.049 1.641 3.607 2.378 5.494h.082c.697-1.764 1.477-3.486 2.419-5.494l3.321-7.094h5.699l-9.185 15.99v11.645h-5.042zM498.926 449.048c-1.189.615-3.813 1.23-7.135 1.23-8.773 0-14.104-5.494-14.104-13.9 0-9.102 6.313-14.596 14.76-14.596 3.321 0 5.699.697 6.725 1.23l-1.107 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.676 3.527-9.676 10.168 0 6.068 3.566 9.965 9.635 9.965 2.05 0 4.182-.41 5.494-1.025l.82 3.976zM547.183 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM572.028 449.868v-27.635h5.74l7.134 11.85a75.934 75.934 0 0 1 4.716 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.674v27.635h-5.207l-7.216-12.137c-1.764-3.033-3.608-6.438-4.962-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM620.245 422.233h15.949v4.141h-10.906v7.627h10.168v4.141h-10.168v11.727h-5.043v-27.636zM677.07 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099zM703.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.977 0 6.683.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.861 3.445 1.6 6.643 2.173 7.709h-5.207c-.409-.82-1.065-3.076-1.845-6.52-.779-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.6 0-2.624.123-3.116.246v8.735zM762.514 437.608H752.1v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141H752.1v7.135h10.414v4.099zM788.672 449.868v-27.635h5.74l7.134 11.85a75.923 75.923 0 0 1 4.715 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.675v27.635h-5.207l-7.217-12.137c-1.763-3.033-3.607-6.438-4.961-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM856.69 449.048c-1.188.615-3.812 1.23-7.134 1.23-8.774 0-14.104-5.494-14.104-13.9 0-9.102 6.314-14.596 14.761-14.596 3.321 0 5.699.697 6.724 1.23l-1.106 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.677 3.527-9.677 10.168 0 6.068 3.567 9.965 9.636 9.965 2.05 0 4.182-.41 5.494-1.025l.818 3.976zM896.952 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099z\"/></g><path fill=\"#FFF\" d=\"M688.858 324.74H229.126V0h459.732v324.74zm-443.743-15.99H672.87V15.989H245.115V308.75z\"/><path fill=\"#FFF\" d=\"M278.823 48.632h19.902l39.984 93.848 39.213-93.848h19.967v227.247H376.78V102.813h-.48l-29.184 69.14h-17.605l-29.19-69.14h-.381v104.272h-21.116V48.632zM419.481 121.807c0-16.757.475-27.969 1.436-33.646 1.018-5.677 2.58-10.255 4.691-13.753 3.373-6.627 8.787-12.529 16.245-17.707 7.326-5.247 16.476-7.938 27.437-8.069 11.093.131 20.33 2.829 27.726 8.101 7.326 5.203 12.616 11.13 15.87 17.775 2.355 3.485 3.979 8.057 4.872 13.728.824 5.658 1.243 16.845 1.243 33.571 0 16.457-.419 27.587-1.243 33.376-.894 5.79-2.517 10.431-4.878 13.922-3.248 6.652-8.538 12.504-15.864 17.576-7.396 5.271-16.639 8.032-27.726 8.294-10.967-.262-20.11-3.023-27.437-8.294-7.458-5.072-12.872-10.924-16.252-17.576a161.945 161.945 0 0 1-2.772-6.22c-.762-2.042-1.399-4.609-1.912-7.702-.961-5.789-1.436-16.919-1.436-33.376zm21.118 0c0 14.178.506 23.784 1.529 28.792.894 5.016 2.711 9.075 5.459 12.173 2.236 2.967 5.178 5.377 8.812 7.22 3.58 2.186 7.857 3.267 12.841 3.267 5.047 0 9.426-1.081 13.13-3.267 3.509-1.843 6.313-4.253 8.424-7.22 2.749-3.098 4.636-7.157 5.659-12.173.95-5.009 1.437-14.615 1.437-28.792 0-14.184-.486-23.853-1.437-28.993-1.023-4.884-2.91-8.875-5.659-11.979-2.11-2.966-4.915-5.44-8.424-7.42-3.704-1.911-8.083-2.936-13.13-3.061-4.983.125-9.261 1.149-12.841 3.061-3.635 1.98-6.576 4.454-8.812 7.42-2.748 3.104-4.565 7.095-5.459 11.979-1.024 5.141-1.529 14.809-1.529 28.993zM540.585 48.632h48.799c18.88.131 33.039 8.232 42.482 24.296 3.373 5.396 5.509 11.055 6.396 16.976.705 5.934 1.056 16.17 1.056 30.716 0 15.471-.544 26.27-1.625 32.384-.511 3.098-1.28 5.871-2.298 8.301-1.087 2.374-2.393 4.834-3.923 7.408-4.084 6.783-9.755 12.373-17.031 16.789-7.201 4.734-16.04 7.107-26.495 7.107h-47.361V48.632zm21.117 123.447h25.283c11.873 0 20.492-4.197 25.856-12.572 2.361-3.098 3.86-7.027 4.497-11.773.575-4.685.869-13.459.869-26.326 0-12.529-.294-21.498-.869-26.913-.762-5.409-2.592-9.793-5.452-13.16-5.877-8.375-14.172-12.436-24.901-12.167h-25.283v102.911zM459.37 258.847c-1.263 5.483-3.661 9.7-7.203 12.647-3.644 2.917-7.959 4.379-12.939 4.379-4.51-.113-8.271-1.25-11.28-3.41-3.067-2.086-5.296-4.498-6.683-7.227a62.434 62.434 0 0 1-1.141-2.561c-.314-.838-.577-1.893-.786-3.167-.394-2.38-.591-6.952-.591-13.722 0-6.871.197-11.473.591-13.803.419-2.324 1.062-4.21 1.927-5.641 1.389-2.735 3.615-5.171 6.686-7.307 3.014-2.167 6.777-3.279 11.286-3.329 5.53.05 10.04 1.743 13.524 5.065 3.489 3.354 5.69 7.501 6.609 12.442h-9.216c-.713-2.387-1.999-4.416-3.86-6.103-1.945-1.599-4.307-2.423-7.089-2.479-2.048.056-3.81.475-5.278 1.262-1.498.812-2.707 1.83-3.625 3.055-1.127 1.273-1.877 2.91-2.244 4.921-.42 2.117-.629 6.089-.629 11.917 0 5.833.209 9.781.631 11.842.365 2.061 1.115 3.729 2.246 5.003.918 1.218 2.126 2.211 3.625 2.967 1.468.899 3.229 1.343 5.277 1.343 4.888 0 8.538-2.698 10.955-8.095h9.207zM478.128 245.788c0-6.889.194-11.498.588-13.828.418-2.336 1.062-4.223 1.93-5.658 1.387-2.724 3.616-5.147 6.677-7.276 3.017-2.161 6.776-3.267 11.286-3.317 4.56.05 8.356 1.162 11.392 3.329 3.017 2.136 5.19 4.572 6.527 7.307.968 1.431 1.636 3.316 2.005 5.641.337 2.33.512 6.932.512 13.803 0 6.77-.175 11.342-.512 13.722-.369 2.386-1.037 4.291-2.005 5.728-1.337 2.729-3.511 5.141-6.527 7.227-3.035 2.16-6.839 3.297-11.397 3.41-4.504-.113-8.264-1.25-11.28-3.41-3.066-2.086-5.29-4.498-6.677-7.227a63.97 63.97 0 0 1-1.143-2.561c-.312-.838-.574-1.893-.787-3.167-.395-2.382-.589-6.954-.589-13.723zm8.683 0c0 5.833.206 9.781.624 11.842.368 2.061 1.117 3.729 2.248 5.003.918 1.218 2.123 2.211 3.623 2.967 1.474.899 3.229 1.343 5.277 1.343 2.073 0 3.872-.443 5.396-1.343 1.442-.756 2.598-1.749 3.466-2.967 1.131-1.274 1.905-2.942 2.323-5.003.395-2.061.594-6.009.594-11.842 0-5.828-.199-9.8-.594-11.917-.418-2.011-1.192-3.647-2.323-4.921-.868-1.225-2.023-2.243-3.466-3.055-1.524-.787-3.323-1.206-5.396-1.262-2.048.056-3.804.475-5.277 1.262-1.5.812-2.705 1.83-3.623 3.055-1.131 1.273-1.88 2.91-2.248 4.921-.418 2.117-.624 6.088-.624 11.917zM539.465 216.195h8.185l25.963 42.078h.156v-42.078h8.682v59.19h-8.223l-25.926-42.076h-.156v42.076h-8.681v-59.19zM602.693 216.195h36.625v8.438h-27.943v17.506h23.852v7.951h-23.852v25.295h-8.682v-59.19z\"/></symbol><symbol viewBox=\"0 0 360.967 363.22\" id=\"Modular-Conf-Mobile-Logo-1-0\"><g fill=\"#FFF\"><path d=\"M20.935 302.154c-.139-3.014-.311-6.65-.276-9.802h-.104a124.32 124.32 0 0 1-2.771 8.936L14.39 311.4h-3.291l-3.117-9.974c-.9-2.979-1.731-6.165-2.355-9.074h-.069a522.236 522.236 0 0 1-.416 9.94l-.52 9.385H.639l1.56-23.343h5.609l3.049 9.386a117.15 117.15 0 0 1 2.147 8.106h.103a115.49 115.49 0 0 1 2.321-8.14l3.221-9.352h5.542l1.351 23.343h-4.156l-.451-9.523zM67.897 299.765c0 7.827-4.744 12.294-11.186 12.294-6.582 0-10.738-5.021-10.738-11.879 0-7.169 4.503-12.226 11.084-12.226 6.823 0 10.84 5.16 10.84 11.811zm-17.42.345c0 4.746 2.39 8.521 6.477 8.521 4.122 0 6.442-3.81 6.442-8.693 0-4.398-2.182-8.555-6.442-8.555-4.225 0-6.477 3.914-6.477 8.727zM88.886 288.646c1.87-.312 4.261-.485 6.789-.485 4.363 0 7.377.901 9.523 2.702 2.252 1.836 3.637 4.606 3.637 8.59 0 4.157-1.42 7.272-3.637 9.281-2.32 2.113-6.026 3.188-10.563 3.188-2.493 0-4.363-.139-5.749-.312v-22.964zm4.26 19.776c.588.104 1.488.104 2.354.104 5.541.035 8.832-3.011 8.832-8.934.034-5.161-2.944-8.105-8.278-8.105-1.351 0-2.32.104-2.908.243v16.692zM134.083 288.335v13.611c0 4.572 1.905 6.685 4.78 6.685 3.082 0 4.917-2.113 4.917-6.685v-13.611h4.261v13.335c0 7.203-3.706 10.389-9.316 10.389-5.403 0-8.901-3.012-8.901-10.354v-13.369h4.259zM170.239 288.335h4.261v19.776h9.594v3.566H170.24v-23.342zM209.446 305.063l-2.01 6.615h-4.398l7.481-23.343h5.437l7.586 23.343h-4.572l-2.112-6.615h-7.412zm6.685-3.22l-1.837-5.75c-.449-1.42-.831-3.013-1.177-4.363h-.069c-.347 1.351-.693 2.979-1.107 4.363l-1.803 5.75h5.993zM244.113 288.646c1.593-.276 3.982-.485 6.441-.485 3.359 0 5.646.555 7.204 1.871 1.282 1.073 2.01 2.701 2.01 4.676 0 3.013-2.044 5.057-4.227 5.854v.104c1.663.623 2.668 2.251 3.257 4.501.727 2.91 1.351 5.611 1.835 6.511h-4.398c-.346-.691-.9-2.598-1.559-5.505-.658-3.049-1.767-4.018-4.19-4.087h-2.147v9.593h-4.226v-23.033zm4.226 10.322h2.527c2.875 0 4.676-1.524 4.676-3.845 0-2.562-1.801-3.74-4.571-3.74-1.351 0-2.217.104-2.632.208v7.377zM285.396 288.335v23.343h-4.26v-23.343h4.26zM312.064 291.902h-6.649v-3.567h17.629v3.567h-6.719v19.775h-4.261v-19.775zM348.948 311.678v-9.731l-7.377-13.611h4.849l2.806 5.992c.797 1.731 1.385 3.048 2.008 4.641h.07c.588-1.489 1.246-2.944 2.043-4.641l2.806-5.992h4.814l-7.759 13.508v9.835h-4.26zM17.957 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM59.066 350.924c0 7.828-4.745 12.295-11.187 12.295-6.581 0-10.736-5.021-10.736-11.879 0-7.168 4.502-12.227 11.082-12.227 6.824 0 10.841 5.162 10.841 11.811zm-17.42.347c0 4.744 2.391 8.52 6.477 8.52 4.121 0 6.442-3.811 6.442-8.693 0-4.398-2.183-8.555-6.442-8.555-4.226 0-6.477 3.914-6.477 8.728zM80.401 362.838v-23.344h4.85l6.025 10.01a64.167 64.167 0 0 1 3.983 7.828h.068c-.276-3.117-.38-6.131-.38-9.697v-8.141h3.947v23.344h-4.398l-6.096-10.25c-1.488-2.564-3.048-5.439-4.19-8.07l-.104.033c.173 3.014.208 6.096.208 9.941v8.346h-3.913zM121.477 339.494h13.473v3.498h-9.213v6.443h8.589v3.498h-8.589v9.904h-4.26v-23.343zM169.825 352.482h-8.797v6.857h9.835v3.498h-14.095v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM192.268 339.807c1.593-.277 3.982-.484 6.441-.484 3.359 0 5.646.555 7.204 1.869 1.282 1.074 2.01 2.703 2.01 4.676 0 3.014-2.044 5.057-4.227 5.854v.104c1.662.625 2.668 2.252 3.256 4.504.728 2.908 1.352 5.609 1.836 6.51h-4.398c-.347-.691-.9-2.596-1.559-5.506-.658-3.047-1.767-4.018-4.191-4.088h-2.147v9.594h-4.225v-23.033zm4.224 10.322h2.528c2.875 0 4.676-1.525 4.676-3.846 0-2.562-1.801-3.74-4.572-3.74-1.35 0-2.216.104-2.632.207v7.379zM242.694 352.482h-8.797v6.857h9.836v3.498h-14.096v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM265.137 362.838v-23.344h4.849l6.026 10.01a64.025 64.025 0 0 1 3.983 7.828h.069c-.276-3.117-.381-6.131-.381-9.697v-8.141h3.948v23.344h-4.398l-6.096-10.25c-1.489-2.564-3.048-5.439-4.191-8.07l-.104.033c.174 3.014.208 6.096.208 9.941v8.346h-3.913zM322.941 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM357.297 352.482h-8.798v6.857h9.838v3.498h-14.098v-23.344h13.577v3.498h-9.317v6.027h8.798v3.464z\"/></g><path fill=\"#FFF\" d=\"M351.451 242.661H7.917V0h343.534v242.661zM19.866 230.713h319.637V11.949H19.866v218.764z\"/><path fill=\"#FFF\" d=\"M45.054 36.342h14.871l29.879 70.127 29.302-70.127h14.92V206.15h-15.774V76.828h-.357l-21.81 51.664H82.93L61.116 76.828h-.283v77.917H45.054V36.342zM150.161 91.021c0-12.521.354-20.899 1.07-25.143.762-4.242 1.93-7.662 3.506-10.276 2.521-4.952 6.567-9.362 12.141-13.23 5.475-3.921 12.311-5.932 20.502-6.029 8.288.098 15.191 2.113 20.717 6.053 5.475 3.887 9.428 8.316 11.859 13.282 1.761 2.604 2.974 6.021 3.641 10.259.616 4.227.93 12.586.93 25.085 0 12.298-.313 20.615-.93 24.941-.667 4.325-1.88 7.794-3.645 10.402-2.428 4.971-6.381 9.345-11.855 13.134-5.525 3.939-12.433 6.002-20.717 6.198-8.195-.196-15.027-2.259-20.502-6.198-5.573-3.789-9.619-8.163-12.145-13.134a121.57 121.57 0 0 1-2.072-4.648c-.568-1.526-1.046-3.444-1.43-5.754-.716-4.327-1.07-12.645-1.07-24.942zm15.778 0c0 10.594.38 17.772 1.144 21.516.668 3.747 2.024 6.782 4.079 9.096 1.672 2.217 3.869 4.019 6.583 5.396 2.677 1.633 5.873 2.44 9.596 2.44 3.772 0 7.045-.808 9.812-2.44 2.622-1.377 4.719-3.179 6.293-5.396 2.056-2.313 3.466-5.349 4.23-9.096.709-3.743 1.072-10.922 1.072-21.516 0-10.599-.363-17.823-1.072-21.665-.765-3.649-2.175-6.633-4.23-8.951-1.574-2.217-3.671-4.065-6.293-5.545-2.768-1.427-6.04-2.193-9.812-2.286-3.723.093-6.919.859-9.596 2.286-2.714 1.479-4.911 3.328-6.583 5.545-2.055 2.318-3.411 5.302-4.079 8.951-.764 3.841-1.144 11.066-1.144 21.665zM240.655 36.342h36.463c14.108.098 24.688 6.151 31.746 18.154 2.52 4.032 4.116 8.261 4.779 12.685.526 4.435.788 12.084.788 22.952 0 11.562-.405 19.631-1.213 24.199-.382 2.315-.958 4.388-1.718 6.203-.812 1.773-1.788 3.611-2.932 5.535-3.053 5.068-7.29 9.245-12.727 12.546-5.382 3.537-11.984 5.311-19.798 5.311h-35.39V36.342zm15.779 92.245h18.894c8.872 0 15.312-3.138 19.319-9.396 1.765-2.315 2.886-5.251 3.361-8.798.431-3.5.649-10.058.649-19.672 0-9.361-.219-16.064-.649-20.11-.569-4.042-1.936-7.318-4.073-9.834-4.392-6.258-10.591-9.292-18.607-9.091h-18.894v76.901zM179.967 193.424c-.945 4.097-2.737 7.248-5.383 9.451-2.722 2.179-5.947 3.271-9.669 3.271-3.37-.084-6.18-.933-8.429-2.548-2.293-1.559-3.956-3.36-4.993-5.399-.317-.668-.6-1.307-.854-1.914-.236-.626-.43-1.414-.588-2.365-.293-1.779-.441-5.195-.441-10.255 0-5.134.148-8.572.441-10.313.314-1.736.795-3.146 1.441-4.215 1.037-2.044 2.7-3.864 4.995-5.461 2.251-1.618 5.064-2.45 8.433-2.487 4.132.037 7.504 1.302 10.106 3.785 2.606 2.506 4.252 5.605 4.939 9.297h-6.887a9.844 9.844 0 0 0-2.884-4.56c-1.455-1.194-3.219-1.811-5.299-1.853-1.528.042-2.845.354-3.943.942-1.12.607-2.023 1.368-2.709 2.282-.842.951-1.401 2.175-1.675 3.679-.315 1.581-.472 4.55-.472 8.903 0 4.359.156 7.31.472 8.85.273 1.54.833 2.786 1.678 3.737.685.91 1.59 1.653 2.709 2.218 1.097.672 2.413 1.003 3.942 1.003 3.653 0 6.381-2.017 8.188-6.048h6.882zM193.983 183.664c0-5.147.146-8.592.439-10.332.312-1.747.793-3.155 1.441-4.229 1.035-2.034 2.703-3.845 4.99-5.437 2.254-1.615 5.062-2.441 8.432-2.479 3.408.037 6.244.869 8.514 2.487 2.254 1.597 3.88 3.417 4.877 5.461.723 1.068 1.224 2.479 1.498 4.215.252 1.741.382 5.18.382 10.313 0 5.06-.13 8.476-.382 10.255-.274 1.782-.775 3.206-1.498 4.279-.997 2.039-2.623 3.841-4.877 5.399-2.27 1.615-5.109 2.464-8.516 2.548-3.367-.084-6.176-.933-8.43-2.548-2.293-1.559-3.955-3.36-4.99-5.399a45.995 45.995 0 0 1-.853-1.914c-.234-.626-.431-1.414-.589-2.365-.292-1.778-.438-5.194-.438-10.254zm6.488 0c0 4.359.155 7.31.466 8.85.275 1.54.837 2.786 1.68 3.737.687.91 1.588 1.653 2.708 2.218 1.102.672 2.414 1.003 3.944 1.003 1.549 0 2.893-.331 4.032-1.003 1.077-.564 1.941-1.308 2.589-2.218.846-.951 1.425-2.197 1.736-3.737.296-1.54.446-4.49.446-8.85 0-4.354-.15-7.322-.446-8.903-.312-1.504-.891-2.728-1.736-3.679-.647-.914-1.512-1.675-2.589-2.282-1.14-.588-2.483-.9-4.032-.942-1.53.042-2.843.354-3.944.942-1.12.607-2.021 1.368-2.708 2.282-.843.951-1.404 2.175-1.68 3.679-.311 1.581-.466 4.55-.466 8.903zM239.817 161.552h6.115l19.401 31.441h.117v-31.441h6.485v44.23h-6.145l-19.371-31.442h-.117v31.442h-6.486v-44.23zM287.064 161.552h27.367v6.306h-20.88v13.082h17.822v5.941h-17.822v18.901h-6.487v-44.23z\"/></symbol></svg><div class=\"banner\">\n<svg class=\"banner__mobilelogo\"><use xlink:href=\"#Modular-Conf-Mobile-Logo-1-0\"></use></svg>\n<svg class=\"banner__desktoplogo\"><use xlink:href=\"#Modular-Conf-Microsite-Logo-1-0\"></use></svg>\n</div>]]></static-content>\n</root>","serviceContext.scopeGroupId":"67510365"}}}, Authorization=Basic YWxsZW4uemllZ2VuZnVzQGxpZmVyYXkuY29tOmV2ZW50c2FwcGlzQ09PTA==, accept=application/json, content-type=application/json, content-length=18138, callback=function () {
      if (self._callbackCalled) {
        return // Print a warning maybe?
      }
      self._callbackCalled = true
      self._callback.apply(self, arguments)
    }, method=POST, readable=true, writable=true, explicitMethod=true, $ref=$["request"], stringify=function (object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        objKeys = filter = options.filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
    }

    return keys.join(delimiter);
}, parse=function (str, opts) {
    var options = opts || {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj, options);
    }

    return Utils.compact(obj);
}, useQuerystring=undefined, , , $ref=$["request"], hasAuth=false, sentAuth=false, bearerToken=null, user=null, pass=null, $ref=$["request"], params=null, $ref=$["request"], boundary=072bc7bb-8a24-44aa-8247-8cb01f0176ba, chunked=false, body=null, $ref=$["request"], followRedirect=true, followRedirects=true, followAllRedirects=false, allowRedirect=function () {return true}, maxRedirects=10, redirects=[], redirectsFollowed=0, removeRefererHeader=false, $ref=$["request"], proxyHeaderWhiteList=[accept, accept-charset, accept-encoding, accept-language, accept-ranges, cache-control, content-encoding, content-language, content-location, content-md5, content-range, content-type, connection, date, expect, max-forwards, pragma, referer, te, user-agent, via], proxyHeaderExclusiveList=[], setHeader=function (key, value, clobber) {
    if (typeof value === 'undefined') return
    return c.set(key, value, clobber)
  }, hasHeader=function (key) {
    return c.has(key)
  }, getHeader=function (key) {
    return c.get(key)
  }, removeHeader=function (key) {
    return c.del(key)
  }, localAddress=undefined, , dests=[], __isRequestRequest=true, _callback=function (err, httpResponse, body) {

            logger.silly("httpResponse: ", httpResponse);
            logger.debug("body: " + body);

            if (err) {
                logger.error(err);
                throw err;
            } else if (httpResponse && httpResponse.statusCode && (httpResponse.statusCode != 200)) {
                logger.error("An error seems to have occurred. Response Code " + httpResponse.statusCode, body);
                var errorobj = {
                    statusCode: httpResponse.statusCode,
                    body: body
                };
                throw errorobj;
            }
            else {
                if (body && body.exception) {
                    logger.error("An exception occurred: " + body.exception);
                    throw body.exception;
                } else { callback(body) }
            }
        }, protocol=https:, slashes=true, auth=null, host=web.liferay.com, port=443, hostname=web.liferay.com, hash=null, search=null, query=null, pathname=/api/secure/jsonws/invoke, path=/api/secure/jsonws/invoke, href=https://web.liferay.com/api/secure/jsonws/invoke, proxy=null, tunnel=true, setHost=true, originalCookieHeader=undefined, _disableCookies=true, _jar=undefined, port=443, host=web.liferay.com, path=/api/secure/jsonws/invoke, _json=true, Server=function Server(opts, requestListener) {
  if (!(this instanceof Server)) return new Server(opts, requestListener);

  if (process.features.tls_npn && !opts.NPNProtocols) {
    opts.NPNProtocols = ['http/1.1', 'http/1.0'];
  }

  tls.Server.call(this, opts, http._connectionListener);

  this.httpAllowHalfOpen = false;

  if (requestListener) {
    this.addListener('request', requestListener);
  }

  this.addListener('clientError', function(err, conn) {
    conn.destroy();
  });

  this.timeout = 2 * 60 * 1000;
}, createServer=function (opts, requestListener) {
  return new Server(opts, requestListener);
}, $ref=$["socket"]["_httpMessage"]["agent"], Agent=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, request=function (options, cb) {
  if (typeof options === 'string') {
    options = url.parse(options);
  } else {
    options = util._extend({}, options);
  }
  options._defaultAgent = globalAgent;
  return http.request(options, cb);
}, get=function (options, cb) {
  var req = exports.request(options, cb);
  req.end();
  return req;
}, agentClass=function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
  this.maxCachedSessions = this.options.maxCachedSessions;
  if (this.maxCachedSessions === undefined)
    this.maxCachedSessions = 100;

  this._sessionCache = {
    map: {},
    list: []
  };
}, $ref=$["socket"]["_httpMessage"]["agent"], _started=true, href=https://web.liferay.com/api/secure/jsonws/invoke, $ref=$["socket"]["_httpMessage"], ntick=true, $ref=$, originalHost=web.liferay.com, originalHostHeaderName=host, $ref=$, _destdata=true, _ended=true, _callbackCalled=true, toJSON=function responseToJSON() {
  var self = this
  return {
    statusCode: self.statusCode,
    body: self.body,
    headers: self.headers,
    request: requestToJSON.call(self.request)
  }
}, $ref=$["headers"], read=function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
}, articleId=77062078, classNameId=0, classPK=0, companyId=1, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[<svg width="0" height="0" style="position:absolute"><symbol viewBox="0 0 898.183 450.319" id="Modular-Conf-Microsite-Logo-1-0"><g fill="#FFF"><path d="M24.026 438.593c-.164-3.566-.369-7.871-.328-11.604h-.123a147.361 147.361 0 0 1-3.279 10.578l-4.019 11.973h-3.895l-3.69-11.809a138.543 138.543 0 0 1-2.788-10.742h-.082c-.123 3.609-.287 7.996-.492 11.768l-.614 11.111H0l1.846-27.635h6.642l3.608 11.111a140.05 140.05 0 0 1 2.542 9.594h.123a135.043 135.043 0 0 1 2.747-9.635l3.812-11.07h6.561l1.599 27.635h-4.92l-.534-11.275zM79.622 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM104.468 422.603c2.214-.369 5.043-.574 8.036-.574 5.166 0 8.733 1.066 11.275 3.199 2.665 2.172 4.305 5.453 4.305 10.168 0 4.92-1.681 8.609-4.305 10.988-2.747 2.5-7.134 3.771-12.505 3.771-2.952 0-5.166-.164-6.807-.369v-27.183zm5.043 23.412c.697.123 1.764.123 2.788.123 6.561.041 10.455-3.568 10.455-10.578.041-6.109-3.484-9.596-9.799-9.596-1.599 0-2.747.123-3.444.287v19.764zM157.973 422.233v16.113c0 5.412 2.255 7.914 5.658 7.914 3.649 0 5.822-2.502 5.822-7.914v-16.113h5.043v15.785c0 8.529-4.387 12.301-11.029 12.301-6.396 0-10.537-3.568-10.537-12.26v-15.826h5.043zM200.776 422.233h5.043v23.412h11.357v4.223h-16.4v-27.635zM247.188 442.036l-2.379 7.832h-5.207l8.856-27.635h6.438l8.979 27.635h-5.412l-2.501-7.832h-8.774zm7.914-3.812l-2.174-6.807c-.532-1.68-.983-3.566-1.394-5.166h-.082c-.41 1.6-.82 3.527-1.312 5.166l-2.132 6.807h7.094zM288.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.978 0 6.684.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.86 3.445 1.599 6.643 2.173 7.709h-5.207c-.41-.82-1.066-3.076-1.846-6.52-.778-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.599 0-2.624.123-3.116.246v8.735zM337.1 422.233v27.635h-5.043v-27.635h5.043zM368.67 426.456h-7.872v-4.223h20.869v4.223h-7.954v23.412h-5.043v-23.412zM412.334 449.868v-11.521l-8.732-16.113h5.739l3.321 7.094c.943 2.049 1.641 3.607 2.378 5.494h.082c.697-1.764 1.477-3.486 2.419-5.494l3.321-7.094h5.699l-9.185 15.99v11.645h-5.042zM498.926 449.048c-1.189.615-3.813 1.23-7.135 1.23-8.773 0-14.104-5.494-14.104-13.9 0-9.102 6.313-14.596 14.76-14.596 3.321 0 5.699.697 6.725 1.23l-1.107 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.676 3.527-9.676 10.168 0 6.068 3.566 9.965 9.635 9.965 2.05 0 4.182-.41 5.494-1.025l.82 3.976zM547.183 435.765c0 9.266-5.617 14.555-13.243 14.555-7.79 0-12.71-5.945-12.71-14.064 0-8.486 5.33-14.473 13.12-14.473 8.077-.001 12.833 6.109 12.833 13.982zm-20.623.408c0 5.617 2.829 10.088 7.667 10.088 4.879 0 7.626-4.512 7.626-10.291 0-5.207-2.583-10.129-7.626-10.129-5.002 0-7.667 4.635-7.667 10.332zM572.028 449.868v-27.635h5.74l7.134 11.85a75.934 75.934 0 0 1 4.716 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.674v27.635h-5.207l-7.216-12.137c-1.764-3.033-3.608-6.438-4.962-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM620.245 422.233h15.949v4.141h-10.906v7.627h10.168v4.141h-10.168v11.727h-5.043v-27.636zM677.07 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099zM703.229 422.603c1.886-.328 4.715-.574 7.626-.574 3.977 0 6.683.656 8.528 2.215 1.517 1.271 2.378 3.197 2.378 5.535 0 3.566-2.419 5.986-5.002 6.928v.123c1.968.738 3.157 2.666 3.854 5.33.861 3.445 1.6 6.643 2.173 7.709h-5.207c-.409-.82-1.065-3.076-1.845-6.52-.779-3.607-2.091-4.756-4.961-4.838h-2.542v11.357h-5.002v-27.265zm5.001 12.218h2.993c3.403 0 5.535-1.805 5.535-4.551 0-3.035-2.132-4.43-5.412-4.43-1.6 0-2.624.123-3.116.246v8.735zM762.514 437.608H752.1v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141H752.1v7.135h10.414v4.099zM788.672 449.868v-27.635h5.74l7.134 11.85a75.923 75.923 0 0 1 4.715 9.266h.082c-.328-3.689-.451-7.256-.451-11.48v-9.635h4.675v27.635h-5.207l-7.217-12.137c-1.763-3.033-3.607-6.438-4.961-9.553l-.123.041c.205 3.566.246 7.217.246 11.768v9.881h-4.633zM856.69 449.048c-1.188.615-3.812 1.23-7.134 1.23-8.774 0-14.104-5.494-14.104-13.9 0-9.102 6.314-14.596 14.761-14.596 3.321 0 5.699.697 6.724 1.23l-1.106 4.018c-1.312-.574-3.116-1.066-5.412-1.066-5.617 0-9.677 3.527-9.677 10.168 0 6.068 3.567 9.965 9.636 9.965 2.05 0 4.182-.41 5.494-1.025l.818 3.976zM896.952 437.608h-10.414v8.119h11.645v4.141h-16.688v-27.635h16.072v4.141h-11.029v7.135h10.414v4.099z"/></g><path fill="#FFF" d="M688.858 324.74H229.126V0h459.732v324.74zm-443.743-15.99H672.87V15.989H245.115V308.75z"/><path fill="#FFF" d="M278.823 48.632h19.902l39.984 93.848 39.213-93.848h19.967v227.247H376.78V102.813h-.48l-29.184 69.14h-17.605l-29.19-69.14h-.381v104.272h-21.116V48.632zM419.481 121.807c0-16.757.475-27.969 1.436-33.646 1.018-5.677 2.58-10.255 4.691-13.753 3.373-6.627 8.787-12.529 16.245-17.707 7.326-5.247 16.476-7.938 27.437-8.069 11.093.131 20.33 2.829 27.726 8.101 7.326 5.203 12.616 11.13 15.87 17.775 2.355 3.485 3.979 8.057 4.872 13.728.824 5.658 1.243 16.845 1.243 33.571 0 16.457-.419 27.587-1.243 33.376-.894 5.79-2.517 10.431-4.878 13.922-3.248 6.652-8.538 12.504-15.864 17.576-7.396 5.271-16.639 8.032-27.726 8.294-10.967-.262-20.11-3.023-27.437-8.294-7.458-5.072-12.872-10.924-16.252-17.576a161.945 161.945 0 0 1-2.772-6.22c-.762-2.042-1.399-4.609-1.912-7.702-.961-5.789-1.436-16.919-1.436-33.376zm21.118 0c0 14.178.506 23.784 1.529 28.792.894 5.016 2.711 9.075 5.459 12.173 2.236 2.967 5.178 5.377 8.812 7.22 3.58 2.186 7.857 3.267 12.841 3.267 5.047 0 9.426-1.081 13.13-3.267 3.509-1.843 6.313-4.253 8.424-7.22 2.749-3.098 4.636-7.157 5.659-12.173.95-5.009 1.437-14.615 1.437-28.792 0-14.184-.486-23.853-1.437-28.993-1.023-4.884-2.91-8.875-5.659-11.979-2.11-2.966-4.915-5.44-8.424-7.42-3.704-1.911-8.083-2.936-13.13-3.061-4.983.125-9.261 1.149-12.841 3.061-3.635 1.98-6.576 4.454-8.812 7.42-2.748 3.104-4.565 7.095-5.459 11.979-1.024 5.141-1.529 14.809-1.529 28.993zM540.585 48.632h48.799c18.88.131 33.039 8.232 42.482 24.296 3.373 5.396 5.509 11.055 6.396 16.976.705 5.934 1.056 16.17 1.056 30.716 0 15.471-.544 26.27-1.625 32.384-.511 3.098-1.28 5.871-2.298 8.301-1.087 2.374-2.393 4.834-3.923 7.408-4.084 6.783-9.755 12.373-17.031 16.789-7.201 4.734-16.04 7.107-26.495 7.107h-47.361V48.632zm21.117 123.447h25.283c11.873 0 20.492-4.197 25.856-12.572 2.361-3.098 3.86-7.027 4.497-11.773.575-4.685.869-13.459.869-26.326 0-12.529-.294-21.498-.869-26.913-.762-5.409-2.592-9.793-5.452-13.16-5.877-8.375-14.172-12.436-24.901-12.167h-25.283v102.911zM459.37 258.847c-1.263 5.483-3.661 9.7-7.203 12.647-3.644 2.917-7.959 4.379-12.939 4.379-4.51-.113-8.271-1.25-11.28-3.41-3.067-2.086-5.296-4.498-6.683-7.227a62.434 62.434 0 0 1-1.141-2.561c-.314-.838-.577-1.893-.786-3.167-.394-2.38-.591-6.952-.591-13.722 0-6.871.197-11.473.591-13.803.419-2.324 1.062-4.21 1.927-5.641 1.389-2.735 3.615-5.171 6.686-7.307 3.014-2.167 6.777-3.279 11.286-3.329 5.53.05 10.04 1.743 13.524 5.065 3.489 3.354 5.69 7.501 6.609 12.442h-9.216c-.713-2.387-1.999-4.416-3.86-6.103-1.945-1.599-4.307-2.423-7.089-2.479-2.048.056-3.81.475-5.278 1.262-1.498.812-2.707 1.83-3.625 3.055-1.127 1.273-1.877 2.91-2.244 4.921-.42 2.117-.629 6.089-.629 11.917 0 5.833.209 9.781.631 11.842.365 2.061 1.115 3.729 2.246 5.003.918 1.218 2.126 2.211 3.625 2.967 1.468.899 3.229 1.343 5.277 1.343 4.888 0 8.538-2.698 10.955-8.095h9.207zM478.128 245.788c0-6.889.194-11.498.588-13.828.418-2.336 1.062-4.223 1.93-5.658 1.387-2.724 3.616-5.147 6.677-7.276 3.017-2.161 6.776-3.267 11.286-3.317 4.56.05 8.356 1.162 11.392 3.329 3.017 2.136 5.19 4.572 6.527 7.307.968 1.431 1.636 3.316 2.005 5.641.337 2.33.512 6.932.512 13.803 0 6.77-.175 11.342-.512 13.722-.369 2.386-1.037 4.291-2.005 5.728-1.337 2.729-3.511 5.141-6.527 7.227-3.035 2.16-6.839 3.297-11.397 3.41-4.504-.113-8.264-1.25-11.28-3.41-3.066-2.086-5.29-4.498-6.677-7.227a63.97 63.97 0 0 1-1.143-2.561c-.312-.838-.574-1.893-.787-3.167-.395-2.382-.589-6.954-.589-13.723zm8.683 0c0 5.833.206 9.781.624 11.842.368 2.061 1.117 3.729 2.248 5.003.918 1.218 2.123 2.211 3.623 2.967 1.474.899 3.229 1.343 5.277 1.343 2.073 0 3.872-.443 5.396-1.343 1.442-.756 2.598-1.749 3.466-2.967 1.131-1.274 1.905-2.942 2.323-5.003.395-2.061.594-6.009.594-11.842 0-5.828-.199-9.8-.594-11.917-.418-2.011-1.192-3.647-2.323-4.921-.868-1.225-2.023-2.243-3.466-3.055-1.524-.787-3.323-1.206-5.396-1.262-2.048.056-3.804.475-5.277 1.262-1.5.812-2.705 1.83-3.623 3.055-1.131 1.273-1.88 2.91-2.248 4.921-.418 2.117-.624 6.088-.624 11.917zM539.465 216.195h8.185l25.963 42.078h.156v-42.078h8.682v59.19h-8.223l-25.926-42.076h-.156v42.076h-8.681v-59.19zM602.693 216.195h36.625v8.438h-27.943v17.506h23.852v7.951h-23.852v25.295h-8.682v-59.19z"/></symbol><symbol viewBox="0 0 360.967 363.22" id="Modular-Conf-Mobile-Logo-1-0"><g fill="#FFF"><path d="M20.935 302.154c-.139-3.014-.311-6.65-.276-9.802h-.104a124.32 124.32 0 0 1-2.771 8.936L14.39 311.4h-3.291l-3.117-9.974c-.9-2.979-1.731-6.165-2.355-9.074h-.069a522.236 522.236 0 0 1-.416 9.94l-.52 9.385H.639l1.56-23.343h5.609l3.049 9.386a117.15 117.15 0 0 1 2.147 8.106h.103a115.49 115.49 0 0 1 2.321-8.14l3.221-9.352h5.542l1.351 23.343h-4.156l-.451-9.523zM67.897 299.765c0 7.827-4.744 12.294-11.186 12.294-6.582 0-10.738-5.021-10.738-11.879 0-7.169 4.503-12.226 11.084-12.226 6.823 0 10.84 5.16 10.84 11.811zm-17.42.345c0 4.746 2.39 8.521 6.477 8.521 4.122 0 6.442-3.81 6.442-8.693 0-4.398-2.182-8.555-6.442-8.555-4.225 0-6.477 3.914-6.477 8.727zM88.886 288.646c1.87-.312 4.261-.485 6.789-.485 4.363 0 7.377.901 9.523 2.702 2.252 1.836 3.637 4.606 3.637 8.59 0 4.157-1.42 7.272-3.637 9.281-2.32 2.113-6.026 3.188-10.563 3.188-2.493 0-4.363-.139-5.749-.312v-22.964zm4.26 19.776c.588.104 1.488.104 2.354.104 5.541.035 8.832-3.011 8.832-8.934.034-5.161-2.944-8.105-8.278-8.105-1.351 0-2.32.104-2.908.243v16.692zM134.083 288.335v13.611c0 4.572 1.905 6.685 4.78 6.685 3.082 0 4.917-2.113 4.917-6.685v-13.611h4.261v13.335c0 7.203-3.706 10.389-9.316 10.389-5.403 0-8.901-3.012-8.901-10.354v-13.369h4.259zM170.239 288.335h4.261v19.776h9.594v3.566H170.24v-23.342zM209.446 305.063l-2.01 6.615h-4.398l7.481-23.343h5.437l7.586 23.343h-4.572l-2.112-6.615h-7.412zm6.685-3.22l-1.837-5.75c-.449-1.42-.831-3.013-1.177-4.363h-.069c-.347 1.351-.693 2.979-1.107 4.363l-1.803 5.75h5.993zM244.113 288.646c1.593-.276 3.982-.485 6.441-.485 3.359 0 5.646.555 7.204 1.871 1.282 1.073 2.01 2.701 2.01 4.676 0 3.013-2.044 5.057-4.227 5.854v.104c1.663.623 2.668 2.251 3.257 4.501.727 2.91 1.351 5.611 1.835 6.511h-4.398c-.346-.691-.9-2.598-1.559-5.505-.658-3.049-1.767-4.018-4.19-4.087h-2.147v9.593h-4.226v-23.033zm4.226 10.322h2.527c2.875 0 4.676-1.524 4.676-3.845 0-2.562-1.801-3.74-4.571-3.74-1.351 0-2.217.104-2.632.208v7.377zM285.396 288.335v23.343h-4.26v-23.343h4.26zM312.064 291.902h-6.649v-3.567h17.629v3.567h-6.719v19.775h-4.261v-19.775zM348.948 311.678v-9.731l-7.377-13.611h4.849l2.806 5.992c.797 1.731 1.385 3.048 2.008 4.641h.07c.588-1.489 1.246-2.944 2.043-4.641l2.806-5.992h4.814l-7.759 13.508v9.835h-4.26zM17.957 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM59.066 350.924c0 7.828-4.745 12.295-11.187 12.295-6.581 0-10.736-5.021-10.736-11.879 0-7.168 4.502-12.227 11.082-12.227 6.824 0 10.841 5.162 10.841 11.811zm-17.42.347c0 4.744 2.391 8.52 6.477 8.52 4.121 0 6.442-3.811 6.442-8.693 0-4.398-2.183-8.555-6.442-8.555-4.226 0-6.477 3.914-6.477 8.728zM80.401 362.838v-23.344h4.85l6.025 10.01a64.167 64.167 0 0 1 3.983 7.828h.068c-.276-3.117-.38-6.131-.38-9.697v-8.141h3.947v23.344h-4.398l-6.096-10.25c-1.488-2.564-3.048-5.439-4.19-8.07l-.104.033c.173 3.014.208 6.096.208 9.941v8.346h-3.913zM121.477 339.494h13.473v3.498h-9.213v6.443h8.589v3.498h-8.589v9.904h-4.26v-23.343zM169.825 352.482h-8.797v6.857h9.835v3.498h-14.095v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM192.268 339.807c1.593-.277 3.982-.484 6.441-.484 3.359 0 5.646.555 7.204 1.869 1.282 1.074 2.01 2.703 2.01 4.676 0 3.014-2.044 5.057-4.227 5.854v.104c1.662.625 2.668 2.252 3.256 4.504.728 2.908 1.352 5.609 1.836 6.51h-4.398c-.347-.691-.9-2.596-1.559-5.506-.658-3.047-1.767-4.018-4.191-4.088h-2.147v9.594h-4.225v-23.033zm4.224 10.322h2.528c2.875 0 4.676-1.525 4.676-3.846 0-2.562-1.801-3.74-4.572-3.74-1.35 0-2.216.104-2.632.207v7.379zM242.694 352.482h-8.797v6.857h9.836v3.498h-14.096v-23.344h13.576v3.498h-9.316v6.027h8.797v3.464zM265.137 362.838v-23.344h4.849l6.026 10.01a64.025 64.025 0 0 1 3.983 7.828h.069c-.276-3.117-.381-6.131-.381-9.697v-8.141h3.948v23.344h-4.398l-6.096-10.25c-1.489-2.564-3.048-5.439-4.191-8.07l-.104.033c.174 3.014.208 6.096.208 9.941v8.346h-3.913zM322.941 362.146c-1.005.52-3.222 1.039-6.027 1.039-7.412 0-11.914-4.641-11.914-11.742 0-7.688 5.333-12.33 12.469-12.33 2.805 0 4.814.59 5.68 1.039l-.936 3.395c-1.108-.484-2.632-.9-4.571-.9-4.745 0-8.174 2.979-8.174 8.59 0 5.127 3.014 8.416 8.139 8.416 1.732 0 3.533-.346 4.641-.865l.693 3.358zM357.297 352.482h-8.798v6.857h9.838v3.498h-14.098v-23.344h13.577v3.498h-9.317v6.027h8.798v3.464z"/></g><path fill="#FFF" d="M351.451 242.661H7.917V0h343.534v242.661zM19.866 230.713h319.637V11.949H19.866v218.764z"/><path fill="#FFF" d="M45.054 36.342h14.871l29.879 70.127 29.302-70.127h14.92V206.15h-15.774V76.828h-.357l-21.81 51.664H82.93L61.116 76.828h-.283v77.917H45.054V36.342zM150.161 91.021c0-12.521.354-20.899 1.07-25.143.762-4.242 1.93-7.662 3.506-10.276 2.521-4.952 6.567-9.362 12.141-13.23 5.475-3.921 12.311-5.932 20.502-6.029 8.288.098 15.191 2.113 20.717 6.053 5.475 3.887 9.428 8.316 11.859 13.282 1.761 2.604 2.974 6.021 3.641 10.259.616 4.227.93 12.586.93 25.085 0 12.298-.313 20.615-.93 24.941-.667 4.325-1.88 7.794-3.645 10.402-2.428 4.971-6.381 9.345-11.855 13.134-5.525 3.939-12.433 6.002-20.717 6.198-8.195-.196-15.027-2.259-20.502-6.198-5.573-3.789-9.619-8.163-12.145-13.134a121.57 121.57 0 0 1-2.072-4.648c-.568-1.526-1.046-3.444-1.43-5.754-.716-4.327-1.07-12.645-1.07-24.942zm15.778 0c0 10.594.38 17.772 1.144 21.516.668 3.747 2.024 6.782 4.079 9.096 1.672 2.217 3.869 4.019 6.583 5.396 2.677 1.633 5.873 2.44 9.596 2.44 3.772 0 7.045-.808 9.812-2.44 2.622-1.377 4.719-3.179 6.293-5.396 2.056-2.313 3.466-5.349 4.23-9.096.709-3.743 1.072-10.922 1.072-21.516 0-10.599-.363-17.823-1.072-21.665-.765-3.649-2.175-6.633-4.23-8.951-1.574-2.217-3.671-4.065-6.293-5.545-2.768-1.427-6.04-2.193-9.812-2.286-3.723.093-6.919.859-9.596 2.286-2.714 1.479-4.911 3.328-6.583 5.545-2.055 2.318-3.411 5.302-4.079 8.951-.764 3.841-1.144 11.066-1.144 21.665zM240.655 36.342h36.463c14.108.098 24.688 6.151 31.746 18.154 2.52 4.032 4.116 8.261 4.779 12.685.526 4.435.788 12.084.788 22.952 0 11.562-.405 19.631-1.213 24.199-.382 2.315-.958 4.388-1.718 6.203-.812 1.773-1.788 3.611-2.932 5.535-3.053 5.068-7.29 9.245-12.727 12.546-5.382 3.537-11.984 5.311-19.798 5.311h-35.39V36.342zm15.779 92.245h18.894c8.872 0 15.312-3.138 19.319-9.396 1.765-2.315 2.886-5.251 3.361-8.798.431-3.5.649-10.058.649-19.672 0-9.361-.219-16.064-.649-20.11-.569-4.042-1.936-7.318-4.073-9.834-4.392-6.258-10.591-9.292-18.607-9.091h-18.894v76.901zM179.967 193.424c-.945 4.097-2.737 7.248-5.383 9.451-2.722 2.179-5.947 3.271-9.669 3.271-3.37-.084-6.18-.933-8.429-2.548-2.293-1.559-3.956-3.36-4.993-5.399-.317-.668-.6-1.307-.854-1.914-.236-.626-.43-1.414-.588-2.365-.293-1.779-.441-5.195-.441-10.255 0-5.134.148-8.572.441-10.313.314-1.736.795-3.146 1.441-4.215 1.037-2.044 2.7-3.864 4.995-5.461 2.251-1.618 5.064-2.45 8.433-2.487 4.132.037 7.504 1.302 10.106 3.785 2.606 2.506 4.252 5.605 4.939 9.297h-6.887a9.844 9.844 0 0 0-2.884-4.56c-1.455-1.194-3.219-1.811-5.299-1.853-1.528.042-2.845.354-3.943.942-1.12.607-2.023 1.368-2.709 2.282-.842.951-1.401 2.175-1.675 3.679-.315 1.581-.472 4.55-.472 8.903 0 4.359.156 7.31.472 8.85.273 1.54.833 2.786 1.678 3.737.685.91 1.59 1.653 2.709 2.218 1.097.672 2.413 1.003 3.942 1.003 3.653 0 6.381-2.017 8.188-6.048h6.882zM193.983 183.664c0-5.147.146-8.592.439-10.332.312-1.747.793-3.155 1.441-4.229 1.035-2.034 2.703-3.845 4.99-5.437 2.254-1.615 5.062-2.441 8.432-2.479 3.408.037 6.244.869 8.514 2.487 2.254 1.597 3.88 3.417 4.877 5.461.723 1.068 1.224 2.479 1.498 4.215.252 1.741.382 5.18.382 10.313 0 5.06-.13 8.476-.382 10.255-.274 1.782-.775 3.206-1.498 4.279-.997 2.039-2.623 3.841-4.877 5.399-2.27 1.615-5.109 2.464-8.516 2.548-3.367-.084-6.176-.933-8.43-2.548-2.293-1.559-3.955-3.36-4.99-5.399a45.995 45.995 0 0 1-.853-1.914c-.234-.626-.431-1.414-.589-2.365-.292-1.778-.438-5.194-.438-10.254zm6.488 0c0 4.359.155 7.31.466 8.85.275 1.54.837 2.786 1.68 3.737.687.91 1.588 1.653 2.708 2.218 1.102.672 2.414 1.003 3.944 1.003 1.549 0 2.893-.331 4.032-1.003 1.077-.564 1.941-1.308 2.589-2.218.846-.951 1.425-2.197 1.736-3.737.296-1.54.446-4.49.446-8.85 0-4.354-.15-7.322-.446-8.903-.312-1.504-.891-2.728-1.736-3.679-.647-.914-1.512-1.675-2.589-2.282-1.14-.588-2.483-.9-4.032-.942-1.53.042-2.843.354-3.944.942-1.12.607-2.021 1.368-2.708 2.282-.843.951-1.404 2.175-1.68 3.679-.311 1.581-.466 4.55-.466 8.903zM239.817 161.552h6.115l19.401 31.441h.117v-31.441h6.485v44.23h-6.145l-19.371-31.442h-.117v31.442h-6.486v-44.23zM287.064 161.552h27.367v6.306h-20.88v13.082h17.822v5.941h-17.822v18.901h-6.487v-44.23z"/></symbol></svg><div class="banner">
<svg class="banner__mobilelogo"><use xlink:href="#Modular-Conf-Mobile-Logo-1-0"></use></svg>
<svg class="banner__desktoplogo"><use xlink:href="#Modular-Conf-Microsite-Logo-1-0"></use></svg>
</div>]]></static-content>
</root>, createDate=1469626146602, description=, descriptionCurrentValue=, displayDate=1469625840000, expirationDate=null, groupId=67510365, id=77062222, indexable=true, layoutUuid=, modifiedDate=1469626146658, resourcePrimKey=77062080, reviewDate=null, smallImage=false, smallImageId=77062081, smallImageURL=, status=0, statusByUserId=66748356, statusByUserName=Allen Ziegenfus, statusDate=1469626146658, structureId=, templateId=, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf Banner -- /web/events2016/modconf</Title></root>, titleCurrentValue=modconf Banner -- /web/events2016/modconf, type=general, urlTitle=modconf-banner-web-events2016-modconf, userId=66748356, userName=Allen Ziegenfus, uuid=a9a406f9-1715-4845-a6c0-037b14c301a8, version=1.1, urlTitle=modconf-banner-web-events2016-modconf, indexable=true, classNameId=0, layoutUuid=, statusDate=1469625891750, smallImageId=77062081, type=general, articleId=77062078, version=1, id=77062079, title=<?xml version='1.0' encoding='UTF-8'?><root available-locales="en_US" default-locale="en_US"><Title language-id="en_US">modconf Banner -- /web/events2016/modconf</Title></root>, description=, userId=66748356, userName=Allen Ziegenfus, smallImage=false, createDate=1469625891611, titleCurrentValue=modconf Banner -- /web/events2016/modconf, displayDate=1469625840000, smallImageURL=, expirationDate=null, status=0, statusByUserName=Allen Ziegenfus, reviewDate=null, modifiedDate=1469625891750, content=<?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>, templateId=, groupId=67510365, descriptionCurrentValue=, resourcePrimKey=77062080, classPK=0, structureId=, statusByUserId=66748356, companyId=1, uuid=cfd2eb81-3408-4126-b19a-109247b8fa76
2016-07-27T13:29:07.412Z - debug: body: [object Object]
2016-07-27T13:29:07.412Z - debug: body: <?xml version="1.0"?>

<root available-locales="en_US" default-locale="en_US">
	<static-content language-id="en_US"><![CDATA[]]></static-content>
</root>
